

Microchip MPLAB XC8 Assembler V3.00 build 20241204225717 
                                                                                               Thu Apr 24 08:05:43 2025

Microchip MPLAB XC8 C Compiler v3.00 (Free license) build 20241204225717 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,space=0,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,space=0,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,space=0,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,space=0,delta=1,group=3
    12                           	psect	text2,global,reloc=2,class=CODE,space=0,delta=1,group=1
    13                           	psect	text3,global,reloc=2,class=CODE,space=0,delta=1,group=1
    14                           	psect	text4,global,reloc=2,class=CODE,space=0,delta=1,group=1
    15                           	psect	text5,global,reloc=2,class=CODE,space=0,delta=1,group=1
    16                           	psect	text6,global,reloc=2,class=CODE,space=0,delta=1,group=1
    17                           	psect	text7,global,reloc=2,class=CODE,space=0,delta=1,group=3
    18                           	psect	text8,global,reloc=2,class=CODE,space=0,delta=1,group=3
    19                           	psect	text9,global,reloc=2,class=CODE,space=0,delta=1,group=3
    20                           	psect	text10,global,reloc=2,class=CODE,space=0,delta=1,group=3
    21                           	psect	text11,global,reloc=2,class=CODE,space=0,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,space=0,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,space=0,delta=1,group=2
    24                           	psect	text14,global,reloc=2,class=CODE,space=0,delta=1,group=2
    25                           	psect	text15,global,reloc=2,class=CODE,space=0,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,space=0,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,space=0,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,space=0,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,space=0,delta=1
    30                           	psect	text20,global,reloc=2,class=CODE,space=0,delta=1
    31                           	psect	text21,global,reloc=2,class=CODE,space=0,delta=1
    32                           	psect	text22,global,reloc=2,class=CODE,space=0,delta=1
    33                           	psect	text23,global,reloc=2,class=CODE,space=0,delta=1
    34                           	psect	text24,global,reloc=2,class=CODE,space=0,delta=1
    35                           	psect	text25,global,reloc=2,class=CODE,space=0,delta=1
    36                           	psect	text26,global,reloc=2,class=CODE,space=0,delta=1
    37                           	psect	text27,global,reloc=2,class=CODE,space=0,delta=1
    38                           	psect	text28,global,reloc=2,class=CODE,space=0,delta=1
    39                           	psect	text29,global,reloc=2,class=CODE,space=0,delta=1
    40                           	psect	text30,global,reloc=2,class=CODE,space=0,delta=1
    41                           	psect	text31,global,reloc=2,class=CODE,space=0,delta=1,group=2
    42                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    43                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    44                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    45                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    46   000000                     
    47                           ; Version 2.20
    48                           ; Generated 12/02/2020 GMT
    49                           ; 
    50                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    51                           ; All rights reserved.
    52                           ; 
    53                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    54                           ; 
    55                           ; Redistribution and use in source and binary forms, with or without modification, are
    56                           ; permitted provided that the following conditions are met:
    57                           ; 
    58                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    59                           ;        conditions and the following disclaimer.
    60                           ; 
    61                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    62                           ;        of conditions and the following disclaimer in the documentation and/or other
    63                           ;        materials provided with the distribution.
    64                           ; 
    65                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    66                           ;        software without specific prior written permission.
    67                           ; 
    68                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    69                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    70                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    71                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    72                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    73                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    74                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    75                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    76                           ; 
    77                           ; 
    78                           ; Code-generator required, PIC18F4550 Definitions
    79                           ; 
    80                           ; SFR Addresses
    81   000FE0                     bsr             equ	4064
    82   000FE9                     fsr0            equ	4073
    83   000FEA                     fsr0h           equ	4074
    84   000FE9                     fsr0l           equ	4073
    85   000FE1                     fsr1            equ	4065
    86   000FE2                     fsr1h           equ	4066
    87   000FE1                     fsr1l           equ	4065
    88   000FD9                     fsr2            equ	4057
    89   000FDA                     fsr2h           equ	4058
    90   000FD9                     fsr2l           equ	4057
    91   000FEF                     indf0           equ	4079
    92   000FE7                     indf1           equ	4071
    93   000FDF                     indf2           equ	4063
    94   000FF2                     intcon          equ	4082
    95   000000                     nvmcon          equ	0
    96   000FF9                     pcl             equ	4089
    97   000FFA                     pclath          equ	4090
    98   000FFB                     pclatu          equ	4091
    99   000FEB                     plusw0          equ	4075
   100   000FE3                     plusw1          equ	4067
   101   000FDB                     plusw2          equ	4059
   102   000FED                     postdec0        equ	4077
   103   000FE5                     postdec1        equ	4069
   104   000FDD                     postdec2        equ	4061
   105   000FEE                     postinc0        equ	4078
   106   000FE6                     postinc1        equ	4070
   107   000FDE                     postinc2        equ	4062
   108   000FEC                     preinc0         equ	4076
   109   000FE4                     preinc1         equ	4068
   110   000FDC                     preinc2         equ	4060
   111   000FF3                     prod            equ	4083
   112   000FF4                     prodh           equ	4084
   113   000FF3                     prodl           equ	4083
   114   000FD8                     status          equ	4056
   115   000FF5                     tablat          equ	4085
   116   000FF6                     tblptr          equ	4086
   117   000FF7                     tblptrh         equ	4087
   118   000FF6                     tblptrl         equ	4086
   119   000FF8                     tblptru         equ	4088
   120   000FFD                     tosl            equ	4093
   121   000FE8                     wreg            equ	4072
   122   000F62                     SPPDATA         equ	3938	;# 
   123   000F63                     SPPCFG          equ	3939	;# 
   124   000F64                     SPPEPS          equ	3940	;# 
   125   000F65                     SPPCON          equ	3941	;# 
   126   000F66                     UFRM            equ	3942	;# 
   127   000F66                     UFRML           equ	3942	;# 
   128   000F67                     UFRMH           equ	3943	;# 
   129   000F68                     UIR             equ	3944	;# 
   130   000F69                     UIE             equ	3945	;# 
   131   000F6A                     UEIR            equ	3946	;# 
   132   000F6B                     UEIE            equ	3947	;# 
   133   000F6C                     USTAT           equ	3948	;# 
   134   000F6D                     UCON            equ	3949	;# 
   135   000F6E                     UADDR           equ	3950	;# 
   136   000F6F                     UCFG            equ	3951	;# 
   137   000F70                     UEP0            equ	3952	;# 
   138   000F71                     UEP1            equ	3953	;# 
   139   000F72                     UEP2            equ	3954	;# 
   140   000F73                     UEP3            equ	3955	;# 
   141   000F74                     UEP4            equ	3956	;# 
   142   000F75                     UEP5            equ	3957	;# 
   143   000F76                     UEP6            equ	3958	;# 
   144   000F77                     UEP7            equ	3959	;# 
   145   000F78                     UEP8            equ	3960	;# 
   146   000F79                     UEP9            equ	3961	;# 
   147   000F7A                     UEP10           equ	3962	;# 
   148   000F7B                     UEP11           equ	3963	;# 
   149   000F7C                     UEP12           equ	3964	;# 
   150   000F7D                     UEP13           equ	3965	;# 
   151   000F7E                     UEP14           equ	3966	;# 
   152   000F7F                     UEP15           equ	3967	;# 
   153   000F80                     PORTA           equ	3968	;# 
   154   000F81                     PORTB           equ	3969	;# 
   155   000F82                     PORTC           equ	3970	;# 
   156   000F83                     PORTD           equ	3971	;# 
   157   000F84                     PORTE           equ	3972	;# 
   158   000F89                     LATA            equ	3977	;# 
   159   000F8A                     LATB            equ	3978	;# 
   160   000F8B                     LATC            equ	3979	;# 
   161   000F8C                     LATD            equ	3980	;# 
   162   000F8D                     LATE            equ	3981	;# 
   163   000F92                     TRISA           equ	3986	;# 
   164   000F92                     DDRA            equ	3986	;# 
   165   000F93                     TRISB           equ	3987	;# 
   166   000F93                     DDRB            equ	3987	;# 
   167   000F94                     TRISC           equ	3988	;# 
   168   000F94                     DDRC            equ	3988	;# 
   169   000F95                     TRISD           equ	3989	;# 
   170   000F95                     DDRD            equ	3989	;# 
   171   000F96                     TRISE           equ	3990	;# 
   172   000F96                     DDRE            equ	3990	;# 
   173   000F9B                     OSCTUNE         equ	3995	;# 
   174   000F9D                     PIE1            equ	3997	;# 
   175   000F9E                     PIR1            equ	3998	;# 
   176   000F9F                     IPR1            equ	3999	;# 
   177   000FA0                     PIE2            equ	4000	;# 
   178   000FA1                     PIR2            equ	4001	;# 
   179   000FA2                     IPR2            equ	4002	;# 
   180   000FA6                     EECON1          equ	4006	;# 
   181   000FA7                     EECON2          equ	4007	;# 
   182   000FA8                     EEDATA          equ	4008	;# 
   183   000FA9                     EEADR           equ	4009	;# 
   184   000FAB                     RCSTA           equ	4011	;# 
   185   000FAB                     RCSTA1          equ	4011	;# 
   186   000FAC                     TXSTA           equ	4012	;# 
   187   000FAC                     TXSTA1          equ	4012	;# 
   188   000FAD                     TXREG           equ	4013	;# 
   189   000FAD                     TXREG1          equ	4013	;# 
   190   000FAE                     RCREG           equ	4014	;# 
   191   000FAE                     RCREG1          equ	4014	;# 
   192   000FAF                     SPBRG           equ	4015	;# 
   193   000FAF                     SPBRG1          equ	4015	;# 
   194   000FB0                     SPBRGH          equ	4016	;# 
   195   000FB1                     T3CON           equ	4017	;# 
   196   000FB2                     TMR3            equ	4018	;# 
   197   000FB2                     TMR3L           equ	4018	;# 
   198   000FB3                     TMR3H           equ	4019	;# 
   199   000FB4                     CMCON           equ	4020	;# 
   200   000FB5                     CVRCON          equ	4021	;# 
   201   000FB6                     ECCP1AS         equ	4022	;# 
   202   000FB6                     CCP1AS          equ	4022	;# 
   203   000FB7                     ECCP1DEL        equ	4023	;# 
   204   000FB7                     CCP1DEL         equ	4023	;# 
   205   000FB8                     BAUDCON         equ	4024	;# 
   206   000FB8                     BAUDCTL         equ	4024	;# 
   207   000FBA                     CCP2CON         equ	4026	;# 
   208   000FBB                     CCPR2           equ	4027	;# 
   209   000FBB                     CCPR2L          equ	4027	;# 
   210   000FBC                     CCPR2H          equ	4028	;# 
   211   000FBD                     CCP1CON         equ	4029	;# 
   212   000FBD                     ECCP1CON        equ	4029	;# 
   213   000FBE                     CCPR1           equ	4030	;# 
   214   000FBE                     CCPR1L          equ	4030	;# 
   215   000FBF                     CCPR1H          equ	4031	;# 
   216   000FC0                     ADCON2          equ	4032	;# 
   217   000FC1                     ADCON1          equ	4033	;# 
   218   000FC2                     ADCON0          equ	4034	;# 
   219   000FC3                     ADRES           equ	4035	;# 
   220   000FC3                     ADRESL          equ	4035	;# 
   221   000FC4                     ADRESH          equ	4036	;# 
   222   000FC5                     SSPCON2         equ	4037	;# 
   223   000FC6                     SSPCON1         equ	4038	;# 
   224   000FC7                     SSPSTAT         equ	4039	;# 
   225   000FC8                     SSPADD          equ	4040	;# 
   226   000FC9                     SSPBUF          equ	4041	;# 
   227   000FCA                     T2CON           equ	4042	;# 
   228   000FCB                     PR2             equ	4043	;# 
   229   000FCB                     MEMCON          equ	4043	;# 
   230   000FCC                     TMR2            equ	4044	;# 
   231   000FCD                     T1CON           equ	4045	;# 
   232   000FCE                     TMR1            equ	4046	;# 
   233   000FCE                     TMR1L           equ	4046	;# 
   234   000FCF                     TMR1H           equ	4047	;# 
   235   000FD0                     RCON            equ	4048	;# 
   236   000FD1                     WDTCON          equ	4049	;# 
   237   000FD2                     HLVDCON         equ	4050	;# 
   238   000FD2                     LVDCON          equ	4050	;# 
   239   000FD3                     OSCCON          equ	4051	;# 
   240   000FD5                     T0CON           equ	4053	;# 
   241   000FD6                     TMR0            equ	4054	;# 
   242   000FD6                     TMR0L           equ	4054	;# 
   243   000FD7                     TMR0H           equ	4055	;# 
   244   000FD8                     STATUS          equ	4056	;# 
   245   000FD9                     FSR2            equ	4057	;# 
   246   000FD9                     FSR2L           equ	4057	;# 
   247   000FDA                     FSR2H           equ	4058	;# 
   248   000FDB                     PLUSW2          equ	4059	;# 
   249   000FDC                     PREINC2         equ	4060	;# 
   250   000FDD                     POSTDEC2        equ	4061	;# 
   251   000FDE                     POSTINC2        equ	4062	;# 
   252   000FDF                     INDF2           equ	4063	;# 
   253   000FE0                     BSR             equ	4064	;# 
   254   000FE1                     FSR1            equ	4065	;# 
   255   000FE1                     FSR1L           equ	4065	;# 
   256   000FE2                     FSR1H           equ	4066	;# 
   257   000FE3                     PLUSW1          equ	4067	;# 
   258   000FE4                     PREINC1         equ	4068	;# 
   259   000FE5                     POSTDEC1        equ	4069	;# 
   260   000FE6                     POSTINC1        equ	4070	;# 
   261   000FE7                     INDF1           equ	4071	;# 
   262   000FE8                     WREG            equ	4072	;# 
   263   000FE9                     FSR0            equ	4073	;# 
   264   000FE9                     FSR0L           equ	4073	;# 
   265   000FEA                     FSR0H           equ	4074	;# 
   266   000FEB                     PLUSW0          equ	4075	;# 
   267   000FEC                     PREINC0         equ	4076	;# 
   268   000FED                     POSTDEC0        equ	4077	;# 
   269   000FEE                     POSTINC0        equ	4078	;# 
   270   000FEF                     INDF0           equ	4079	;# 
   271   000FF0                     INTCON3         equ	4080	;# 
   272   000FF1                     INTCON2         equ	4081	;# 
   273   000FF2                     INTCON          equ	4082	;# 
   274   000FF3                     PROD            equ	4083	;# 
   275   000FF3                     PRODL           equ	4083	;# 
   276   000FF4                     PRODH           equ	4084	;# 
   277   000FF5                     TABLAT          equ	4085	;# 
   278   000FF6                     TBLPTR          equ	4086	;# 
   279   000FF6                     TBLPTRL         equ	4086	;# 
   280   000FF7                     TBLPTRH         equ	4087	;# 
   281   000FF8                     TBLPTRU         equ	4088	;# 
   282   000FF9                     PCLAT           equ	4089	;# 
   283   000FF9                     PC              equ	4089	;# 
   284   000FF9                     PCL             equ	4089	;# 
   285   000FFA                     PCLATH          equ	4090	;# 
   286   000FFB                     PCLATU          equ	4091	;# 
   287   000FFC                     STKPTR          equ	4092	;# 
   288   000FFD                     TOS             equ	4093	;# 
   289   000FFD                     TOSL            equ	4093	;# 
   290   000FFE                     TOSH            equ	4094	;# 
   291   000FFF                     TOSU            equ	4095	;# 
   292   000F62                     SPPDATA         equ	3938	;# 
   293   000F63                     SPPCFG          equ	3939	;# 
   294   000F64                     SPPEPS          equ	3940	;# 
   295   000F65                     SPPCON          equ	3941	;# 
   296   000F66                     UFRM            equ	3942	;# 
   297   000F66                     UFRML           equ	3942	;# 
   298   000F67                     UFRMH           equ	3943	;# 
   299   000F68                     UIR             equ	3944	;# 
   300   000F69                     UIE             equ	3945	;# 
   301   000F6A                     UEIR            equ	3946	;# 
   302   000F6B                     UEIE            equ	3947	;# 
   303   000F6C                     USTAT           equ	3948	;# 
   304   000F6D                     UCON            equ	3949	;# 
   305   000F6E                     UADDR           equ	3950	;# 
   306   000F6F                     UCFG            equ	3951	;# 
   307   000F70                     UEP0            equ	3952	;# 
   308   000F71                     UEP1            equ	3953	;# 
   309   000F72                     UEP2            equ	3954	;# 
   310   000F73                     UEP3            equ	3955	;# 
   311   000F74                     UEP4            equ	3956	;# 
   312   000F75                     UEP5            equ	3957	;# 
   313   000F76                     UEP6            equ	3958	;# 
   314   000F77                     UEP7            equ	3959	;# 
   315   000F78                     UEP8            equ	3960	;# 
   316   000F79                     UEP9            equ	3961	;# 
   317   000F7A                     UEP10           equ	3962	;# 
   318   000F7B                     UEP11           equ	3963	;# 
   319   000F7C                     UEP12           equ	3964	;# 
   320   000F7D                     UEP13           equ	3965	;# 
   321   000F7E                     UEP14           equ	3966	;# 
   322   000F7F                     UEP15           equ	3967	;# 
   323   000F80                     PORTA           equ	3968	;# 
   324   000F81                     PORTB           equ	3969	;# 
   325   000F82                     PORTC           equ	3970	;# 
   326   000F83                     PORTD           equ	3971	;# 
   327   000F84                     PORTE           equ	3972	;# 
   328   000F89                     LATA            equ	3977	;# 
   329   000F8A                     LATB            equ	3978	;# 
   330   000F8B                     LATC            equ	3979	;# 
   331   000F8C                     LATD            equ	3980	;# 
   332   000F8D                     LATE            equ	3981	;# 
   333   000F92                     TRISA           equ	3986	;# 
   334   000F92                     DDRA            equ	3986	;# 
   335   000F93                     TRISB           equ	3987	;# 
   336   000F93                     DDRB            equ	3987	;# 
   337   000F94                     TRISC           equ	3988	;# 
   338   000F94                     DDRC            equ	3988	;# 
   339   000F95                     TRISD           equ	3989	;# 
   340   000F95                     DDRD            equ	3989	;# 
   341   000F96                     TRISE           equ	3990	;# 
   342   000F96                     DDRE            equ	3990	;# 
   343   000F9B                     OSCTUNE         equ	3995	;# 
   344   000F9D                     PIE1            equ	3997	;# 
   345   000F9E                     PIR1            equ	3998	;# 
   346   000F9F                     IPR1            equ	3999	;# 
   347   000FA0                     PIE2            equ	4000	;# 
   348   000FA1                     PIR2            equ	4001	;# 
   349   000FA2                     IPR2            equ	4002	;# 
   350   000FA6                     EECON1          equ	4006	;# 
   351   000FA7                     EECON2          equ	4007	;# 
   352   000FA8                     EEDATA          equ	4008	;# 
   353   000FA9                     EEADR           equ	4009	;# 
   354   000FAB                     RCSTA           equ	4011	;# 
   355   000FAB                     RCSTA1          equ	4011	;# 
   356   000FAC                     TXSTA           equ	4012	;# 
   357   000FAC                     TXSTA1          equ	4012	;# 
   358   000FAD                     TXREG           equ	4013	;# 
   359   000FAD                     TXREG1          equ	4013	;# 
   360   000FAE                     RCREG           equ	4014	;# 
   361   000FAE                     RCREG1          equ	4014	;# 
   362   000FAF                     SPBRG           equ	4015	;# 
   363   000FAF                     SPBRG1          equ	4015	;# 
   364   000FB0                     SPBRGH          equ	4016	;# 
   365   000FB1                     T3CON           equ	4017	;# 
   366   000FB2                     TMR3            equ	4018	;# 
   367   000FB2                     TMR3L           equ	4018	;# 
   368   000FB3                     TMR3H           equ	4019	;# 
   369   000FB4                     CMCON           equ	4020	;# 
   370   000FB5                     CVRCON          equ	4021	;# 
   371   000FB6                     ECCP1AS         equ	4022	;# 
   372   000FB6                     CCP1AS          equ	4022	;# 
   373   000FB7                     ECCP1DEL        equ	4023	;# 
   374   000FB7                     CCP1DEL         equ	4023	;# 
   375   000FB8                     BAUDCON         equ	4024	;# 
   376   000FB8                     BAUDCTL         equ	4024	;# 
   377   000FBA                     CCP2CON         equ	4026	;# 
   378   000FBB                     CCPR2           equ	4027	;# 
   379   000FBB                     CCPR2L          equ	4027	;# 
   380   000FBC                     CCPR2H          equ	4028	;# 
   381   000FBD                     CCP1CON         equ	4029	;# 
   382   000FBD                     ECCP1CON        equ	4029	;# 
   383   000FBE                     CCPR1           equ	4030	;# 
   384   000FBE                     CCPR1L          equ	4030	;# 
   385   000FBF                     CCPR1H          equ	4031	;# 
   386   000FC0                     ADCON2          equ	4032	;# 
   387   000FC1                     ADCON1          equ	4033	;# 
   388   000FC2                     ADCON0          equ	4034	;# 
   389   000FC3                     ADRES           equ	4035	;# 
   390   000FC3                     ADRESL          equ	4035	;# 
   391   000FC4                     ADRESH          equ	4036	;# 
   392   000FC5                     SSPCON2         equ	4037	;# 
   393   000FC6                     SSPCON1         equ	4038	;# 
   394   000FC7                     SSPSTAT         equ	4039	;# 
   395   000FC8                     SSPADD          equ	4040	;# 
   396   000FC9                     SSPBUF          equ	4041	;# 
   397   000FCA                     T2CON           equ	4042	;# 
   398   000FCB                     PR2             equ	4043	;# 
   399   000FCB                     MEMCON          equ	4043	;# 
   400   000FCC                     TMR2            equ	4044	;# 
   401   000FCD                     T1CON           equ	4045	;# 
   402   000FCE                     TMR1            equ	4046	;# 
   403   000FCE                     TMR1L           equ	4046	;# 
   404   000FCF                     TMR1H           equ	4047	;# 
   405   000FD0                     RCON            equ	4048	;# 
   406   000FD1                     WDTCON          equ	4049	;# 
   407   000FD2                     HLVDCON         equ	4050	;# 
   408   000FD2                     LVDCON          equ	4050	;# 
   409   000FD3                     OSCCON          equ	4051	;# 
   410   000FD5                     T0CON           equ	4053	;# 
   411   000FD6                     TMR0            equ	4054	;# 
   412   000FD6                     TMR0L           equ	4054	;# 
   413   000FD7                     TMR0H           equ	4055	;# 
   414   000FD8                     STATUS          equ	4056	;# 
   415   000FD9                     FSR2            equ	4057	;# 
   416   000FD9                     FSR2L           equ	4057	;# 
   417   000FDA                     FSR2H           equ	4058	;# 
   418   000FDB                     PLUSW2          equ	4059	;# 
   419   000FDC                     PREINC2         equ	4060	;# 
   420   000FDD                     POSTDEC2        equ	4061	;# 
   421   000FDE                     POSTINC2        equ	4062	;# 
   422   000FDF                     INDF2           equ	4063	;# 
   423   000FE0                     BSR             equ	4064	;# 
   424   000FE1                     FSR1            equ	4065	;# 
   425   000FE1                     FSR1L           equ	4065	;# 
   426   000FE2                     FSR1H           equ	4066	;# 
   427   000FE3                     PLUSW1          equ	4067	;# 
   428   000FE4                     PREINC1         equ	4068	;# 
   429   000FE5                     POSTDEC1        equ	4069	;# 
   430   000FE6                     POSTINC1        equ	4070	;# 
   431   000FE7                     INDF1           equ	4071	;# 
   432   000FE8                     WREG            equ	4072	;# 
   433   000FE9                     FSR0            equ	4073	;# 
   434   000FE9                     FSR0L           equ	4073	;# 
   435   000FEA                     FSR0H           equ	4074	;# 
   436   000FEB                     PLUSW0          equ	4075	;# 
   437   000FEC                     PREINC0         equ	4076	;# 
   438   000FED                     POSTDEC0        equ	4077	;# 
   439   000FEE                     POSTINC0        equ	4078	;# 
   440   000FEF                     INDF0           equ	4079	;# 
   441   000FF0                     INTCON3         equ	4080	;# 
   442   000FF1                     INTCON2         equ	4081	;# 
   443   000FF2                     INTCON          equ	4082	;# 
   444   000FF3                     PROD            equ	4083	;# 
   445   000FF3                     PRODL           equ	4083	;# 
   446   000FF4                     PRODH           equ	4084	;# 
   447   000FF5                     TABLAT          equ	4085	;# 
   448   000FF6                     TBLPTR          equ	4086	;# 
   449   000FF6                     TBLPTRL         equ	4086	;# 
   450   000FF7                     TBLPTRH         equ	4087	;# 
   451   000FF8                     TBLPTRU         equ	4088	;# 
   452   000FF9                     PCLAT           equ	4089	;# 
   453   000FF9                     PC              equ	4089	;# 
   454   000FF9                     PCL             equ	4089	;# 
   455   000FFA                     PCLATH          equ	4090	;# 
   456   000FFB                     PCLATU          equ	4091	;# 
   457   000FFC                     STKPTR          equ	4092	;# 
   458   000FFD                     TOS             equ	4093	;# 
   459   000FFD                     TOSL            equ	4093	;# 
   460   000FFE                     TOSH            equ	4094	;# 
   461   000FFF                     TOSU            equ	4095	;# 
   462   000F62                     SPPDATA         equ	3938	;# 
   463   000F63                     SPPCFG          equ	3939	;# 
   464   000F64                     SPPEPS          equ	3940	;# 
   465   000F65                     SPPCON          equ	3941	;# 
   466   000F66                     UFRM            equ	3942	;# 
   467   000F66                     UFRML           equ	3942	;# 
   468   000F67                     UFRMH           equ	3943	;# 
   469   000F68                     UIR             equ	3944	;# 
   470   000F69                     UIE             equ	3945	;# 
   471   000F6A                     UEIR            equ	3946	;# 
   472   000F6B                     UEIE            equ	3947	;# 
   473   000F6C                     USTAT           equ	3948	;# 
   474   000F6D                     UCON            equ	3949	;# 
   475   000F6E                     UADDR           equ	3950	;# 
   476   000F6F                     UCFG            equ	3951	;# 
   477   000F70                     UEP0            equ	3952	;# 
   478   000F71                     UEP1            equ	3953	;# 
   479   000F72                     UEP2            equ	3954	;# 
   480   000F73                     UEP3            equ	3955	;# 
   481   000F74                     UEP4            equ	3956	;# 
   482   000F75                     UEP5            equ	3957	;# 
   483   000F76                     UEP6            equ	3958	;# 
   484   000F77                     UEP7            equ	3959	;# 
   485   000F78                     UEP8            equ	3960	;# 
   486   000F79                     UEP9            equ	3961	;# 
   487   000F7A                     UEP10           equ	3962	;# 
   488   000F7B                     UEP11           equ	3963	;# 
   489   000F7C                     UEP12           equ	3964	;# 
   490   000F7D                     UEP13           equ	3965	;# 
   491   000F7E                     UEP14           equ	3966	;# 
   492   000F7F                     UEP15           equ	3967	;# 
   493   000F80                     PORTA           equ	3968	;# 
   494   000F81                     PORTB           equ	3969	;# 
   495   000F82                     PORTC           equ	3970	;# 
   496   000F83                     PORTD           equ	3971	;# 
   497   000F84                     PORTE           equ	3972	;# 
   498   000F89                     LATA            equ	3977	;# 
   499   000F8A                     LATB            equ	3978	;# 
   500   000F8B                     LATC            equ	3979	;# 
   501   000F8C                     LATD            equ	3980	;# 
   502   000F8D                     LATE            equ	3981	;# 
   503   000F92                     TRISA           equ	3986	;# 
   504   000F92                     DDRA            equ	3986	;# 
   505   000F93                     TRISB           equ	3987	;# 
   506   000F93                     DDRB            equ	3987	;# 
   507   000F94                     TRISC           equ	3988	;# 
   508   000F94                     DDRC            equ	3988	;# 
   509   000F95                     TRISD           equ	3989	;# 
   510   000F95                     DDRD            equ	3989	;# 
   511   000F96                     TRISE           equ	3990	;# 
   512   000F96                     DDRE            equ	3990	;# 
   513   000F9B                     OSCTUNE         equ	3995	;# 
   514   000F9D                     PIE1            equ	3997	;# 
   515   000F9E                     PIR1            equ	3998	;# 
   516   000F9F                     IPR1            equ	3999	;# 
   517   000FA0                     PIE2            equ	4000	;# 
   518   000FA1                     PIR2            equ	4001	;# 
   519   000FA2                     IPR2            equ	4002	;# 
   520   000FA6                     EECON1          equ	4006	;# 
   521   000FA7                     EECON2          equ	4007	;# 
   522   000FA8                     EEDATA          equ	4008	;# 
   523   000FA9                     EEADR           equ	4009	;# 
   524   000FAB                     RCSTA           equ	4011	;# 
   525   000FAB                     RCSTA1          equ	4011	;# 
   526   000FAC                     TXSTA           equ	4012	;# 
   527   000FAC                     TXSTA1          equ	4012	;# 
   528   000FAD                     TXREG           equ	4013	;# 
   529   000FAD                     TXREG1          equ	4013	;# 
   530   000FAE                     RCREG           equ	4014	;# 
   531   000FAE                     RCREG1          equ	4014	;# 
   532   000FAF                     SPBRG           equ	4015	;# 
   533   000FAF                     SPBRG1          equ	4015	;# 
   534   000FB0                     SPBRGH          equ	4016	;# 
   535   000FB1                     T3CON           equ	4017	;# 
   536   000FB2                     TMR3            equ	4018	;# 
   537   000FB2                     TMR3L           equ	4018	;# 
   538   000FB3                     TMR3H           equ	4019	;# 
   539   000FB4                     CMCON           equ	4020	;# 
   540   000FB5                     CVRCON          equ	4021	;# 
   541   000FB6                     ECCP1AS         equ	4022	;# 
   542   000FB6                     CCP1AS          equ	4022	;# 
   543   000FB7                     ECCP1DEL        equ	4023	;# 
   544   000FB7                     CCP1DEL         equ	4023	;# 
   545   000FB8                     BAUDCON         equ	4024	;# 
   546   000FB8                     BAUDCTL         equ	4024	;# 
   547   000FBA                     CCP2CON         equ	4026	;# 
   548   000FBB                     CCPR2           equ	4027	;# 
   549   000FBB                     CCPR2L          equ	4027	;# 
   550   000FBC                     CCPR2H          equ	4028	;# 
   551   000FBD                     CCP1CON         equ	4029	;# 
   552   000FBD                     ECCP1CON        equ	4029	;# 
   553   000FBE                     CCPR1           equ	4030	;# 
   554   000FBE                     CCPR1L          equ	4030	;# 
   555   000FBF                     CCPR1H          equ	4031	;# 
   556   000FC0                     ADCON2          equ	4032	;# 
   557   000FC1                     ADCON1          equ	4033	;# 
   558   000FC2                     ADCON0          equ	4034	;# 
   559   000FC3                     ADRES           equ	4035	;# 
   560   000FC3                     ADRESL          equ	4035	;# 
   561   000FC4                     ADRESH          equ	4036	;# 
   562   000FC5                     SSPCON2         equ	4037	;# 
   563   000FC6                     SSPCON1         equ	4038	;# 
   564   000FC7                     SSPSTAT         equ	4039	;# 
   565   000FC8                     SSPADD          equ	4040	;# 
   566   000FC9                     SSPBUF          equ	4041	;# 
   567   000FCA                     T2CON           equ	4042	;# 
   568   000FCB                     PR2             equ	4043	;# 
   569   000FCB                     MEMCON          equ	4043	;# 
   570   000FCC                     TMR2            equ	4044	;# 
   571   000FCD                     T1CON           equ	4045	;# 
   572   000FCE                     TMR1            equ	4046	;# 
   573   000FCE                     TMR1L           equ	4046	;# 
   574   000FCF                     TMR1H           equ	4047	;# 
   575   000FD0                     RCON            equ	4048	;# 
   576   000FD1                     WDTCON          equ	4049	;# 
   577   000FD2                     HLVDCON         equ	4050	;# 
   578   000FD2                     LVDCON          equ	4050	;# 
   579   000FD3                     OSCCON          equ	4051	;# 
   580   000FD5                     T0CON           equ	4053	;# 
   581   000FD6                     TMR0            equ	4054	;# 
   582   000FD6                     TMR0L           equ	4054	;# 
   583   000FD7                     TMR0H           equ	4055	;# 
   584   000FD8                     STATUS          equ	4056	;# 
   585   000FD9                     FSR2            equ	4057	;# 
   586   000FD9                     FSR2L           equ	4057	;# 
   587   000FDA                     FSR2H           equ	4058	;# 
   588   000FDB                     PLUSW2          equ	4059	;# 
   589   000FDC                     PREINC2         equ	4060	;# 
   590   000FDD                     POSTDEC2        equ	4061	;# 
   591   000FDE                     POSTINC2        equ	4062	;# 
   592   000FDF                     INDF2           equ	4063	;# 
   593   000FE0                     BSR             equ	4064	;# 
   594   000FE1                     FSR1            equ	4065	;# 
   595   000FE1                     FSR1L           equ	4065	;# 
   596   000FE2                     FSR1H           equ	4066	;# 
   597   000FE3                     PLUSW1          equ	4067	;# 
   598   000FE4                     PREINC1         equ	4068	;# 
   599   000FE5                     POSTDEC1        equ	4069	;# 
   600   000FE6                     POSTINC1        equ	4070	;# 
   601   000FE7                     INDF1           equ	4071	;# 
   602   000FE8                     WREG            equ	4072	;# 
   603   000FE9                     FSR0            equ	4073	;# 
   604   000FE9                     FSR0L           equ	4073	;# 
   605   000FEA                     FSR0H           equ	4074	;# 
   606   000FEB                     PLUSW0          equ	4075	;# 
   607   000FEC                     PREINC0         equ	4076	;# 
   608   000FED                     POSTDEC0        equ	4077	;# 
   609   000FEE                     POSTINC0        equ	4078	;# 
   610   000FEF                     INDF0           equ	4079	;# 
   611   000FF0                     INTCON3         equ	4080	;# 
   612   000FF1                     INTCON2         equ	4081	;# 
   613   000FF2                     INTCON          equ	4082	;# 
   614   000FF3                     PROD            equ	4083	;# 
   615   000FF3                     PRODL           equ	4083	;# 
   616   000FF4                     PRODH           equ	4084	;# 
   617   000FF5                     TABLAT          equ	4085	;# 
   618   000FF6                     TBLPTR          equ	4086	;# 
   619   000FF6                     TBLPTRL         equ	4086	;# 
   620   000FF7                     TBLPTRH         equ	4087	;# 
   621   000FF8                     TBLPTRU         equ	4088	;# 
   622   000FF9                     PCLAT           equ	4089	;# 
   623   000FF9                     PC              equ	4089	;# 
   624   000FF9                     PCL             equ	4089	;# 
   625   000FFA                     PCLATH          equ	4090	;# 
   626   000FFB                     PCLATU          equ	4091	;# 
   627   000FFC                     STKPTR          equ	4092	;# 
   628   000FFD                     TOS             equ	4093	;# 
   629   000FFD                     TOSL            equ	4093	;# 
   630   000FFE                     TOSH            equ	4094	;# 
   631   000FFF                     TOSU            equ	4095	;# 
   632   000F62                     SPPDATA         equ	3938	;# 
   633   000F63                     SPPCFG          equ	3939	;# 
   634   000F64                     SPPEPS          equ	3940	;# 
   635   000F65                     SPPCON          equ	3941	;# 
   636   000F66                     UFRM            equ	3942	;# 
   637   000F66                     UFRML           equ	3942	;# 
   638   000F67                     UFRMH           equ	3943	;# 
   639   000F68                     UIR             equ	3944	;# 
   640   000F69                     UIE             equ	3945	;# 
   641   000F6A                     UEIR            equ	3946	;# 
   642   000F6B                     UEIE            equ	3947	;# 
   643   000F6C                     USTAT           equ	3948	;# 
   644   000F6D                     UCON            equ	3949	;# 
   645   000F6E                     UADDR           equ	3950	;# 
   646   000F6F                     UCFG            equ	3951	;# 
   647   000F70                     UEP0            equ	3952	;# 
   648   000F71                     UEP1            equ	3953	;# 
   649   000F72                     UEP2            equ	3954	;# 
   650   000F73                     UEP3            equ	3955	;# 
   651   000F74                     UEP4            equ	3956	;# 
   652   000F75                     UEP5            equ	3957	;# 
   653   000F76                     UEP6            equ	3958	;# 
   654   000F77                     UEP7            equ	3959	;# 
   655   000F78                     UEP8            equ	3960	;# 
   656   000F79                     UEP9            equ	3961	;# 
   657   000F7A                     UEP10           equ	3962	;# 
   658   000F7B                     UEP11           equ	3963	;# 
   659   000F7C                     UEP12           equ	3964	;# 
   660   000F7D                     UEP13           equ	3965	;# 
   661   000F7E                     UEP14           equ	3966	;# 
   662   000F7F                     UEP15           equ	3967	;# 
   663   000F80                     PORTA           equ	3968	;# 
   664   000F81                     PORTB           equ	3969	;# 
   665   000F82                     PORTC           equ	3970	;# 
   666   000F83                     PORTD           equ	3971	;# 
   667   000F84                     PORTE           equ	3972	;# 
   668   000F89                     LATA            equ	3977	;# 
   669   000F8A                     LATB            equ	3978	;# 
   670   000F8B                     LATC            equ	3979	;# 
   671   000F8C                     LATD            equ	3980	;# 
   672   000F8D                     LATE            equ	3981	;# 
   673   000F92                     TRISA           equ	3986	;# 
   674   000F92                     DDRA            equ	3986	;# 
   675   000F93                     TRISB           equ	3987	;# 
   676   000F93                     DDRB            equ	3987	;# 
   677   000F94                     TRISC           equ	3988	;# 
   678   000F94                     DDRC            equ	3988	;# 
   679   000F95                     TRISD           equ	3989	;# 
   680   000F95                     DDRD            equ	3989	;# 
   681   000F96                     TRISE           equ	3990	;# 
   682   000F96                     DDRE            equ	3990	;# 
   683   000F9B                     OSCTUNE         equ	3995	;# 
   684   000F9D                     PIE1            equ	3997	;# 
   685   000F9E                     PIR1            equ	3998	;# 
   686   000F9F                     IPR1            equ	3999	;# 
   687   000FA0                     PIE2            equ	4000	;# 
   688   000FA1                     PIR2            equ	4001	;# 
   689   000FA2                     IPR2            equ	4002	;# 
   690   000FA6                     EECON1          equ	4006	;# 
   691   000FA7                     EECON2          equ	4007	;# 
   692   000FA8                     EEDATA          equ	4008	;# 
   693   000FA9                     EEADR           equ	4009	;# 
   694   000FAB                     RCSTA           equ	4011	;# 
   695   000FAB                     RCSTA1          equ	4011	;# 
   696   000FAC                     TXSTA           equ	4012	;# 
   697   000FAC                     TXSTA1          equ	4012	;# 
   698   000FAD                     TXREG           equ	4013	;# 
   699   000FAD                     TXREG1          equ	4013	;# 
   700   000FAE                     RCREG           equ	4014	;# 
   701   000FAE                     RCREG1          equ	4014	;# 
   702   000FAF                     SPBRG           equ	4015	;# 
   703   000FAF                     SPBRG1          equ	4015	;# 
   704   000FB0                     SPBRGH          equ	4016	;# 
   705   000FB1                     T3CON           equ	4017	;# 
   706   000FB2                     TMR3            equ	4018	;# 
   707   000FB2                     TMR3L           equ	4018	;# 
   708   000FB3                     TMR3H           equ	4019	;# 
   709   000FB4                     CMCON           equ	4020	;# 
   710   000FB5                     CVRCON          equ	4021	;# 
   711   000FB6                     ECCP1AS         equ	4022	;# 
   712   000FB6                     CCP1AS          equ	4022	;# 
   713   000FB7                     ECCP1DEL        equ	4023	;# 
   714   000FB7                     CCP1DEL         equ	4023	;# 
   715   000FB8                     BAUDCON         equ	4024	;# 
   716   000FB8                     BAUDCTL         equ	4024	;# 
   717   000FBA                     CCP2CON         equ	4026	;# 
   718   000FBB                     CCPR2           equ	4027	;# 
   719   000FBB                     CCPR2L          equ	4027	;# 
   720   000FBC                     CCPR2H          equ	4028	;# 
   721   000FBD                     CCP1CON         equ	4029	;# 
   722   000FBD                     ECCP1CON        equ	4029	;# 
   723   000FBE                     CCPR1           equ	4030	;# 
   724   000FBE                     CCPR1L          equ	4030	;# 
   725   000FBF                     CCPR1H          equ	4031	;# 
   726   000FC0                     ADCON2          equ	4032	;# 
   727   000FC1                     ADCON1          equ	4033	;# 
   728   000FC2                     ADCON0          equ	4034	;# 
   729   000FC3                     ADRES           equ	4035	;# 
   730   000FC3                     ADRESL          equ	4035	;# 
   731   000FC4                     ADRESH          equ	4036	;# 
   732   000FC5                     SSPCON2         equ	4037	;# 
   733   000FC6                     SSPCON1         equ	4038	;# 
   734   000FC7                     SSPSTAT         equ	4039	;# 
   735   000FC8                     SSPADD          equ	4040	;# 
   736   000FC9                     SSPBUF          equ	4041	;# 
   737   000FCA                     T2CON           equ	4042	;# 
   738   000FCB                     PR2             equ	4043	;# 
   739   000FCB                     MEMCON          equ	4043	;# 
   740   000FCC                     TMR2            equ	4044	;# 
   741   000FCD                     T1CON           equ	4045	;# 
   742   000FCE                     TMR1            equ	4046	;# 
   743   000FCE                     TMR1L           equ	4046	;# 
   744   000FCF                     TMR1H           equ	4047	;# 
   745   000FD0                     RCON            equ	4048	;# 
   746   000FD1                     WDTCON          equ	4049	;# 
   747   000FD2                     HLVDCON         equ	4050	;# 
   748   000FD2                     LVDCON          equ	4050	;# 
   749   000FD3                     OSCCON          equ	4051	;# 
   750   000FD5                     T0CON           equ	4053	;# 
   751   000FD6                     TMR0            equ	4054	;# 
   752   000FD6                     TMR0L           equ	4054	;# 
   753   000FD7                     TMR0H           equ	4055	;# 
   754   000FD8                     STATUS          equ	4056	;# 
   755   000FD9                     FSR2            equ	4057	;# 
   756   000FD9                     FSR2L           equ	4057	;# 
   757   000FDA                     FSR2H           equ	4058	;# 
   758   000FDB                     PLUSW2          equ	4059	;# 
   759   000FDC                     PREINC2         equ	4060	;# 
   760   000FDD                     POSTDEC2        equ	4061	;# 
   761   000FDE                     POSTINC2        equ	4062	;# 
   762   000FDF                     INDF2           equ	4063	;# 
   763   000FE0                     BSR             equ	4064	;# 
   764   000FE1                     FSR1            equ	4065	;# 
   765   000FE1                     FSR1L           equ	4065	;# 
   766   000FE2                     FSR1H           equ	4066	;# 
   767   000FE3                     PLUSW1          equ	4067	;# 
   768   000FE4                     PREINC1         equ	4068	;# 
   769   000FE5                     POSTDEC1        equ	4069	;# 
   770   000FE6                     POSTINC1        equ	4070	;# 
   771   000FE7                     INDF1           equ	4071	;# 
   772   000FE8                     WREG            equ	4072	;# 
   773   000FE9                     FSR0            equ	4073	;# 
   774   000FE9                     FSR0L           equ	4073	;# 
   775   000FEA                     FSR0H           equ	4074	;# 
   776   000FEB                     PLUSW0          equ	4075	;# 
   777   000FEC                     PREINC0         equ	4076	;# 
   778   000FED                     POSTDEC0        equ	4077	;# 
   779   000FEE                     POSTINC0        equ	4078	;# 
   780   000FEF                     INDF0           equ	4079	;# 
   781   000FF0                     INTCON3         equ	4080	;# 
   782   000FF1                     INTCON2         equ	4081	;# 
   783   000FF2                     INTCON          equ	4082	;# 
   784   000FF3                     PROD            equ	4083	;# 
   785   000FF3                     PRODL           equ	4083	;# 
   786   000FF4                     PRODH           equ	4084	;# 
   787   000FF5                     TABLAT          equ	4085	;# 
   788   000FF6                     TBLPTR          equ	4086	;# 
   789   000FF6                     TBLPTRL         equ	4086	;# 
   790   000FF7                     TBLPTRH         equ	4087	;# 
   791   000FF8                     TBLPTRU         equ	4088	;# 
   792   000FF9                     PCLAT           equ	4089	;# 
   793   000FF9                     PC              equ	4089	;# 
   794   000FF9                     PCL             equ	4089	;# 
   795   000FFA                     PCLATH          equ	4090	;# 
   796   000FFB                     PCLATU          equ	4091	;# 
   797   000FFC                     STKPTR          equ	4092	;# 
   798   000FFD                     TOS             equ	4093	;# 
   799   000FFD                     TOSL            equ	4093	;# 
   800   000FFE                     TOSH            equ	4094	;# 
   801   000FFF                     TOSU            equ	4095	;# 
   802   007C62                     _LATD2          set	31842
   803   007C60                     _LATD0          set	31840
   804   007E2C                     _ACKEN          set	32300
   805   007E2D                     _ACKDT          set	32301
   806   007E2B                     _RCEN           set	32299
   807   007E2E                     _ACKSTAT        set	32302
   808   007E2A                     _PEN            set	32298
   809   007E29                     _RSEN           set	32297
   810   007E28                     _SEN            set	32296
   811   007C99                     _TRISB1         set	31897
   812   007C98                     _TRISB0         set	31896
   813   000F8C                     _LATD           set	3980
   814   000F95                     _TRISD          set	3989
   815   000FC1                     _ADCON1         set	4033
   816   000FD3                     _OSCCONbits     set	4051
   817   000FC9                     _SSPBUF         set	4041
   818   000FC7                     _SSPSTAT        set	4039
   819   000FC8                     _SSPADD         set	4040
   820   000FC5                     _SSPCON2        set	4037
   821   000FC6                     _SSPCON1        set	4038
   822                           
   823                           	psect	smallconst
   824   000800                     __psmallconst:
   825                           	callstack 0
   826   000800  00                 	db	0
   827   000801                     STR_2:
   828   000801  46                 	db	70	;'F'
   829   000802  65                 	db	101	;'e'
   830   000803  63                 	db	99	;'c'
   831   000804  68                 	db	104	;'h'
   832   000805  61                 	db	97	;'a'
   833   000806  3A                 	db	58	;':'
   834   000807  25                 	db	37
   835   000808  30                 	db	48	;'0'
   836   000809  32                 	db	50	;'2'
   837   00080A  64                 	db	100	;'d'
   838   00080B  2F                 	db	47
   839   00080C  25                 	db	37
   840   00080D  30                 	db	48	;'0'
   841   00080E  32                 	db	50	;'2'
   842   00080F  64                 	db	100	;'d'
   843   000810  2F                 	db	47
   844   000811  32                 	db	50	;'2'
   845   000812  30                 	db	48	;'0'
   846   000813  25                 	db	37
   847   000814  30                 	db	48	;'0'
   848   000815  32                 	db	50	;'2'
   849   000816  64                 	db	100	;'d'
   850   000817  00                 	db	0
   851   000818                     STR_3:
   852   000818  48                 	db	72	;'H'
   853   000819  6F                 	db	111	;'o'
   854   00081A  72                 	db	114	;'r'
   855   00081B  61                 	db	97	;'a'
   856   00081C  3A                 	db	58	;':'
   857   00081D  20                 	db	32
   858   00081E  25                 	db	37
   859   00081F  30                 	db	48	;'0'
   860   000820  32                 	db	50	;'2'
   861   000821  64                 	db	100	;'d'
   862   000822  3A                 	db	58	;':'
   863   000823  25                 	db	37
   864   000824  30                 	db	48	;'0'
   865   000825  32                 	db	50	;'2'
   866   000826  64                 	db	100	;'d'
   867   000827  3A                 	db	58	;':'
   868   000828  25                 	db	37
   869   000829  30                 	db	48	;'0'
   870   00082A  32                 	db	50	;'2'
   871   00082B  64                 	db	100	;'d'
   872   00082C  00                 	db	0
   873   00082D                     STR_1:
   874   00082D  43                 	db	67	;'C'
   875   00082E  6F                 	db	111	;'o'
   876   00082F  6E                 	db	110	;'n'
   877   000830  66                 	db	102	;'f'
   878   000831  69                 	db	105	;'i'
   879   000832  67                 	db	103	;'g'
   880   000833  75                 	db	117	;'u'
   881   000834  72                 	db	114	;'r'
   882   000835  61                 	db	97	;'a'
   883   000836  6E                 	db	110	;'n'
   884   000837  64                 	db	100	;'d'
   885   000838  6F                 	db	111	;'o'
   886   000839  20                 	db	32
   887   00083A  52                 	db	82	;'R'
   888   00083B  54                 	db	84	;'T'
   889   00083C  43                 	db	67	;'C'
   890   00083D  00                 	db	0
   891   00083E  00                 	db	0	; dummy byte at the end
   892   000800                     __smallconst    set	__psmallconst
   893   000800                     __mediumconst   set	__psmallconst
   894   000002                     __activetblptr  equ	2
   895                           
   896                           ; #config settings
   897                           
   898                           	psect	cinit
   899   001520                     __pcinit:
   900                           	callstack 0
   901   001520                     start_initialization:
   902                           	callstack 0
   903   001520                     __initialization:
   904                           	callstack 0
   905                           
   906                           ; Clear objects allocated to BANK0 (32 bytes)
   907   001520  EE00  F060         	lfsr	0,__pbssBANK0
   908   001524  0E20               	movlw	32
   909   001526                     clear_0:
   910   001526  6AEE               	clrf	postinc0,c
   911   001528  06E8               	decf	wreg,f,c
   912   00152A  E1FD               	bnz	clear_0
   913                           
   914                           ; Clear objects allocated to COMRAM (5 bytes)
   915   00152C  6A5E               	clrf	(__pbssCOMRAM+4)& (0+255),c
   916   00152E  6A5D               	clrf	(__pbssCOMRAM+3)& (0+255),c
   917   001530  6A5C               	clrf	(__pbssCOMRAM+2)& (0+255),c
   918   001532  6A5B               	clrf	(__pbssCOMRAM+1)& (0+255),c
   919   001534  6A5A               	clrf	__pbssCOMRAM& (0+255),c
   920   001536                     end_of_initialization:
   921                           	callstack 0
   922   001536                     __end_of__initialization:
   923                           	callstack 0
   924   001536  0E00               	movlw	low (__Lmediumconst shr (0+16))
   925   001538  6EF8               	movwf	tblptru,c
   926   00153A  0100               	movlb	0
   927   00153C  EF7E  F005         	goto	_main	;jump to C main() function
   928                           
   929                           	psect	bssCOMRAM
   930   00005A                     __pbssCOMRAM:
   931                           	callstack 0
   932   00005A                     _width:
   933                           	callstack 0
   934   00005A                     	ds	2
   935   00005C                     _prec:
   936                           	callstack 0
   937   00005C                     	ds	2
   938   00005E                     _flags:
   939                           	callstack 0
   940   00005E                     	ds	1
   941                           
   942                           	psect	bssBANK0
   943   000060                     __pbssBANK0:
   944                           	callstack 0
   945   000060                     _dbuf:
   946                           	callstack 0
   947   000060                     	ds	32
   948                           
   949                           	psect	cstackCOMRAM
   950   000001                     __pcstackCOMRAM:
   951                           	callstack 0
   952   000001                     ?___awdiv:
   953                           	callstack 0
   954   000001                     ?___awmod:
   955                           	callstack 0
   956   000001                     ?_read_prec_or_width:
   957                           	callstack 0
   958   000001                     ?___lldiv:
   959                           	callstack 0
   960   000001                     read_prec_or_width@fmt:
   961                           	callstack 0
   962   000001                     ___awdiv@dividend:
   963                           	callstack 0
   964   000001                     ___awmod@dividend:
   965                           	callstack 0
   966   000001                     fputc@c:
   967                           	callstack 0
   968   000001                     ___lldiv@dividend:
   969                           	callstack 0
   970   000001                     ??_LCD_Command:
   971   000001                     ??_BCD2DEC:
   972   000001                     ??_I2C_Master_Wait:
   973   000001                     ??_LCD_Char:
   974                           
   975                           ; 1 bytes @ 0x0
   976   000001                     	ds	1
   977   000002                     ?_I2C_Master_Read:
   978                           	callstack 0
   979   000002                     BCD2DEC@val:
   980                           	callstack 0
   981   000002                     LCD_Command@cmd:
   982                           	callstack 0
   983   000002                     LCD_Char@dat:
   984                           	callstack 0
   985   000002                     read_prec_or_width@ap:
   986                           	callstack 0
   987   000002                     I2C_Master_Read@a:
   988                           	callstack 0
   989   000002                     
   990                           ; 1 bytes @ 0x1
   991   000002                     	ds	1
   992   000003                     fputc@fp:
   993                           	callstack 0
   994   000003                     LCD_String@msg:
   995                           	callstack 0
   996   000003                     ___awdiv@divisor:
   997                           	callstack 0
   998   000003                     ___awmod@divisor:
   999                           	callstack 0
  1000   000003                     ??_LCD_Init:
  1001   000003                     ??_LCD_Clear:
  1002   000003                     ??_read_prec_or_width:
  1003                           
  1004                           ; 1 bytes @ 0x2
  1005   000003                     	ds	1
  1006   000004                     I2C_Master_Read@temp:
  1007                           	callstack 0
  1008   000004                     ??_fputc:
  1009                           
  1010                           ; 1 bytes @ 0x3
  1011   000004                     	ds	1
  1012   000005                     LCD_String_xy@pos:
  1013                           	callstack 0
  1014   000005                     ___awdiv@counter:
  1015                           	callstack 0
  1016   000005                     ___awmod@counter:
  1017                           	callstack 0
  1018   000005                     read_prec_or_width@c:
  1019                           	callstack 0
  1020   000005                     ___lldiv@divisor:
  1021                           	callstack 0
  1022   000005                     
  1023                           ; 1 bytes @ 0x4
  1024   000005                     	ds	1
  1025   000006                     ___awdiv@sign:
  1026                           	callstack 0
  1027   000006                     ___awmod@sign:
  1028                           	callstack 0
  1029   000006                     LCD_String_xy@msg:
  1030                           	callstack 0
  1031   000006                     read_prec_or_width@n:
  1032                           	callstack 0
  1033                           
  1034                           ; 2 bytes @ 0x5
  1035   000006                     	ds	1
  1036   000007                     ?_abs:
  1037                           	callstack 0
  1038   000007                     ___awdiv@quotient:
  1039                           	callstack 0
  1040   000007                     abs@a:
  1041                           	callstack 0
  1042                           
  1043                           ; 2 bytes @ 0x6
  1044   000007                     	ds	1
  1045   000008                     LCD_String_xy@row:
  1046                           	callstack 0
  1047   000008                     
  1048                           ; 1 bytes @ 0x7
  1049   000008                     	ds	1
  1050   000009                     LCD_String_xy@location:
  1051                           	callstack 0
  1052   000009                     fputs@s:
  1053                           	callstack 0
  1054   000009                     ___lldiv@quotient:
  1055                           	callstack 0
  1056   000009                     ??_abs:
  1057   000009                     ??_DEC2BCD:
  1058   000009                     
  1059                           ; 1 bytes @ 0x8
  1060   000009                     	ds	1
  1061   00000A                     fputs@fp:
  1062                           	callstack 0
  1063                           
  1064                           ; 1 bytes @ 0x9
  1065   00000A                     	ds	1
  1066   00000B                     DEC2BCD@val:
  1067                           	callstack 0
  1068   00000B                     fputs@c:
  1069                           	callstack 0
  1070   00000B                     
  1071                           ; 1 bytes @ 0xA
  1072   00000B                     	ds	1
  1073   00000C                     I2C_Master_Write@d:
  1074                           	callstack 0
  1075   00000C                     fputs@i:
  1076                           	callstack 0
  1077                           
  1078                           ; 2 bytes @ 0xB
  1079   00000C                     	ds	1
  1080   00000D                     ___lldiv@counter:
  1081                           	callstack 0
  1082                           
  1083                           ; 1 bytes @ 0xC
  1084   00000D                     	ds	1
  1085   00000E                     RTC_SetDateTime@m:
  1086                           	callstack 0
  1087   00000E                     RTC_GetDateTime@hour:
  1088                           	callstack 0
  1089   00000E                     pad@fp:
  1090                           	callstack 0
  1091   00000E                     I2C_Master_Init@c:
  1092                           	callstack 0
  1093   00000E                     ??_RTC_Init:
  1094                           
  1095                           ; 1 bytes @ 0xD
  1096   00000E                     	ds	1
  1097   00000F                     RTC_Init@sec:
  1098                           	callstack 0
  1099   00000F                     RTC_SetDateTime@s:
  1100                           	callstack 0
  1101   00000F                     RTC_GetDateTime@min:
  1102                           	callstack 0
  1103   00000F                     pad@buf:
  1104                           	callstack 0
  1105                           
  1106                           ; 1 bytes @ 0xE
  1107   00000F                     	ds	1
  1108   000010                     RTC_SetDateTime@d:
  1109                           	callstack 0
  1110   000010                     RTC_GetDateTime@sec:
  1111                           	callstack 0
  1112   000010                     pad@p:
  1113                           	callstack 0
  1114                           
  1115                           ; 2 bytes @ 0xF
  1116   000010                     	ds	1
  1117   000011                     RTC_SetDateTime@mo:
  1118                           	callstack 0
  1119   000011                     RTC_GetDateTime@day:
  1120                           	callstack 0
  1121                           
  1122                           ; 1 bytes @ 0x10
  1123   000011                     	ds	1
  1124   000012                     RTC_SetDateTime@y:
  1125                           	callstack 0
  1126   000012                     RTC_GetDateTime@month:
  1127                           	callstack 0
  1128   000012                     ??_I2C_Master_Init:
  1129   000012                     ??_pad:
  1130                           
  1131                           ; 1 bytes @ 0x11
  1132   000012                     	ds	1
  1133   000013                     RTC_GetDateTime@year:
  1134                           	callstack 0
  1135   000013                     pad@i:
  1136                           	callstack 0
  1137   000013                     ??_RTC_SetDateTime:
  1138                           
  1139                           ; 1 bytes @ 0x12
  1140   000013                     	ds	1
  1141   000014                     RTC_SetDateTime@h:
  1142                           	callstack 0
  1143   000014                     
  1144                           ; 1 bytes @ 0x13
  1145   000014                     	ds	1
  1146   000015                     dtoa@fp:
  1147                           	callstack 0
  1148                           
  1149                           ; 1 bytes @ 0x14
  1150   000015                     	ds	1
  1151   000016                     dtoa@d:
  1152                           	callstack 0
  1153                           
  1154                           ; 2 bytes @ 0x15
  1155   000016                     	ds	2
  1156   000018                     _dtoa$729:
  1157                           	callstack 0
  1158   000018                     
  1159                           ; 1 bytes @ 0x17
  1160   000018                     	ds	2
  1161   00001A                     dtoa@p:
  1162                           	callstack 0
  1163                           
  1164                           ; 1 bytes @ 0x19
  1165   00001A                     	ds	1
  1166   00001B                     dtoa@w:
  1167                           	callstack 0
  1168                           
  1169                           ; 2 bytes @ 0x1A
  1170   00001B                     	ds	2
  1171   00001D                     dtoa@s:
  1172                           	callstack 0
  1173                           
  1174                           ; 1 bytes @ 0x1C
  1175   00001D                     	ds	1
  1176   00001E                     dtoa@i:
  1177                           	callstack 0
  1178                           
  1179                           ; 2 bytes @ 0x1D
  1180   00001E                     	ds	2
  1181   000020                     vfpfcnvrt@fp:
  1182                           	callstack 0
  1183                           
  1184                           ; 1 bytes @ 0x1F
  1185   000020                     	ds	1
  1186   000021                     vfpfcnvrt@fmt:
  1187                           	callstack 0
  1188                           
  1189                           ; 1 bytes @ 0x20
  1190   000021                     	ds	1
  1191   000022                     vfpfcnvrt@ap:
  1192                           	callstack 0
  1193                           
  1194                           ; 1 bytes @ 0x21
  1195   000022                     	ds	1
  1196   000023                     vfpfcnvrt@convarg:
  1197                           	callstack 0
  1198   000023                     
  1199                           ; 1 bytes @ 0x22
  1200   000023                     	ds	4
  1201   000027                     vfpfcnvrt@done:
  1202                           	callstack 0
  1203                           
  1204                           ; 1 bytes @ 0x26
  1205   000027                     	ds	1
  1206   000028                     vfpfcnvrt@cp:
  1207                           	callstack 0
  1208                           
  1209                           ; 1 bytes @ 0x27
  1210   000028                     	ds	1
  1211   000029                     ?_vfprintf:
  1212                           	callstack 0
  1213   000029                     vfprintf@fp:
  1214                           	callstack 0
  1215                           
  1216                           ; 1 bytes @ 0x28
  1217   000029                     	ds	1
  1218   00002A                     vfprintf@fmt:
  1219                           	callstack 0
  1220                           
  1221                           ; 1 bytes @ 0x29
  1222   00002A                     	ds	1
  1223   00002B                     vfprintf@ap:
  1224                           	callstack 0
  1225                           
  1226                           ; 1 bytes @ 0x2A
  1227   00002B                     	ds	1
  1228   00002C                     vfprintf@cfmt:
  1229                           	callstack 0
  1230   00002C                     
  1231                           ; 1 bytes @ 0x2B
  1232   00002C                     	ds	1
  1233   00002D                     ?_sprintf:
  1234                           	callstack 0
  1235   00002D                     sprintf@s:
  1236                           	callstack 0
  1237                           
  1238                           ; 1 bytes @ 0x2C
  1239   00002D                     	ds	1
  1240   00002E                     sprintf@fmt:
  1241                           	callstack 0
  1242                           
  1243                           ; 1 bytes @ 0x2D
  1244   00002E                     	ds	7
  1245   000035                     sprintf@ap:
  1246                           	callstack 0
  1247   000035                     
  1248                           ; 1 bytes @ 0x34
  1249   000035                     	ds	1
  1250   000036                     sprintf@f:
  1251                           	callstack 0
  1252                           
  1253                           ; 11 bytes @ 0x35
  1254   000036                     	ds	11
  1255   000041                     ??_main:
  1256                           
  1257                           ; 1 bytes @ 0x40
  1258   000041                     	ds	2
  1259   000043                     main@buffer:
  1260                           	callstack 0
  1261                           
  1262                           ; 17 bytes @ 0x42
  1263   000043                     	ds	17
  1264   000054                     main@h:
  1265                           	callstack 0
  1266                           
  1267                           ; 1 bytes @ 0x53
  1268   000054                     	ds	1
  1269   000055                     main@m:
  1270                           	callstack 0
  1271                           
  1272                           ; 1 bytes @ 0x54
  1273   000055                     	ds	1
  1274   000056                     main@s:
  1275                           	callstack 0
  1276                           
  1277                           ; 1 bytes @ 0x55
  1278   000056                     	ds	1
  1279   000057                     main@d:
  1280                           	callstack 0
  1281                           
  1282                           ; 1 bytes @ 0x56
  1283   000057                     	ds	1
  1284   000058                     main@mo:
  1285                           	callstack 0
  1286                           
  1287                           ; 1 bytes @ 0x57
  1288   000058                     	ds	1
  1289   000059                     main@y:
  1290                           	callstack 0
  1291                           
  1292                           ; 1 bytes @ 0x58
  1293   000059                     	ds	1
  1294                           
  1295 ;;
  1296 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1297 ;;
  1298 ;; *************** function _main *****************
  1299 ;; Defined at:
  1300 ;;		line 8 in file "main.c"
  1301 ;; Parameters:    Size  Location     Type
  1302 ;;		None
  1303 ;; Auto vars:     Size  Location     Type
  1304 ;;  buffer         17   66[COMRAM] unsigned char [17]
  1305 ;;  y               1   88[COMRAM] unsigned char 
  1306 ;;  mo              1   87[COMRAM] unsigned char 
  1307 ;;  d               1   86[COMRAM] unsigned char 
  1308 ;;  s               1   85[COMRAM] unsigned char 
  1309 ;;  m               1   84[COMRAM] unsigned char 
  1310 ;;  h               1   83[COMRAM] unsigned char 
  1311 ;; Return value:  Size  Location     Type
  1312 ;;                  1    wreg      void 
  1313 ;; Registers used:
  1314 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1315 ;; Tracked objects:
  1316 ;;		On entry : 0/0
  1317 ;;		On exit  : 0/0
  1318 ;;		Unchanged: 0/0
  1319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1320 ;;      Params:         0       0       0       0       0       0       0       0       0
  1321 ;;      Locals:        23       0       0       0       0       0       0       0       0
  1322 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1323 ;;      Totals:        25       0       0       0       0       0       0       0       0
  1324 ;;Total ram usage:       25 bytes
  1325 ;; Hardware stack levels required when called: 8
  1326 ;; This function calls:
  1327 ;;		_I2C_Master_Init
  1328 ;;		_LCD_Clear
  1329 ;;		_LCD_Init
  1330 ;;		_LCD_String_xy
  1331 ;;		_RTC_GetDateTime
  1332 ;;		_RTC_Init
  1333 ;;		_RTC_SetDateTime
  1334 ;;		_sprintf
  1335 ;; This function is called by:
  1336 ;;		Startup code after reset
  1337 ;; This function uses a non-reentrant model
  1338 ;;
  1339                           
  1340                           	psect	text0
  1341   000AFC                     __ptext0:
  1342                           	callstack 0
  1343   000AFC                     _main:
  1344                           	callstack 23
  1345   000AFC                     
  1346                           ;main.c: 9:     unsigned char h, m, s, d, mo, y;;main.c: 10:     char buffer[17];;main.c
      +                          : 12:     OSCCONbits.IRCF = 0b111;
  1347   000AFC  0E70               	movlw	112
  1348   000AFE  12D3               	iorwf	211,f,c	;volatile
  1349                           
  1350                           ;main.c: 13:     OSCCONbits.SCS = 0b10;
  1351   000B00  50D3               	movf	211,w,c	;volatile
  1352   000B02  0BFC               	andlw	-4
  1353   000B04  0902               	iorlw	2
  1354   000B06  6ED3               	movwf	211,c	;volatile
  1355                           
  1356                           ;main.c: 14:     ADCON1 = 0x0F;
  1357   000B08  0E0F               	movlw	15
  1358   000B0A  6EC1               	movwf	193,c	;volatile
  1359   000B0C                     
  1360                           ;main.c: 16:     LCD_Init();
  1361   000B0C  EC64  F00A         	call	_LCD_Init	;wreg free
  1362   000B10                     
  1363                           ;main.c: 17:     LCD_Clear();
  1364   000B10  ECA0  F00A         	call	_LCD_Clear	;wreg free
  1365   000B14                     
  1366                           ;main.c: 18:     I2C_Master_Init(100000);
  1367   000B14  0EA0               	movlw	160
  1368   000B16  6E0E               	movwf	I2C_Master_Init@c^0,c
  1369   000B18  0E86               	movlw	134
  1370   000B1A  6E0F               	movwf	(I2C_Master_Init@c+1)^0,c
  1371   000B1C  0E01               	movlw	1
  1372   000B1E  6E10               	movwf	(I2C_Master_Init@c+2)^0,c
  1373   000B20  0E00               	movlw	0
  1374   000B22  6E11               	movwf	(I2C_Master_Init@c+3)^0,c
  1375   000B24  EC20  F009         	call	_I2C_Master_Init	;wreg free
  1376   000B28                     
  1377                           ;main.c: 19:     LCD_String_xy(0, 0, "Configurando RTC");
  1378   000B28  0E00               	movlw	0
  1379   000B2A  6E05               	movwf	LCD_String_xy@pos^0,c
  1380   000B2C  0E2D               	movlw	low STR_1
  1381   000B2E  6E06               	movwf	LCD_String_xy@msg^0,c
  1382   000B30  5006               	movf	LCD_String_xy@msg^0,w,c
  1383   000B32  A4D8               	btfss	status,2,c
  1384   000B34  0E08               	movlw	high __smallconst
  1385   000B36  6E07               	movwf	(LCD_String_xy@msg+1)^0,c
  1386   000B38  0E00               	movlw	0
  1387   000B3A  ECDD  F009         	call	_LCD_String_xy
  1388   000B3E                     
  1389                           ;main.c: 20:     RTC_Init();
  1390   000B3E  ECB0  F008         	call	_RTC_Init	;wreg free
  1391   000B42                     
  1392                           ;main.c: 21:     RTC_SetDateTime(14, 30, 0, 8, 4, 25);
  1393   000B42  0E1E               	movlw	30
  1394   000B44  6E0E               	movwf	RTC_SetDateTime@m^0,c
  1395   000B46  0E00               	movlw	0
  1396   000B48  6E0F               	movwf	RTC_SetDateTime@s^0,c
  1397   000B4A  0E08               	movlw	8
  1398   000B4C  6E10               	movwf	RTC_SetDateTime@d^0,c
  1399   000B4E  0E04               	movlw	4
  1400   000B50  6E11               	movwf	RTC_SetDateTime@mo^0,c
  1401   000B52  0E19               	movlw	25
  1402   000B54  6E12               	movwf	RTC_SetDateTime@y^0,c
  1403   000B56  0E0E               	movlw	14
  1404   000B58  ECC7  F007         	call	_RTC_SetDateTime
  1405   000B5C                     
  1406                           ;main.c: 22:     LCD_Clear();
  1407   000B5C  ECA0  F00A         	call	_LCD_Clear	;wreg free
  1408   000B60                     l1812:
  1409                           
  1410                           ;main.c: 25:         RTC_GetDateTime(&h, &m, &s, &d, &mo, &y);
  1411   000B60  0E54               	movlw	low main@h
  1412   000B62  6E0E               	movwf	RTC_GetDateTime@hour^0,c
  1413   000B64  0E55               	movlw	low main@m
  1414   000B66  6E0F               	movwf	RTC_GetDateTime@min^0,c
  1415   000B68  0E56               	movlw	low main@s
  1416   000B6A  6E10               	movwf	RTC_GetDateTime@sec^0,c
  1417   000B6C  0E57               	movlw	low main@d
  1418   000B6E  6E11               	movwf	RTC_GetDateTime@day^0,c
  1419   000B70  0E58               	movlw	low main@mo
  1420   000B72  6E12               	movwf	RTC_GetDateTime@month^0,c
  1421   000B74  0E59               	movlw	low main@y
  1422   000B76  6E13               	movwf	RTC_GetDateTime@year^0,c
  1423   000B78  ECFB  F005         	call	_RTC_GetDateTime	;wreg free
  1424   000B7C                     
  1425                           ;main.c: 27:         sprintf(buffer, "Fecha:%02d/%02d/20%02d", d, mo, y);
  1426   000B7C  0E43               	movlw	low main@buffer
  1427   000B7E  6E2D               	movwf	sprintf@s^0,c
  1428   000B80  0E01               	movlw	low STR_2
  1429   000B82  6E2E               	movwf	sprintf@fmt^0,c
  1430   000B84  C057  F02F         	movff	main@d,?_sprintf+2
  1431   000B88  6A30               	clrf	(?_sprintf+3)^0,c
  1432   000B8A  C058  F031         	movff	main@mo,?_sprintf+4
  1433   000B8E  6A32               	clrf	(?_sprintf+5)^0,c
  1434   000B90  C059  F033         	movff	main@y,?_sprintf+6
  1435   000B94  6A34               	clrf	(?_sprintf+7)^0,c
  1436   000B96  EC30  F00A         	call	_sprintf	;wreg free
  1437   000B9A                     
  1438                           ;main.c: 28:         LCD_String_xy(0, 0, buffer);
  1439   000B9A  0E00               	movlw	0
  1440   000B9C  6E05               	movwf	LCD_String_xy@pos^0,c
  1441   000B9E  0E43               	movlw	low main@buffer
  1442   000BA0  6E06               	movwf	LCD_String_xy@msg^0,c
  1443   000BA2  6A07               	clrf	(LCD_String_xy@msg+1)^0,c
  1444   000BA4  0E00               	movlw	0
  1445   000BA6  ECDD  F009         	call	_LCD_String_xy
  1446   000BAA                     
  1447                           ;main.c: 31:         sprintf(buffer, "Hora: %02d:%02d:%02d", h, m, s);
  1448   000BAA  0E43               	movlw	low main@buffer
  1449   000BAC  6E2D               	movwf	sprintf@s^0,c
  1450   000BAE  0E18               	movlw	low STR_3
  1451   000BB0  6E2E               	movwf	sprintf@fmt^0,c
  1452   000BB2  C054  F02F         	movff	main@h,?_sprintf+2
  1453   000BB6  6A30               	clrf	(?_sprintf+3)^0,c
  1454   000BB8  C055  F031         	movff	main@m,?_sprintf+4
  1455   000BBC  6A32               	clrf	(?_sprintf+5)^0,c
  1456   000BBE  C056  F033         	movff	main@s,?_sprintf+6
  1457   000BC2  6A34               	clrf	(?_sprintf+7)^0,c
  1458   000BC4  EC30  F00A         	call	_sprintf	;wreg free
  1459   000BC8                     
  1460                           ;main.c: 32:         LCD_String_xy(1, 0, buffer);
  1461   000BC8  0E00               	movlw	0
  1462   000BCA  6E05               	movwf	LCD_String_xy@pos^0,c
  1463   000BCC  0E43               	movlw	low main@buffer
  1464   000BCE  6E06               	movwf	LCD_String_xy@msg^0,c
  1465   000BD0  6A07               	clrf	(LCD_String_xy@msg+1)^0,c
  1466   000BD2  0E01               	movlw	1
  1467   000BD4  ECDD  F009         	call	_LCD_String_xy
  1468   000BD8                     
  1469                           ;main.c: 34:         _delay((unsigned long)((1000)*(8000000/4000.0)));
  1470   000BD8  0E0B               	movlw	11
  1471   000BDA  6E42               	movwf	(??_main+1)^0,c
  1472   000BDC  0E26               	movlw	38
  1473   000BDE  6E41               	movwf	??_main^0,c
  1474   000BE0  0E5E               	movlw	94
  1475   000BE2                     u1057:
  1476   000BE2  2EE8               	decfsz	wreg,f,c
  1477   000BE4  D7FE               	bra	u1057
  1478   000BE6  2E41               	decfsz	??_main^0,f,c
  1479   000BE8  D7FC               	bra	u1057
  1480   000BEA  2E42               	decfsz	(??_main+1)^0,f,c
  1481   000BEC  D7FA               	bra	u1057
  1482   000BEE  EFB0  F005         	goto	l1812
  1483   000BF2  EFFE  F03F         	goto	start
  1484   000BF6                     __end_of_main:
  1485                           	callstack 0
  1486                           
  1487 ;; *************** function _sprintf *****************
  1488 ;; Defined at:
  1489 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\nf_sprintf.c"
  1490 ;; Parameters:    Size  Location     Type
  1491 ;;  s               1   44[COMRAM] PTR unsigned char 
  1492 ;;		 -> main@buffer(17), 
  1493 ;;  fmt             1   45[COMRAM] PTR const unsigned char 
  1494 ;;		 -> STR_3(21), STR_2(23), 
  1495 ;; Auto vars:     Size  Location     Type
  1496 ;;  f              11   53[COMRAM] struct _IO_FILE
  1497 ;;  ret             2    0        int 
  1498 ;;  ap              1   52[COMRAM] PTR void [1]
  1499 ;;		 -> ?_sprintf(2), 
  1500 ;; Return value:  Size  Location     Type
  1501 ;;                  2   44[COMRAM] int 
  1502 ;; Registers used:
  1503 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1504 ;; Tracked objects:
  1505 ;;		On entry : 0/0
  1506 ;;		On exit  : 0/0
  1507 ;;		Unchanged: 0/0
  1508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1509 ;;      Params:         8       0       0       0       0       0       0       0       0
  1510 ;;      Locals:        12       0       0       0       0       0       0       0       0
  1511 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1512 ;;      Totals:        20       0       0       0       0       0       0       0       0
  1513 ;;Total ram usage:       20 bytes
  1514 ;; Hardware stack levels used: 1
  1515 ;; Hardware stack levels required when called: 7
  1516 ;; This function calls:
  1517 ;;		_vfprintf
  1518 ;; This function is called by:
  1519 ;;		_main
  1520 ;; This function uses a non-reentrant model
  1521 ;;
  1522                           
  1523                           	psect	text1
  1524   001460                     __ptext1:
  1525                           	callstack 0
  1526   001460                     _sprintf:
  1527                           	callstack 23
  1528   001460  0E2F               	movlw	low (?_sprintf+2)
  1529   001462  6E35               	movwf	sprintf@ap^0,c
  1530   001464  C02D  F036         	movff	sprintf@s,sprintf@f
  1531   001468  0E00               	movlw	0
  1532   00146A  6E39               	movwf	(sprintf@f+3)^0,c
  1533   00146C  0E00               	movlw	0
  1534   00146E  6E38               	movwf	(sprintf@f+2)^0,c
  1535   001470  0E00               	movlw	0
  1536   001472  6E40               	movwf	(sprintf@f+10)^0,c
  1537   001474  0E00               	movlw	0
  1538   001476  6E3F               	movwf	(sprintf@f+9)^0,c
  1539   001478  0E36               	movlw	low sprintf@f
  1540   00147A  6E29               	movwf	vfprintf@fp^0,c
  1541   00147C  C02E  F02A         	movff	sprintf@fmt,vfprintf@fmt
  1542   001480  0E35               	movlw	low sprintf@ap
  1543   001482  6E2B               	movwf	vfprintf@ap^0,c
  1544   001484  ECA0  F009         	call	_vfprintf	;wreg free
  1545   001488  502D               	movf	sprintf@s^0,w,c
  1546   00148A  2438               	addwf	(sprintf@f+2)^0,w,c
  1547   00148C  6ED9               	movwf	fsr2l,c
  1548   00148E  6ADA               	clrf	fsr2h,c
  1549   001490  6ADF               	clrf	indf2,c
  1550   001492  0012               	return		;funcret
  1551   001494                     __end_of_sprintf:
  1552                           	callstack 0
  1553                           
  1554 ;; *************** function _vfprintf *****************
  1555 ;; Defined at:
  1556 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c"
  1557 ;; Parameters:    Size  Location     Type
  1558 ;;  fp              1   40[COMRAM] PTR struct _IO_FILE
  1559 ;;		 -> sprintf@f(11), 
  1560 ;;  fmt             1   41[COMRAM] PTR const unsigned char 
  1561 ;;		 -> STR_3(21), STR_2(23), 
  1562 ;;  ap              1   42[COMRAM] PTR PTR void 
  1563 ;;		 -> sprintf@ap(1), 
  1564 ;; Auto vars:     Size  Location     Type
  1565 ;;  cfmt            1   43[COMRAM] PTR unsigned char 
  1566 ;;		 -> STR_3(21), STR_2(23), 
  1567 ;; Return value:  Size  Location     Type
  1568 ;;                  2   40[COMRAM] int 
  1569 ;; Registers used:
  1570 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1571 ;; Tracked objects:
  1572 ;;		On entry : 0/0
  1573 ;;		On exit  : 0/0
  1574 ;;		Unchanged: 0/0
  1575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1576 ;;      Params:         3       0       0       0       0       0       0       0       0
  1577 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1578 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1579 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1580 ;;Total ram usage:        4 bytes
  1581 ;; Hardware stack levels used: 1
  1582 ;; Hardware stack levels required when called: 6
  1583 ;; This function calls:
  1584 ;;		_vfpfcnvrt
  1585 ;; This function is called by:
  1586 ;;		_sprintf
  1587 ;; This function uses a non-reentrant model
  1588 ;;
  1589                           
  1590                           	psect	text2
  1591   001340                     __ptext2:
  1592                           	callstack 0
  1593   001340                     _vfprintf:
  1594                           	callstack 23
  1595   001340                     
  1596                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v3.00\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
  1597   001340  C02A  F02C         	movff	vfprintf@fmt,vfprintf@cfmt
  1598                           
  1599                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  1600   001344  EFAC  F009         	goto	l1714
  1601   001348                     l1712:
  1602                           
  1603                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1830:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  1604   001348  C029  F020         	movff	vfprintf@fp,vfpfcnvrt@fp
  1605   00134C  0E2C               	movlw	low vfprintf@cfmt
  1606   00134E  6E21               	movwf	vfpfcnvrt@fmt^0,c
  1607   001350  C02B  F022         	movff	vfprintf@ap,vfpfcnvrt@ap
  1608   001354  ECD2  F004         	call	_vfpfcnvrt	;wreg free
  1609   001358                     l1714:
  1610                           
  1611                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  1612   001358  C02C  FFF6         	movff	vfprintf@cfmt,tblptrl
  1613   00135C                     	if	1	;There is more than 1 active tblptr byte
  1614   00135C  0E08               	movlw	high __smallconst
  1615   00135E  6EF7               	movwf	tblptrh,c
  1616   001360                     	endif
  1617   001360                     	if	0	;tblptru may be non-zero
  1618   001360                     	endif
  1619   001360                     	if	0	;tblptru may be non-zero
  1620   001360                     	endif
  1621   001360  0008               	tblrd		*
  1622   001362  50F5               	movf	tablat,w,c
  1623   001364  0900               	iorlw	0
  1624   001366  A4D8               	btfss	status,2,c
  1625   001368  EFB8  F009         	goto	u1011
  1626   00136C  EFBA  F009         	goto	u1010
  1627   001370                     u1011:
  1628   001370  EFA4  F009         	goto	l1712
  1629   001374                     u1010:
  1630   001374                     
  1631                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1835:  return 0;
  1632   001374  0E00               	movlw	0
  1633   001376  6E2A               	movwf	(?_vfprintf+1)^0,c
  1634   001378  0E00               	movlw	0
  1635   00137A  6E29               	movwf	?_vfprintf^0,c
  1636   00137C  0012               	return		;funcret
  1637   00137E                     __end_of_vfprintf:
  1638                           	callstack 0
  1639                           
  1640 ;; *************** function _vfpfcnvrt *****************
  1641 ;; Defined at:
  1642 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c"
  1643 ;; Parameters:    Size  Location     Type
  1644 ;;  fp              1   31[COMRAM] PTR struct _IO_FILE
  1645 ;;		 -> sprintf@f(11), 
  1646 ;;  fmt             1   32[COMRAM] PTR PTR unsigned char 
  1647 ;;		 -> vfprintf@cfmt(1), 
  1648 ;;  ap              1   33[COMRAM] PTR PTR void 
  1649 ;;		 -> sprintf@ap(1), 
  1650 ;; Auto vars:     Size  Location     Type
  1651 ;;  convarg         4   34[COMRAM] struct .
  1652 ;;  cp              1   39[COMRAM] PTR unsigned char 
  1653 ;;		 -> STR_3(21), STR_2(23), 
  1654 ;;  done            1   38[COMRAM] _Bool 
  1655 ;;  c               1    0        unsigned char 
  1656 ;; Return value:  Size  Location     Type
  1657 ;;                  1    wreg      void 
  1658 ;; Registers used:
  1659 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1660 ;; Tracked objects:
  1661 ;;		On entry : 0/0
  1662 ;;		On exit  : 0/0
  1663 ;;		Unchanged: 0/0
  1664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1665 ;;      Params:         3       0       0       0       0       0       0       0       0
  1666 ;;      Locals:         6       0       0       0       0       0       0       0       0
  1667 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1668 ;;      Totals:         9       0       0       0       0       0       0       0       0
  1669 ;;Total ram usage:        9 bytes
  1670 ;; Hardware stack levels used: 1
  1671 ;; Hardware stack levels required when called: 5
  1672 ;; This function calls:
  1673 ;;		_dtoa
  1674 ;;		_fputc
  1675 ;;		_read_prec_or_width
  1676 ;; This function is called by:
  1677 ;;		_vfprintf
  1678 ;; This function uses a non-reentrant model
  1679 ;;
  1680                           
  1681                           	psect	text3
  1682   0009A4                     __ptext3:
  1683                           	callstack 0
  1684   0009A4                     _vfpfcnvrt:
  1685                           	callstack 23
  1686   0009A4                     
  1687                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\co
      +                          mmon\doprnt.c: 1201:     if ((*fmt)[0] == '%') {
  1688   0009A4  5021               	movf	vfpfcnvrt@fmt^0,w,c
  1689   0009A6  6ED9               	movwf	fsr2l,c
  1690   0009A8  6ADA               	clrf	fsr2h,c
  1691   0009AA  CFDF FFF6          	movff	indf2,tblptrl
  1692   0009AE                     	if	1	;There is more than 1 active tblptr byte
  1693   0009AE  0E08               	movlw	high __smallconst
  1694   0009B0  6EF7               	movwf	tblptrh,c
  1695   0009B2                     	endif
  1696   0009B2                     	if	0	;tblptru may be non-zero
  1697   0009B2                     	endif
  1698   0009B2                     	if	0	;tblptru may be non-zero
  1699   0009B2                     	endif
  1700   0009B2  0008               	tblrd		*
  1701   0009B4  50F5               	movf	tablat,w,c
  1702   0009B6  0A25               	xorlw	37
  1703   0009B8  A4D8               	btfss	status,2,c
  1704   0009BA  EFE1  F004         	goto	u881
  1705   0009BE  EFE3  F004         	goto	u880
  1706   0009C2                     u881:
  1707   0009C2  EF6C  F005         	goto	l1648
  1708   0009C6                     u880:
  1709   0009C6                     
  1710                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
  1711   0009C6  5021               	movf	vfpfcnvrt@fmt^0,w,c
  1712   0009C8  6ED9               	movwf	fsr2l,c
  1713   0009CA  6ADA               	clrf	fsr2h,c
  1714   0009CC  2ADF               	incf	indf2,f,c
  1715   0009CE                     
  1716                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
  1717   0009CE  0E00               	movlw	0
  1718   0009D0  6E5B               	movwf	(_width+1)^0,c
  1719   0009D2  0E00               	movlw	0
  1720   0009D4  6E5A               	movwf	_width^0,c
  1721   0009D6  C05A  F05E         	movff	_width,_flags
  1722   0009DA                     
  1723                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
  1724   0009DA  685C               	setf	_prec^0,c
  1725   0009DC  685D               	setf	(_prec+1)^0,c
  1726   0009DE                     
  1727                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1209:         don
      +                          e = 0;
  1728   0009DE  6A27               	clrf	vfpfcnvrt@done^0,c
  1729                           
  1730                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  1731   0009E0  EF0C  F005         	goto	l1622
  1732   0009E4                     l1612:
  1733                           
  1734                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1220:            
      +                                   flags |= (1 << 1);
  1735   0009E4  825E               	bsf	_flags^0,1,c
  1736   0009E6                     
  1737                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1221:            
      +                                   ++*fmt;
  1738   0009E6  5021               	movf	vfpfcnvrt@fmt^0,w,c
  1739   0009E8  6ED9               	movwf	fsr2l,c
  1740   0009EA  6ADA               	clrf	fsr2h,c
  1741   0009EC  2ADF               	incf	indf2,f,c
  1742                           
  1743                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1222:            
      +                                   break;
  1744   0009EE  EF0C  F005         	goto	l1622
  1745   0009F2                     l1616:
  1746                           
  1747                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1243:            
      +                                   done = 1;
  1748   0009F2  0E01               	movlw	1
  1749   0009F4  6E27               	movwf	vfpfcnvrt@done^0,c
  1750                           
  1751                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1244:            
      +                                   break;
  1752   0009F6  EF0C  F005         	goto	l1622
  1753   0009FA                     l1620:
  1754   0009FA  5021               	movf	vfpfcnvrt@fmt^0,w,c
  1755   0009FC  6ED9               	movwf	fsr2l,c
  1756   0009FE  6ADA               	clrf	fsr2h,c
  1757   000A00  CFDF FFF6          	movff	indf2,tblptrl
  1758   000A04                     	if	1	;There is more than 1 active tblptr byte
  1759   000A04  0E08               	movlw	high __smallconst
  1760   000A06  6EF7               	movwf	tblptrh,c
  1761   000A08                     	endif
  1762   000A08                     	if	0	;tblptru may be non-zero
  1763   000A08                     	endif
  1764   000A08                     	if	0	;tblptru may be non-zero
  1765   000A08                     	endif
  1766   000A08  0008               	tblrd		*
  1767   000A0A  50F5               	movf	tablat,w,c
  1768                           
  1769                           ; Switch size 1, requested type "simple"
  1770                           ; Number of cases is 1, Range of values is 48 to 48
  1771                           ; switch strategies available:
  1772                           ; Name         Instructions Cycles
  1773                           ; simple_byte            4     3 (average)
  1774                           ;	Chosen strategy is simple_byte
  1775   000A0C  0A30               	xorlw	48	; case 48
  1776   000A0E  B4D8               	btfsc	status,2,c
  1777   000A10  EFF2  F004         	goto	l1612
  1778   000A14  EFF9  F004         	goto	l1616
  1779   000A18                     l1622:
  1780                           
  1781                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  1782   000A18  5027               	movf	vfpfcnvrt@done^0,w,c
  1783   000A1A  B4D8               	btfsc	status,2,c
  1784   000A1C  EF12  F005         	goto	u891
  1785   000A20  EF14  F005         	goto	u890
  1786   000A24                     u891:
  1787   000A24  EFFD  F004         	goto	l1620
  1788   000A28                     u890:
  1789   000A28                     
  1790                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1256:   width = r
      +                          ead_prec_or_width(fmt, ap);
  1791   000A28  C021  F001         	movff	vfpfcnvrt@fmt,read_prec_or_width@fmt
  1792   000A2C  C022  F002         	movff	vfpfcnvrt@ap,read_prec_or_width@ap
  1793   000A30  EC75  F007         	call	_read_prec_or_width	;wreg free
  1794   000A34  C001  F05A         	movff	?_read_prec_or_width,_width
  1795   000A38  C002  F05B         	movff	?_read_prec_or_width+1,_width+1
  1796   000A3C                     
  1797                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1257:   if (width
      +                           < 0) {
  1798   000A3C  BE5B               	btfsc	(_width+1)^0,7,c
  1799   000A3E  EF25  F005         	goto	u900
  1800   000A42  EF23  F005         	goto	u901
  1801   000A46                     u901:
  1802   000A46  EF2A  F005         	goto	l1630
  1803   000A4A                     u900:
  1804   000A4A                     
  1805                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1258:    flags |=
      +                           (1 << 0);
  1806   000A4A  805E               	bsf	_flags^0,0,c
  1807                           
  1808                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1259:    width = 
      +                          -width;
  1809   000A4C  6C5A               	negf	_width^0,c
  1810   000A4E  1E5B               	comf	(_width+1)^0,f,c
  1811   000A50  B0D8               	btfsc	status,0,c
  1812   000A52  2A5B               	incf	(_width+1)^0,f,c
  1813   000A54                     l1630:
  1814                           
  1815                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1291:   cp = *fmt
      +                          ;
  1816   000A54  5021               	movf	vfpfcnvrt@fmt^0,w,c
  1817   000A56  6ED9               	movwf	fsr2l,c
  1818   000A58  6ADA               	clrf	fsr2h,c
  1819   000A5A  50DF               	movf	indf2,w,c
  1820   000A5C  6E28               	movwf	vfpfcnvrt@cp^0,c
  1821   000A5E                     
  1822                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1361:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  1823   000A5E  C028  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1824   000A62                     	if	1	;There is more than 1 active tblptr byte
  1825   000A62  0E08               	movlw	high __smallconst
  1826   000A64  6EF7               	movwf	tblptrh,c
  1827   000A66                     	endif
  1828   000A66                     	if	0	;tblptru may be non-zero
  1829   000A66                     	endif
  1830   000A66                     	if	0	;tblptru may be non-zero
  1831   000A66                     	endif
  1832   000A66  0008               	tblrd		*
  1833   000A68  50F5               	movf	tablat,w,c
  1834   000A6A  0A64               	xorlw	100
  1835   000A6C  B4D8               	btfsc	status,2,c
  1836   000A6E  EF3B  F005         	goto	u911
  1837   000A72  EF3D  F005         	goto	u910
  1838   000A76                     u911:
  1839   000A76  EF4B  F005         	goto	l1636
  1840   000A7A                     u910:
  1841   000A7A  C028  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1842   000A7E                     	if	1	;There is more than 1 active tblptr byte
  1843   000A7E  0E08               	movlw	high __smallconst
  1844   000A80  6EF7               	movwf	tblptrh,c
  1845   000A82                     	endif
  1846   000A82                     	if	0	;tblptru may be non-zero
  1847   000A82                     	endif
  1848   000A82                     	if	0	;tblptru may be non-zero
  1849   000A82                     	endif
  1850   000A82  0008               	tblrd		*
  1851   000A84  50F5               	movf	tablat,w,c
  1852   000A86  0A69               	xorlw	105
  1853   000A88  A4D8               	btfss	status,2,c
  1854   000A8A  EF49  F005         	goto	u921
  1855   000A8E  EF4B  F005         	goto	u920
  1856   000A92                     u921:
  1857   000A92  EF66  F005         	goto	l1644
  1858   000A96                     u920:
  1859   000A96                     l1636:
  1860                           
  1861                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1404:    convarg.
      +                          sint = (vfpf_sint_t)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  1862   000A96  5022               	movf	vfpfcnvrt@ap^0,w,c
  1863   000A98  6ED9               	movwf	fsr2l,c
  1864   000A9A  6ADA               	clrf	fsr2h,c
  1865   000A9C  0E02               	movlw	2
  1866   000A9E  26DF               	addwf	indf2,f,c
  1867   000AA0  5CDF               	subwf	indf2,w,c
  1868   000AA2  6ED9               	movwf	fsr2l,c
  1869   000AA4  6ADA               	clrf	fsr2h,c
  1870   000AA6  CFDE F023          	movff	postinc2,vfpfcnvrt@convarg
  1871   000AAA  CFDE F024          	movff	postinc2,vfpfcnvrt@convarg+1
  1872   000AAE                     
  1873                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1406:    *fmt = c
      +                          p+1;
  1874   000AAE  5021               	movf	vfpfcnvrt@fmt^0,w,c
  1875   000AB0  6ED9               	movwf	fsr2l,c
  1876   000AB2  6ADA               	clrf	fsr2h,c
  1877   000AB4  2828               	incf	vfpfcnvrt@cp^0,w,c
  1878   000AB6  6EDF               	movwf	indf2,c
  1879   000AB8                     
  1880                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1432:    return (
      +                          void) dtoa(fp, convarg.sint);;	Return value of _vfpfcnvrt is never used
  1881   000AB8  C020  F015         	movff	vfpfcnvrt@fp,dtoa@fp
  1882   000ABC  C023  F016         	movff	vfpfcnvrt@convarg,dtoa@d
  1883   000AC0  C024  F017         	movff	vfpfcnvrt@convarg+1,dtoa@d+1
  1884   000AC4  EC20  F004         	call	_dtoa	;wreg free
  1885   000AC8  EF7D  F005         	goto	l890
  1886   000ACC                     l1644:
  1887                           
  1888                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
  1889   000ACC  5021               	movf	vfpfcnvrt@fmt^0,w,c
  1890   000ACE  6ED9               	movwf	fsr2l,c
  1891   000AD0  6ADA               	clrf	fsr2h,c
  1892   000AD2  2ADF               	incf	indf2,f,c
  1893   000AD4  EF7D  F005         	goto	l890
  1894   000AD8                     l1648:
  1895                           
  1896                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
  1897   000AD8  5021               	movf	vfpfcnvrt@fmt^0,w,c
  1898   000ADA  6ED9               	movwf	fsr2l,c
  1899   000ADC  6ADA               	clrf	fsr2h,c
  1900   000ADE  CFDF FFF6          	movff	indf2,tblptrl
  1901   000AE2                     	if	1	;There is more than 1 active tblptr byte
  1902   000AE2  0E08               	movlw	high __smallconst
  1903   000AE4  6EF7               	movwf	tblptrh,c
  1904   000AE6                     	endif
  1905   000AE6                     	if	0	;tblptru may be non-zero
  1906   000AE6                     	endif
  1907   000AE6                     	if	0	;tblptru may be non-zero
  1908   000AE6                     	endif
  1909   000AE6  0008               	tblrd		*
  1910   000AE8  50F5               	movf	tablat,w,c
  1911   000AEA  6E01               	movwf	fputc@c^0,c
  1912   000AEC  6A02               	clrf	(fputc@c+1)^0,c
  1913   000AEE  C020  F003         	movff	vfpfcnvrt@fp,fputc@fp
  1914   000AF2  EC20  F007         	call	_fputc	;wreg free
  1915   000AF6  EF66  F005         	goto	l1644
  1916   000AFA                     l890:
  1917   000AFA  0012               	return		;funcret
  1918   000AFC                     __end_of_vfpfcnvrt:
  1919                           	callstack 0
  1920                           
  1921 ;; *************** function _read_prec_or_width *****************
  1922 ;; Defined at:
  1923 ;;		line 1158 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c"
  1924 ;; Parameters:    Size  Location     Type
  1925 ;;  fmt             1    0[COMRAM] PTR PTR const unsigned c
  1926 ;;		 -> vfprintf@cfmt(1), 
  1927 ;;  ap              1    1[COMRAM] PTR PTR void [1]
  1928 ;;		 -> sprintf@ap(1), 
  1929 ;; Auto vars:     Size  Location     Type
  1930 ;;  c               1    4[COMRAM] unsigned char 
  1931 ;;  n               2    5[COMRAM] int 
  1932 ;; Return value:  Size  Location     Type
  1933 ;;                  2    0[COMRAM] int 
  1934 ;; Registers used:
  1935 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  1936 ;; Tracked objects:
  1937 ;;		On entry : 0/0
  1938 ;;		On exit  : 0/0
  1939 ;;		Unchanged: 0/0
  1940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1941 ;;      Params:         2       0       0       0       0       0       0       0       0
  1942 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1943 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1944 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1945 ;;Total ram usage:        7 bytes
  1946 ;; Hardware stack levels used: 1
  1947 ;; This function calls:
  1948 ;;		Nothing
  1949 ;; This function is called by:
  1950 ;;		_vfpfcnvrt
  1951 ;; This function uses a non-reentrant model
  1952 ;;
  1953                           
  1954                           	psect	text4
  1955   000EEA                     __ptext4:
  1956                           	callstack 0
  1957   000EEA                     _read_prec_or_width:
  1958                           	callstack 27
  1959   000EEA                     
  1960                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1159:     int n =
      +                           0;
  1961   000EEA  0E00               	movlw	0
  1962   000EEC  6E07               	movwf	(read_prec_or_width@n+1)^0,c
  1963   000EEE  0E00               	movlw	0
  1964   000EF0  6E06               	movwf	read_prec_or_width@n^0,c
  1965   000EF2                     
  1966                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1160:     if ((*f
      +                          mt)[0] == '*') {
  1967   000EF2  5001               	movf	read_prec_or_width@fmt^0,w,c
  1968   000EF4  6ED9               	movwf	fsr2l,c
  1969   000EF6  6ADA               	clrf	fsr2h,c
  1970   000EF8  CFDF FFF6          	movff	indf2,tblptrl
  1971   000EFC                     	if	1	;There is more than 1 active tblptr byte
  1972   000EFC  0E08               	movlw	high __smallconst
  1973   000EFE  6EF7               	movwf	tblptrh,c
  1974   000F00                     	endif
  1975   000F00                     	if	0	;tblptru may be non-zero
  1976   000F00                     	endif
  1977   000F00                     	if	0	;tblptru may be non-zero
  1978   000F00                     	endif
  1979   000F00  0008               	tblrd		*
  1980   000F02  50F5               	movf	tablat,w,c
  1981   000F04  0A2A               	xorlw	42
  1982   000F06  A4D8               	btfss	status,2,c
  1983   000F08  EF88  F007         	goto	u861
  1984   000F0C  EF8A  F007         	goto	u860
  1985   000F10                     u861:
  1986   000F10  EFAF  F007         	goto	l1600
  1987   000F14                     u860:
  1988   000F14                     
  1989                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1161:         ++*
      +                          fmt;
  1990   000F14  5001               	movf	read_prec_or_width@fmt^0,w,c
  1991   000F16  6ED9               	movwf	fsr2l,c
  1992   000F18  6ADA               	clrf	fsr2h,c
  1993   000F1A  2ADF               	incf	indf2,f,c
  1994   000F1C                     
  1995                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1162:         n =
      +                           (*(int *)__va_arg(*(int **)*ap, (int)0));
  1996   000F1C  5002               	movf	read_prec_or_width@ap^0,w,c
  1997   000F1E  6ED9               	movwf	fsr2l,c
  1998   000F20  6ADA               	clrf	fsr2h,c
  1999   000F22  0E02               	movlw	2
  2000   000F24  26DF               	addwf	indf2,f,c
  2001   000F26  5CDF               	subwf	indf2,w,c
  2002   000F28  6ED9               	movwf	fsr2l,c
  2003   000F2A  6ADA               	clrf	fsr2h,c
  2004   000F2C  CFDE F006          	movff	postinc2,read_prec_or_width@n
  2005   000F30  CFDE F007          	movff	postinc2,read_prec_or_width@n+1
  2006                           
  2007                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1163:     } else 
      +                          {
  2008   000F34  EFC2  F007         	goto	l871
  2009   000F38                     l1596:
  2010                           
  2011                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1166:            
      +                           n = n * 10 + c;
  2012   000F38  0E0A               	movlw	10
  2013   000F3A  0206               	mulwf	read_prec_or_width@n^0,c
  2014   000F3C  CFF3 F003          	movff	prodl,??_read_prec_or_width
  2015   000F40  CFF4 F004          	movff	prodh,??_read_prec_or_width+1
  2016   000F44  0207               	mulwf	(read_prec_or_width@n+1)^0,c
  2017   000F46  50F3               	movf	prodl,w,c
  2018   000F48  2604               	addwf	(??_read_prec_or_width+1)^0,f,c
  2019   000F4A  5005               	movf	read_prec_or_width@c^0,w,c
  2020   000F4C  2403               	addwf	??_read_prec_or_width^0,w,c
  2021   000F4E  6E06               	movwf	read_prec_or_width@n^0,c
  2022   000F50  0E00               	movlw	0
  2023   000F52  2004               	addwfc	(??_read_prec_or_width+1)^0,w,c
  2024   000F54  6E07               	movwf	(read_prec_or_width@n+1)^0,c
  2025   000F56                     
  2026                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1167:            
      +                           ++*fmt;
  2027   000F56  5001               	movf	read_prec_or_width@fmt^0,w,c
  2028   000F58  6ED9               	movwf	fsr2l,c
  2029   000F5A  6ADA               	clrf	fsr2h,c
  2030   000F5C  2ADF               	incf	indf2,f,c
  2031   000F5E                     l1600:
  2032                           
  2033                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1165:         whi
      +                          le ((c = ((unsigned)(*fmt)[0]) - '0') < 10) {
  2034   000F5E  5001               	movf	read_prec_or_width@fmt^0,w,c
  2035   000F60  6ED9               	movwf	fsr2l,c
  2036   000F62  6ADA               	clrf	fsr2h,c
  2037   000F64  CFDF FFF6          	movff	indf2,tblptrl
  2038   000F68                     	if	1	;There is more than 1 active tblptr byte
  2039   000F68  0E08               	movlw	high __smallconst
  2040   000F6A  6EF7               	movwf	tblptrh,c
  2041   000F6C                     	endif
  2042   000F6C                     	if	0	;tblptru may be non-zero
  2043   000F6C                     	endif
  2044   000F6C                     	if	0	;tblptru may be non-zero
  2045   000F6C                     	endif
  2046   000F6C  0008               	tblrd		*
  2047   000F6E  50F5               	movf	tablat,w,c
  2048   000F70  0FD0               	addlw	208
  2049   000F72  6E05               	movwf	read_prec_or_width@c^0,c
  2050   000F74  0E09               	movlw	9
  2051   000F76  6405               	cpfsgt	read_prec_or_width@c^0,c
  2052   000F78  EFC0  F007         	goto	u871
  2053   000F7C  EFC2  F007         	goto	u870
  2054   000F80                     u871:
  2055   000F80  EF9C  F007         	goto	l1596
  2056   000F84                     u870:
  2057   000F84                     l871:
  2058                           
  2059                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1170:     return 
      +                          n;
  2060   000F84  C006  F001         	movff	read_prec_or_width@n,?_read_prec_or_width
  2061   000F88  C007  F002         	movff	read_prec_or_width@n+1,?_read_prec_or_width+1
  2062   000F8C  0012               	return		;funcret
  2063   000F8E                     __end_of_read_prec_or_width:
  2064                           	callstack 0
  2065                           
  2066 ;; *************** function _dtoa *****************
  2067 ;; Defined at:
  2068 ;;		line 513 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c"
  2069 ;; Parameters:    Size  Location     Type
  2070 ;;  fp              1   20[COMRAM] PTR struct _IO_FILE
  2071 ;;		 -> sprintf@f(11), 
  2072 ;;  d               2   21[COMRAM] int 
  2073 ;; Auto vars:     Size  Location     Type
  2074 ;;  i               2   29[COMRAM] int 
  2075 ;;  w               2   26[COMRAM] int 
  2076 ;;  s               1   28[COMRAM] unsigned char 
  2077 ;;  p               1   25[COMRAM] _Bool 
  2078 ;; Return value:  Size  Location     Type
  2079 ;;                  1    wreg      void 
  2080 ;; Registers used:
  2081 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2082 ;; Tracked objects:
  2083 ;;		On entry : 0/0
  2084 ;;		On exit  : 0/0
  2085 ;;		Unchanged: 0/0
  2086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2087 ;;      Params:         3       0       0       0       0       0       0       0       0
  2088 ;;      Locals:         8       0       0       0       0       0       0       0       0
  2089 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2090 ;;      Totals:        11       0       0       0       0       0       0       0       0
  2091 ;;Total ram usage:       11 bytes
  2092 ;; Hardware stack levels used: 1
  2093 ;; Hardware stack levels required when called: 4
  2094 ;; This function calls:
  2095 ;;		___awdiv
  2096 ;;		___awmod
  2097 ;;		_abs
  2098 ;;		_pad
  2099 ;; This function is called by:
  2100 ;;		_vfpfcnvrt
  2101 ;; This function uses a non-reentrant model
  2102 ;;
  2103                           
  2104                           	psect	text5
  2105   000840                     __ptext5:
  2106                           	callstack 0
  2107   000840                     _dtoa:
  2108                           	callstack 23
  2109   000840                     
  2110                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 513: static void 
      +                          dtoa(FILE *fp, vfpf_sint_t d);C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\commo
      +                          n\doprnt.c: 514: {;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c:
      +                           515:  char s;;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 516
      +                          :     int i, w;;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 52
      +                          0:  _Bool p = 1;
  2111   000840  0E01               	movlw	1
  2112   000842  6E1A               	movwf	dtoa@p^0,c
  2113   000844                     
  2114                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 524:     s = d < 
      +                          0 ? 1 : 0;
  2115   000844  BE17               	btfsc	(dtoa@d+1)^0,7,c
  2116   000846  EF27  F004         	goto	u761
  2117   00084A  EF2A  F004         	goto	u760
  2118   00084E                     u761:
  2119   00084E  0E01               	movlw	1
  2120   000850  EF2B  F004         	goto	u770
  2121   000854                     u760:
  2122   000854  0E00               	movlw	0
  2123   000856                     u770:
  2124   000856  6E1D               	movwf	dtoa@s^0,c
  2125   000858                     
  2126                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 535:     w = widt
      +                          h;
  2127   000858  C05A  F01B         	movff	_width,dtoa@w
  2128   00085C  C05B  F01C         	movff	_width+1,dtoa@w+1
  2129   000860                     
  2130                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 536:     if (s
  2131   000860  501D               	movf	dtoa@s^0,w,c
  2132   000862  B4D8               	btfsc	status,2,c
  2133   000864  EF36  F004         	goto	u781
  2134   000868  EF38  F004         	goto	u780
  2135   00086C                     u781:
  2136   00086C  EF4F  F004         	goto	l854
  2137   000870                     u780:
  2138   000870                     
  2139                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 540:     ) {;C:\P
      +                          rogram Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 541:         --w;
  2140   000870  061B               	decf	dtoa@w^0,f,c
  2141   000872  A0D8               	btfss	status,0,c
  2142   000874  061C               	decf	(dtoa@w+1)^0,f,c
  2143   000876                     
  2144                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 542:   s = s ? '-
      +                          ' : '+';
  2145   000876  501D               	movf	dtoa@s^0,w,c
  2146   000878  A4D8               	btfss	status,2,c
  2147   00087A  EF41  F004         	goto	u791
  2148   00087E  EF43  F004         	goto	u790
  2149   000882                     u791:
  2150   000882  EF49  F004         	goto	l1552
  2151   000886                     u790:
  2152   000886  0E00               	movlw	0
  2153   000888  6E19               	movwf	(_dtoa$729+1)^0,c
  2154   00088A  0E2B               	movlw	43
  2155   00088C  6E18               	movwf	_dtoa$729^0,c
  2156   00088E  EF4D  F004         	goto	l1554
  2157   000892                     l1552:
  2158   000892  0E00               	movlw	0
  2159   000894  6E19               	movwf	(_dtoa$729+1)^0,c
  2160   000896  0E2D               	movlw	45
  2161   000898  6E18               	movwf	_dtoa$729^0,c
  2162   00089A                     l1554:
  2163   00089A  C018  F01D         	movff	_dtoa$729,dtoa@s
  2164   00089E                     l854:
  2165                           
  2166                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 552:     i = size
      +                          of(dbuf) - 1;
  2167   00089E  0E00               	movlw	0
  2168   0008A0  6E1F               	movwf	(dtoa@i+1)^0,c
  2169   0008A2  0E1F               	movlw	31
  2170   0008A4  6E1E               	movwf	dtoa@i^0,c
  2171   0008A6                     
  2172                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 553:     dbuf[i] 
      +                          = '\0';
  2173   0008A6  0100               	movlb	0	; () banked
  2174   0008A8  6B7F               	clrf	(_dbuf+31)& (0+255),b
  2175                           
  2176                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 554:     while (!
      +                          (i < 1) && (d != 0
  2177   0008AA  EF83  F004         	goto	l1568
  2178   0008AE                     l1558:
  2179                           
  2180                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 563:     )) {;C:\
      +                          Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 564:         --i;
  2181   0008AE  061E               	decf	dtoa@i^0,f,c
  2182   0008B0  A0D8               	btfss	status,0,c
  2183   0008B2  061F               	decf	(dtoa@i+1)^0,f,c
  2184   0008B4                     
  2185                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 565:         dbuf
      +                          [i] = (char)((int)'0' + abs(d % 10));
  2186   0008B4  501E               	movf	dtoa@i^0,w,c
  2187   0008B6  0F60               	addlw	low _dbuf
  2188   0008B8  6ED9               	movwf	fsr2l,c
  2189   0008BA  6ADA               	clrf	fsr2h,c
  2190   0008BC  C016  F001         	movff	dtoa@d,___awmod@dividend
  2191   0008C0  C017  F002         	movff	dtoa@d+1,___awmod@dividend+1
  2192   0008C4  0E00               	movlw	0
  2193   0008C6  6E04               	movwf	(___awmod@divisor+1)^0,c
  2194   0008C8  0E0A               	movlw	10
  2195   0008CA  6E03               	movwf	___awmod@divisor^0,c
  2196   0008CC  ECC9  F006         	call	___awmod	;wreg free
  2197   0008D0  C001  F007         	movff	?___awmod,abs@a
  2198   0008D4  C002  F008         	movff	?___awmod+1,abs@a+1
  2199   0008D8  EC4A  F00A         	call	_abs	;wreg free
  2200   0008DC  5007               	movf	?_abs^0,w,c
  2201   0008DE  0F30               	addlw	48
  2202   0008E0  6EDF               	movwf	indf2,c
  2203   0008E2                     
  2204                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 569:   p = 0;
  2205   0008E2  6A1A               	clrf	dtoa@p^0,c
  2206   0008E4                     
  2207                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 571:         --w;
  2208   0008E4  061B               	decf	dtoa@w^0,f,c
  2209   0008E6  A0D8               	btfss	status,0,c
  2210   0008E8  061C               	decf	(dtoa@w+1)^0,f,c
  2211   0008EA                     
  2212                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 572:         d = 
      +                          d / 10;
  2213   0008EA  C016  F001         	movff	dtoa@d,___awdiv@dividend
  2214   0008EE  C017  F002         	movff	dtoa@d+1,___awdiv@dividend+1
  2215   0008F2  0E00               	movlw	0
  2216   0008F4  6E04               	movwf	(___awdiv@divisor+1)^0,c
  2217   0008F6  0E0A               	movlw	10
  2218   0008F8  6E03               	movwf	___awdiv@divisor^0,c
  2219   0008FA  EC68  F006         	call	___awdiv	;wreg free
  2220   0008FE  C001  F016         	movff	?___awdiv,dtoa@d
  2221   000902  C002  F017         	movff	?___awdiv+1,dtoa@d+1
  2222   000906                     l1568:
  2223                           
  2224                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 554:     while (!
      +                          (i < 1) && (d != 0
  2225   000906  BE1F               	btfsc	(dtoa@i+1)^0,7,c
  2226   000908  EF8E  F004         	goto	u801
  2227   00090C  501F               	movf	(dtoa@i+1)^0,w,c
  2228   00090E  E108               	bnz	u800
  2229   000910  041E               	decf	dtoa@i^0,w,c
  2230   000912  A0D8               	btfss	status,0,c
  2231   000914  EF8E  F004         	goto	u801
  2232   000918  EF90  F004         	goto	u800
  2233   00091C                     u801:
  2234   00091C  EFB5  F004         	goto	l1578
  2235   000920                     u800:
  2236   000920  5016               	movf	dtoa@d^0,w,c
  2237   000922  1017               	iorwf	(dtoa@d+1)^0,w,c
  2238   000924  A4D8               	btfss	status,2,c
  2239   000926  EF97  F004         	goto	u811
  2240   00092A  EF99  F004         	goto	u810
  2241   00092E                     u811:
  2242   00092E  EF57  F004         	goto	l1558
  2243   000932                     u810:
  2244   000932  501A               	movf	dtoa@p^0,w,c
  2245   000934  A4D8               	btfss	status,2,c
  2246   000936  EF9F  F004         	goto	u821
  2247   00093A  EFA1  F004         	goto	u820
  2248   00093E                     u821:
  2249   00093E  EF57  F004         	goto	l1558
  2250   000942                     u820:
  2251   000942  BE1C               	btfsc	(dtoa@w+1)^0,7,c
  2252   000944  EFAC  F004         	goto	u831
  2253   000948  501C               	movf	(dtoa@w+1)^0,w,c
  2254   00094A  E108               	bnz	u830
  2255   00094C  041B               	decf	dtoa@w^0,w,c
  2256   00094E  A0D8               	btfss	status,0,c
  2257   000950  EFAC  F004         	goto	u831
  2258   000954  EFAE  F004         	goto	u830
  2259   000958                     u831:
  2260   000958  EFB5  F004         	goto	l1578
  2261   00095C                     u830:
  2262   00095C  B25E               	btfsc	_flags^0,1,c
  2263   00095E  EFB3  F004         	goto	u841
  2264   000962  EFB5  F004         	goto	u840
  2265   000966                     u841:
  2266   000966  EF57  F004         	goto	l1558
  2267   00096A                     u840:
  2268   00096A                     l1578:
  2269                           
  2270                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 576:     if (s !=
      +                           0) {
  2271   00096A  501D               	movf	dtoa@s^0,w,c
  2272   00096C  B4D8               	btfsc	status,2,c
  2273   00096E  EFBB  F004         	goto	u851
  2274   000972  EFBD  F004         	goto	u850
  2275   000976                     u851:
  2276   000976  EFC6  F004         	goto	l1584
  2277   00097A                     u850:
  2278   00097A                     
  2279                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 577:         --i;
  2280   00097A  061E               	decf	dtoa@i^0,f,c
  2281   00097C  A0D8               	btfss	status,0,c
  2282   00097E  061F               	decf	(dtoa@i+1)^0,f,c
  2283   000980                     
  2284                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 578:         dbuf
      +                          [i] = s;
  2285   000980  501E               	movf	dtoa@i^0,w,c
  2286   000982  0F60               	addlw	low _dbuf
  2287   000984  6ED9               	movwf	fsr2l,c
  2288   000986  6ADA               	clrf	fsr2h,c
  2289   000988  C01D  FFDF         	movff	dtoa@s,indf2
  2290   00098C                     l1584:
  2291                           
  2292                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 582:     return (
      +                          void) pad(fp, &dbuf[i], w);
  2293   00098C  C015  F00E         	movff	dtoa@fp,pad@fp
  2294   000990  501E               	movf	dtoa@i^0,w,c
  2295   000992  0F60               	addlw	low _dbuf
  2296   000994  6E0F               	movwf	pad@buf^0,c
  2297   000996  C01B  F010         	movff	dtoa@w,pad@p
  2298   00099A  C01C  F011         	movff	dtoa@w+1,pad@p+1
  2299   00099E  EC6B  F008         	call	_pad	;wreg free
  2300   0009A2  0012               	return		;funcret
  2301   0009A4                     __end_of_dtoa:
  2302                           	callstack 0
  2303                           
  2304 ;; *************** function _pad *****************
  2305 ;; Defined at:
  2306 ;;		line 193 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c"
  2307 ;; Parameters:    Size  Location     Type
  2308 ;;  fp              1   13[COMRAM] PTR struct _IO_FILE
  2309 ;;		 -> sprintf@f(11), 
  2310 ;;  buf             1   14[COMRAM] PTR unsigned char 
  2311 ;;		 -> dbuf(32), 
  2312 ;;  p               2   15[COMRAM] int 
  2313 ;; Auto vars:     Size  Location     Type
  2314 ;;  i               2   18[COMRAM] int 
  2315 ;; Return value:  Size  Location     Type
  2316 ;;                  1    wreg      void 
  2317 ;; Registers used:
  2318 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2319 ;; Tracked objects:
  2320 ;;		On entry : 0/0
  2321 ;;		On exit  : 0/0
  2322 ;;		Unchanged: 0/0
  2323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2324 ;;      Params:         4       0       0       0       0       0       0       0       0
  2325 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2326 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2327 ;;      Totals:         7       0       0       0       0       0       0       0       0
  2328 ;;Total ram usage:        7 bytes
  2329 ;; Hardware stack levels used: 1
  2330 ;; Hardware stack levels required when called: 3
  2331 ;; This function calls:
  2332 ;;		_fputc
  2333 ;;		_fputs
  2334 ;; This function is called by:
  2335 ;;		_dtoa
  2336 ;; This function uses a non-reentrant model
  2337 ;;
  2338                           
  2339                           	psect	text6
  2340   0010D6                     __ptext6:
  2341                           	callstack 0
  2342   0010D6                     _pad:
  2343                           	callstack 23
  2344   0010D6                     
  2345                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 193: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\com
      +                          mon\doprnt.c: 194: {;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.
      +                          c: 195:     int i;;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c:
      +                           199:     if (flags & (1 << 0)) {
  2346   0010D6  A05E               	btfss	_flags^0,0,c
  2347   0010D8  EF70  F008         	goto	u711
  2348   0010DC  EF72  F008         	goto	u710
  2349   0010E0                     u711:
  2350   0010E0  EF78  F008         	goto	l1522
  2351   0010E4                     u710:
  2352   0010E4                     
  2353                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 200:         fput
      +                          s((const char *)buf, fp);
  2354   0010E4  C00F  F009         	movff	pad@buf,fputs@s
  2355   0010E8  C00E  F00A         	movff	pad@fp,fputs@fp
  2356   0010EC  ECBF  F009         	call	_fputs	;wreg free
  2357   0010F0                     l1522:
  2358                           
  2359                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 205:  if (p < 0) 
      +                          {
  2360   0010F0  BE11               	btfsc	(pad@p+1)^0,7,c
  2361   0010F2  EF7F  F008         	goto	u720
  2362   0010F6  EF7D  F008         	goto	u721
  2363   0010FA                     u721:
  2364   0010FA  EF83  F008         	goto	l846
  2365   0010FE                     u720:
  2366   0010FE                     
  2367                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 206:   p = 0;
  2368   0010FE  0E00               	movlw	0
  2369   001100  6E11               	movwf	(pad@p+1)^0,c
  2370   001102  0E00               	movlw	0
  2371   001104  6E10               	movwf	pad@p^0,c
  2372   001106                     l846:
  2373                           
  2374                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 208:     i = 0;
  2375   001106  0E00               	movlw	0
  2376   001108  6E14               	movwf	(pad@i+1)^0,c
  2377   00110A  0E00               	movlw	0
  2378   00110C  6E13               	movwf	pad@i^0,c
  2379                           
  2380                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
  2381   00110E  EF93  F008         	goto	l1530
  2382   001112                     l1526:
  2383                           
  2384                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 210:         fput
      +                          c(' ', fp);
  2385   001112  0E00               	movlw	0
  2386   001114  6E02               	movwf	(fputc@c+1)^0,c
  2387   001116  0E20               	movlw	32
  2388   001118  6E01               	movwf	fputc@c^0,c
  2389   00111A  C00E  F003         	movff	pad@fp,fputc@fp
  2390   00111E  EC20  F007         	call	_fputc	;wreg free
  2391   001122                     
  2392                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 211:         ++i;
  2393   001122  4A13               	infsnz	pad@i^0,f,c
  2394   001124  2A14               	incf	(pad@i+1)^0,f,c
  2395   001126                     l1530:
  2396                           
  2397                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
  2398   001126  5010               	movf	pad@p^0,w,c
  2399   001128  5C13               	subwf	pad@i^0,w,c
  2400   00112A  5014               	movf	(pad@i+1)^0,w,c
  2401   00112C  0A80               	xorlw	128
  2402   00112E  6E12               	movwf	??_pad^0,c
  2403   001130  5011               	movf	(pad@p+1)^0,w,c
  2404   001132  0A80               	xorlw	128
  2405   001134  5812               	subwfb	??_pad^0,w,c
  2406   001136  A0D8               	btfss	status,0,c
  2407   001138  EFA0  F008         	goto	u731
  2408   00113C  EFA2  F008         	goto	u730
  2409   001140                     u731:
  2410   001140  EF89  F008         	goto	l1526
  2411   001144                     u730:
  2412   001144                     
  2413                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 216:     if (!(fl
      +                          ags & (1 << 0))) {
  2414   001144  B05E               	btfsc	_flags^0,0,c
  2415   001146  EFA7  F008         	goto	u741
  2416   00114A  EFA9  F008         	goto	u740
  2417   00114E                     u741:
  2418   00114E  EFAF  F008         	goto	l851
  2419   001152                     u740:
  2420   001152                     
  2421                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 218:         fput
      +                          s((const char *)buf, fp);
  2422   001152  C00F  F009         	movff	pad@buf,fputs@s
  2423   001156  C00E  F00A         	movff	pad@fp,fputs@fp
  2424   00115A  ECBF  F009         	call	_fputs	;wreg free
  2425   00115E                     l851:
  2426   00115E  0012               	return		;funcret
  2427   001160                     __end_of_pad:
  2428                           	callstack 0
  2429                           
  2430 ;; *************** function _fputs *****************
  2431 ;; Defined at:
  2432 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\nf_fputs.c"
  2433 ;; Parameters:    Size  Location     Type
  2434 ;;  s               1    8[COMRAM] PTR const unsigned char 
  2435 ;;		 -> dbuf(32), 
  2436 ;;  fp              1    9[COMRAM] PTR struct _IO_FILE
  2437 ;;		 -> sprintf@f(11), 
  2438 ;; Auto vars:     Size  Location     Type
  2439 ;;  i               2   11[COMRAM] int 
  2440 ;;  c               1   10[COMRAM] unsigned char 
  2441 ;; Return value:  Size  Location     Type
  2442 ;;                  2    8[COMRAM] int 
  2443 ;; Registers used:
  2444 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2445 ;; Tracked objects:
  2446 ;;		On entry : 0/0
  2447 ;;		On exit  : 0/0
  2448 ;;		Unchanged: 0/0
  2449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2450 ;;      Params:         2       0       0       0       0       0       0       0       0
  2451 ;;      Locals:         3       0       0       0       0       0       0       0       0
  2452 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2453 ;;      Totals:         5       0       0       0       0       0       0       0       0
  2454 ;;Total ram usage:        5 bytes
  2455 ;; Hardware stack levels used: 1
  2456 ;; Hardware stack levels required when called: 2
  2457 ;; This function calls:
  2458 ;;		_fputc
  2459 ;; This function is called by:
  2460 ;;		_pad
  2461 ;; This function uses a non-reentrant model
  2462 ;;
  2463                           
  2464                           	psect	text7
  2465   00137E                     __ptext7:
  2466                           	callstack 0
  2467   00137E                     _fputs:
  2468                           	callstack 23
  2469   00137E  0E00               	movlw	0
  2470   001380  6E0D               	movwf	(fputs@i+1)^0,c
  2471   001382  0E00               	movlw	0
  2472   001384  6E0C               	movwf	fputs@i^0,c
  2473   001386  EFCE  F009         	goto	l1436
  2474   00138A                     l1432:
  2475   00138A  C00B  F001         	movff	fputs@c,fputc@c
  2476   00138E  6A02               	clrf	(fputc@c+1)^0,c
  2477   001390  C00A  F003         	movff	fputs@fp,fputc@fp
  2478   001394  EC20  F007         	call	_fputc	;wreg free
  2479   001398  4A0C               	infsnz	fputs@i^0,f,c
  2480   00139A  2A0D               	incf	(fputs@i+1)^0,f,c
  2481   00139C                     l1436:
  2482   00139C  5009               	movf	fputs@s^0,w,c
  2483   00139E  240C               	addwf	fputs@i^0,w,c
  2484   0013A0  6ED9               	movwf	fsr2l,c
  2485   0013A2  6ADA               	clrf	fsr2h,c
  2486   0013A4  50DF               	movf	indf2,w,c
  2487   0013A6  6E0B               	movwf	fputs@c^0,c
  2488   0013A8  500B               	movf	fputs@c^0,w,c
  2489   0013AA  A4D8               	btfss	status,2,c
  2490   0013AC  EFDA  F009         	goto	u581
  2491   0013B0  EFDC  F009         	goto	u580
  2492   0013B4                     u581:
  2493   0013B4  EFC5  F009         	goto	l1432
  2494   0013B8                     u580:
  2495   0013B8  0012               	return		;funcret
  2496   0013BA                     __end_of_fputs:
  2497                           	callstack 0
  2498                           
  2499 ;; *************** function _fputc *****************
  2500 ;; Defined at:
  2501 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\nf_fputc.c"
  2502 ;; Parameters:    Size  Location     Type
  2503 ;;  c               2    0[COMRAM] int 
  2504 ;;  fp              1    2[COMRAM] PTR struct _IO_FILE
  2505 ;;		 -> sprintf@f(11), 
  2506 ;; Auto vars:     Size  Location     Type
  2507 ;;		None
  2508 ;; Return value:  Size  Location     Type
  2509 ;;                  2    0[COMRAM] int 
  2510 ;; Registers used:
  2511 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2512 ;; Tracked objects:
  2513 ;;		On entry : 0/0
  2514 ;;		On exit  : 0/0
  2515 ;;		Unchanged: 0/0
  2516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2517 ;;      Params:         3       0       0       0       0       0       0       0       0
  2518 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2519 ;;      Temps:          5       0       0       0       0       0       0       0       0
  2520 ;;      Totals:         8       0       0       0       0       0       0       0       0
  2521 ;;Total ram usage:        8 bytes
  2522 ;; Hardware stack levels used: 1
  2523 ;; Hardware stack levels required when called: 1
  2524 ;; This function calls:
  2525 ;;		_putch
  2526 ;; This function is called by:
  2527 ;;		_pad
  2528 ;;		_vfpfcnvrt
  2529 ;;		_fputs
  2530 ;; This function uses a non-reentrant model
  2531 ;;
  2532                           
  2533                           	psect	text8
  2534   000E40                     __ptext8:
  2535                           	callstack 0
  2536   000E40                     _fputc:
  2537                           	callstack 26
  2538   000E40  5003               	movf	fputc@fp^0,w,c
  2539   000E42  B4D8               	btfsc	status,2,c
  2540   000E44  EF26  F007         	goto	u541
  2541   000E48  EF28  F007         	goto	u540
  2542   000E4C                     u541:
  2543   000E4C  EF30  F007         	goto	l1420
  2544   000E50                     u540:
  2545   000E50  5003               	movf	fputc@fp^0,w,c
  2546   000E52  A4D8               	btfss	status,2,c
  2547   000E54  EF2E  F007         	goto	u551
  2548   000E58  EF30  F007         	goto	u550
  2549   000E5C                     u551:
  2550   000E5C  EF35  F007         	goto	l1422
  2551   000E60                     u550:
  2552   000E60                     l1420:
  2553   000E60  5001               	movf	fputc@c^0,w,c
  2554   000E62  ECCA  F00A         	call	_putch
  2555   000E66  EF74  F007         	goto	l915
  2556   000E6A                     l1422:
  2557   000E6A  5003               	movf	fputc@fp^0,w,c
  2558   000E6C  6ED9               	movwf	fsr2l,c
  2559   000E6E  6ADA               	clrf	fsr2h,c
  2560   000E70  0E09               	movlw	9
  2561   000E72  26D9               	addwf	fsr2l,f,c
  2562   000E74  50DE               	movf	postinc2,w,c
  2563   000E76  10DE               	iorwf	postinc2,w,c
  2564   000E78  B4D8               	btfsc	status,2,c
  2565   000E7A  EF41  F007         	goto	u561
  2566   000E7E  EF43  F007         	goto	u560
  2567   000E82                     u561:
  2568   000E82  EF5C  F007         	goto	l1426
  2569   000E86                     u560:
  2570   000E86  5003               	movf	fputc@fp^0,w,c
  2571   000E88  6ED9               	movwf	fsr2l,c
  2572   000E8A  6ADA               	clrf	fsr2h,c
  2573   000E8C  0E09               	movlw	9
  2574   000E8E  26D9               	addwf	fsr2l,f,c
  2575   000E90  5003               	movf	fputc@fp^0,w,c
  2576   000E92  6EE1               	movwf	fsr1l,c
  2577   000E94  6AE2               	clrf	fsr1h,c
  2578   000E96  0E02               	movlw	2
  2579   000E98  26E1               	addwf	fsr1l,f,c
  2580   000E9A  50DE               	movf	postinc2,w,c
  2581   000E9C  5CE6               	subwf	postinc1,w,c
  2582   000E9E  50E6               	movf	postinc1,w,c
  2583   000EA0  0A80               	xorlw	128
  2584   000EA2  6E08               	movwf	(??_fputc+4)^0,c
  2585   000EA4  50DE               	movf	postinc2,w,c
  2586   000EA6  0A80               	xorlw	128
  2587   000EA8  5808               	subwfb	(??_fputc+4)^0,w,c
  2588   000EAA  B0D8               	btfsc	status,0,c
  2589   000EAC  EF5A  F007         	goto	u571
  2590   000EB0  EF5C  F007         	goto	u570
  2591   000EB4                     u571:
  2592   000EB4  EF74  F007         	goto	l915
  2593   000EB8                     u570:
  2594   000EB8                     l1426:
  2595   000EB8  5003               	movf	fputc@fp^0,w,c
  2596   000EBA  6ED9               	movwf	fsr2l,c
  2597   000EBC  6ADA               	clrf	fsr2h,c
  2598   000EBE  0E02               	movlw	2
  2599   000EC0  26D9               	addwf	fsr2l,f,c
  2600   000EC2  50DF               	movf	indf2,w,c
  2601   000EC4  6E04               	movwf	??_fputc^0,c
  2602   000EC6  5003               	movf	fputc@fp^0,w,c
  2603   000EC8  6ED9               	movwf	fsr2l,c
  2604   000ECA  6ADA               	clrf	fsr2h,c
  2605   000ECC  50DF               	movf	indf2,w,c
  2606   000ECE  2404               	addwf	??_fputc^0,w,c
  2607   000ED0  6ED9               	movwf	fsr2l,c
  2608   000ED2  6ADA               	clrf	fsr2h,c
  2609   000ED4  C001  FFDF         	movff	fputc@c,indf2
  2610   000ED8  5003               	movf	fputc@fp^0,w,c
  2611   000EDA  6ED9               	movwf	fsr2l,c
  2612   000EDC  6ADA               	clrf	fsr2h,c
  2613   000EDE  0E02               	movlw	2
  2614   000EE0  26D9               	addwf	fsr2l,f,c
  2615   000EE2  2ADE               	incf	postinc2,f,c
  2616   000EE4  0E00               	movlw	0
  2617   000EE6  22DD               	addwfc	postdec2,f,c
  2618   000EE8                     l915:
  2619   000EE8  0012               	return		;funcret
  2620   000EEA                     __end_of_fputc:
  2621                           	callstack 0
  2622                           
  2623 ;; *************** function _putch *****************
  2624 ;; Defined at:
  2625 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\putch.c"
  2626 ;; Parameters:    Size  Location     Type
  2627 ;;  c               1    wreg     unsigned char 
  2628 ;; Auto vars:     Size  Location     Type
  2629 ;;  c               1    0[COMRAM] unsigned char 
  2630 ;; Return value:  Size  Location     Type
  2631 ;;                  1    wreg      void 
  2632 ;; Registers used:
  2633 ;;		wreg
  2634 ;; Tracked objects:
  2635 ;;		On entry : 0/0
  2636 ;;		On exit  : 0/0
  2637 ;;		Unchanged: 0/0
  2638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2639 ;;      Params:         0       0       0       0       0       0       0       0       0
  2640 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2641 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2642 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2643 ;;Total ram usage:        0 bytes
  2644 ;; Hardware stack levels used: 1
  2645 ;; This function calls:
  2646 ;;		Nothing
  2647 ;; This function is called by:
  2648 ;;		_fputc
  2649 ;; This function uses a non-reentrant model
  2650 ;;
  2651                           
  2652                           	psect	text9
  2653   001594                     __ptext9:
  2654                           	callstack 0
  2655   001594                     _putch:
  2656                           	callstack 26
  2657   001594  0012               	return		;funcret
  2658   001596                     __end_of_putch:
  2659                           	callstack 0
  2660                           
  2661 ;; *************** function _abs *****************
  2662 ;; Defined at:
  2663 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\abs.c"
  2664 ;; Parameters:    Size  Location     Type
  2665 ;;  a               2    6[COMRAM] int 
  2666 ;; Auto vars:     Size  Location     Type
  2667 ;;		None
  2668 ;; Return value:  Size  Location     Type
  2669 ;;                  2    6[COMRAM] int 
  2670 ;; Registers used:
  2671 ;;		wreg, status,2, status,0
  2672 ;; Tracked objects:
  2673 ;;		On entry : 0/0
  2674 ;;		On exit  : 0/0
  2675 ;;		Unchanged: 0/0
  2676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2677 ;;      Params:         2       0       0       0       0       0       0       0       0
  2678 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2679 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2680 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2681 ;;Total ram usage:        4 bytes
  2682 ;; Hardware stack levels used: 1
  2683 ;; This function calls:
  2684 ;;		Nothing
  2685 ;; This function is called by:
  2686 ;;		_dtoa
  2687 ;; This function uses a non-reentrant model
  2688 ;;
  2689                           
  2690                           	psect	text10
  2691   001494                     __ptext10:
  2692                           	callstack 0
  2693   001494                     _abs:
  2694                           	callstack 26
  2695   001494  BE08               	btfsc	(abs@a+1)^0,7,c
  2696   001496  EF4F  F00A         	goto	u751
  2697   00149A  EF51  F00A         	goto	u750
  2698   00149E                     u751:
  2699   00149E  EF57  F00A         	goto	l900
  2700   0014A2                     u750:
  2701   0014A2  C007  F007         	movff	abs@a,?_abs
  2702   0014A6  C008  F008         	movff	abs@a+1,?_abs+1
  2703   0014AA  EF63  F00A         	goto	l903
  2704   0014AE                     l900:
  2705   0014AE  C007  F009         	movff	abs@a,??_abs
  2706   0014B2  C008  F00A         	movff	abs@a+1,??_abs+1
  2707   0014B6  1E09               	comf	??_abs^0,f,c
  2708   0014B8  1E0A               	comf	(??_abs+1)^0,f,c
  2709   0014BA  4A09               	infsnz	??_abs^0,f,c
  2710   0014BC  2A0A               	incf	(??_abs+1)^0,f,c
  2711   0014BE  C009  F007         	movff	??_abs,?_abs
  2712   0014C2  C00A  F008         	movff	??_abs+1,?_abs+1
  2713   0014C6                     l903:
  2714   0014C6  0012               	return		;funcret
  2715   0014C8                     __end_of_abs:
  2716                           	callstack 0
  2717                           
  2718 ;; *************** function _RTC_SetDateTime *****************
  2719 ;; Defined at:
  2720 ;;		line 36 in file "ds1307.c"
  2721 ;; Parameters:    Size  Location     Type
  2722 ;;  h               1    wreg     unsigned char 
  2723 ;;  m               1   13[COMRAM] unsigned char 
  2724 ;;  s               1   14[COMRAM] unsigned char 
  2725 ;;  d               1   15[COMRAM] unsigned char 
  2726 ;;  mo              1   16[COMRAM] unsigned char 
  2727 ;;  y               1   17[COMRAM] unsigned char 
  2728 ;; Auto vars:     Size  Location     Type
  2729 ;;  h               1   19[COMRAM] unsigned char 
  2730 ;;  check           1    0        unsigned char 
  2731 ;; Return value:  Size  Location     Type
  2732 ;;                  1    wreg      void 
  2733 ;; Registers used:
  2734 ;;		wreg, status,2, status,0, cstack
  2735 ;; Tracked objects:
  2736 ;;		On entry : 0/0
  2737 ;;		On exit  : 0/0
  2738 ;;		Unchanged: 0/0
  2739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2740 ;;      Params:         5       0       0       0       0       0       0       0       0
  2741 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2742 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2743 ;;      Totals:         7       0       0       0       0       0       0       0       0
  2744 ;;Total ram usage:        7 bytes
  2745 ;; Hardware stack levels used: 1
  2746 ;; Hardware stack levels required when called: 2
  2747 ;; This function calls:
  2748 ;;		_DEC2BCD
  2749 ;;		_I2C_Master_Start
  2750 ;;		_I2C_Master_Stop
  2751 ;;		_I2C_Master_Write
  2752 ;; This function is called by:
  2753 ;;		_main
  2754 ;; This function uses a non-reentrant model
  2755 ;;
  2756                           
  2757                           	psect	text11
  2758   000F8E                     __ptext11:
  2759                           	callstack 0
  2760   000F8E                     _RTC_SetDateTime:
  2761                           	callstack 28
  2762                           
  2763                           ;incstack = 0
  2764                           ;RTC_SetDateTime@h stored from wreg
  2765   000F8E  6E14               	movwf	RTC_SetDateTime@h^0,c
  2766   000F90                     
  2767                           ;ds1307.c: 36: void RTC_SetDateTime(unsigned char h, unsigned char m, unsigned char s,;d
      +                          s1307.c: 37:                      unsigned char d, unsigned char mo, unsigned char y) {;
      +                          ds1307.c: 38:     unsigned char check;;ds1307.c: 41:     s &= 0x7F;
  2768   000F90  9E0F               	bcf	RTC_SetDateTime@s^0,7,c
  2769   000F92                     
  2770                           ;ds1307.c: 44:     I2C_Master_Start();
  2771   000F92  ECC2  F00A         	call	_I2C_Master_Start	;wreg free
  2772   000F96                     
  2773                           ;ds1307.c: 45:     I2C_Master_Write(0b11010000);
  2774   000F96  0E00               	movlw	0
  2775   000F98  6E0D               	movwf	(I2C_Master_Write@d+1)^0,c
  2776   000F9A  0ED0               	movlw	208
  2777   000F9C  6E0C               	movwf	I2C_Master_Write@d^0,c
  2778   000F9E  ECB7  F00A         	call	_I2C_Master_Write	;wreg free
  2779   000FA2                     
  2780                           ;ds1307.c: 46:     I2C_Master_Write(0b00000000);
  2781   000FA2  0E00               	movlw	0
  2782   000FA4  6E0D               	movwf	(I2C_Master_Write@d+1)^0,c
  2783   000FA6  0E00               	movlw	0
  2784   000FA8  6E0C               	movwf	I2C_Master_Write@d^0,c
  2785   000FAA  ECB7  F00A         	call	_I2C_Master_Write	;wreg free
  2786   000FAE                     
  2787                           ;ds1307.c: 49:     I2C_Master_Write(DEC2BCD(s));
  2788   000FAE  500F               	movf	RTC_SetDateTime@s^0,w,c
  2789   000FB0  ECFA  F009         	call	_DEC2BCD
  2790   000FB4  6E13               	movwf	??_RTC_SetDateTime^0,c
  2791   000FB6  5013               	movf	??_RTC_SetDateTime^0,w,c
  2792   000FB8  6E0C               	movwf	I2C_Master_Write@d^0,c
  2793   000FBA  6A0D               	clrf	(I2C_Master_Write@d+1)^0,c
  2794   000FBC  ECB7  F00A         	call	_I2C_Master_Write	;wreg free
  2795   000FC0                     
  2796                           ;ds1307.c: 50:     I2C_Master_Write(DEC2BCD(m));
  2797   000FC0  500E               	movf	RTC_SetDateTime@m^0,w,c
  2798   000FC2  ECFA  F009         	call	_DEC2BCD
  2799   000FC6  6E13               	movwf	??_RTC_SetDateTime^0,c
  2800   000FC8  5013               	movf	??_RTC_SetDateTime^0,w,c
  2801   000FCA  6E0C               	movwf	I2C_Master_Write@d^0,c
  2802   000FCC  6A0D               	clrf	(I2C_Master_Write@d+1)^0,c
  2803   000FCE  ECB7  F00A         	call	_I2C_Master_Write	;wreg free
  2804   000FD2                     
  2805                           ;ds1307.c: 51:     I2C_Master_Write(DEC2BCD(h));
  2806   000FD2  5014               	movf	RTC_SetDateTime@h^0,w,c
  2807   000FD4  ECFA  F009         	call	_DEC2BCD
  2808   000FD8  6E13               	movwf	??_RTC_SetDateTime^0,c
  2809   000FDA  5013               	movf	??_RTC_SetDateTime^0,w,c
  2810   000FDC  6E0C               	movwf	I2C_Master_Write@d^0,c
  2811   000FDE  6A0D               	clrf	(I2C_Master_Write@d+1)^0,c
  2812   000FE0  ECB7  F00A         	call	_I2C_Master_Write	;wreg free
  2813   000FE4                     
  2814                           ;ds1307.c: 52:     I2C_Master_Write(DEC2BCD(1));
  2815   000FE4  0E01               	movlw	1
  2816   000FE6  ECFA  F009         	call	_DEC2BCD
  2817   000FEA  6E13               	movwf	??_RTC_SetDateTime^0,c
  2818   000FEC  5013               	movf	??_RTC_SetDateTime^0,w,c
  2819   000FEE  6E0C               	movwf	I2C_Master_Write@d^0,c
  2820   000FF0  6A0D               	clrf	(I2C_Master_Write@d+1)^0,c
  2821   000FF2  ECB7  F00A         	call	_I2C_Master_Write	;wreg free
  2822   000FF6                     
  2823                           ;ds1307.c: 53:     I2C_Master_Write(DEC2BCD(d));
  2824   000FF6  5010               	movf	RTC_SetDateTime@d^0,w,c
  2825   000FF8  ECFA  F009         	call	_DEC2BCD
  2826   000FFC  6E13               	movwf	??_RTC_SetDateTime^0,c
  2827   000FFE  5013               	movf	??_RTC_SetDateTime^0,w,c
  2828   001000  6E0C               	movwf	I2C_Master_Write@d^0,c
  2829   001002  6A0D               	clrf	(I2C_Master_Write@d+1)^0,c
  2830   001004  ECB7  F00A         	call	_I2C_Master_Write	;wreg free
  2831   001008                     
  2832                           ;ds1307.c: 54:     I2C_Master_Write(DEC2BCD(mo));
  2833   001008  5011               	movf	RTC_SetDateTime@mo^0,w,c
  2834   00100A  ECFA  F009         	call	_DEC2BCD
  2835   00100E  6E13               	movwf	??_RTC_SetDateTime^0,c
  2836   001010  5013               	movf	??_RTC_SetDateTime^0,w,c
  2837   001012  6E0C               	movwf	I2C_Master_Write@d^0,c
  2838   001014  6A0D               	clrf	(I2C_Master_Write@d+1)^0,c
  2839   001016  ECB7  F00A         	call	_I2C_Master_Write	;wreg free
  2840   00101A                     
  2841                           ;ds1307.c: 55:     I2C_Master_Write(DEC2BCD(y));
  2842   00101A  5012               	movf	RTC_SetDateTime@y^0,w,c
  2843   00101C  ECFA  F009         	call	_DEC2BCD
  2844   001020  6E13               	movwf	??_RTC_SetDateTime^0,c
  2845   001022  5013               	movf	??_RTC_SetDateTime^0,w,c
  2846   001024  6E0C               	movwf	I2C_Master_Write@d^0,c
  2847   001026  6A0D               	clrf	(I2C_Master_Write@d+1)^0,c
  2848   001028  ECB7  F00A         	call	_I2C_Master_Write	;wreg free
  2849   00102C                     
  2850                           ;ds1307.c: 56:     I2C_Master_Stop();
  2851   00102C  ECBE  F00A         	call	_I2C_Master_Stop	;wreg free
  2852   001030  0012               	return		;funcret
  2853   001032                     __end_of_RTC_SetDateTime:
  2854                           	callstack 0
  2855                           
  2856 ;; *************** function _DEC2BCD *****************
  2857 ;; Defined at:
  2858 ;;		line 10 in file "ds1307.c"
  2859 ;; Parameters:    Size  Location     Type
  2860 ;;  val             1    wreg     unsigned char 
  2861 ;; Auto vars:     Size  Location     Type
  2862 ;;  val             1   10[COMRAM] unsigned char 
  2863 ;; Return value:  Size  Location     Type
  2864 ;;                  1    wreg      unsigned char 
  2865 ;; Registers used:
  2866 ;;		wreg, status,2, status,0, cstack
  2867 ;; Tracked objects:
  2868 ;;		On entry : 0/0
  2869 ;;		On exit  : 0/0
  2870 ;;		Unchanged: 0/0
  2871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2872 ;;      Params:         0       0       0       0       0       0       0       0       0
  2873 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2874 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2875 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2876 ;;Total ram usage:        3 bytes
  2877 ;; Hardware stack levels used: 1
  2878 ;; Hardware stack levels required when called: 1
  2879 ;; This function calls:
  2880 ;;		___awdiv
  2881 ;;		___awmod
  2882 ;; This function is called by:
  2883 ;;		_RTC_SetDateTime
  2884 ;; This function uses a non-reentrant model
  2885 ;;
  2886                           
  2887                           	psect	text12
  2888   0013F4                     __ptext12:
  2889                           	callstack 0
  2890   0013F4                     _DEC2BCD:
  2891                           	callstack 28
  2892                           
  2893                           ;incstack = 0
  2894                           ;DEC2BCD@val stored from wreg
  2895   0013F4  6E0B               	movwf	DEC2BCD@val^0,c
  2896   0013F6                     
  2897                           ;ds1307.c: 11:     return ((val / 10) << 4) | (val % 10);
  2898   0013F6  C00B  F001         	movff	DEC2BCD@val,___awmod@dividend
  2899   0013FA  6A02               	clrf	(___awmod@dividend+1)^0,c
  2900   0013FC  0E00               	movlw	0
  2901   0013FE  6E04               	movwf	(___awmod@divisor+1)^0,c
  2902   001400  0E0A               	movlw	10
  2903   001402  6E03               	movwf	___awmod@divisor^0,c
  2904   001404  ECC9  F006         	call	___awmod	;wreg free
  2905   001408  C001  F009         	movff	?___awmod,??_DEC2BCD
  2906   00140C  C002  F00A         	movff	?___awmod+1,??_DEC2BCD+1
  2907   001410  C00B  F001         	movff	DEC2BCD@val,___awdiv@dividend
  2908   001414  6A02               	clrf	(___awdiv@dividend+1)^0,c
  2909   001416  0E00               	movlw	0
  2910   001418  6E04               	movwf	(___awdiv@divisor+1)^0,c
  2911   00141A  0E0A               	movlw	10
  2912   00141C  6E03               	movwf	___awdiv@divisor^0,c
  2913   00141E  EC68  F006         	call	___awdiv	;wreg free
  2914   001422  3801               	swapf	?___awdiv^0,w,c
  2915   001424  0BF0               	andlw	240
  2916   001426  1009               	iorwf	??_DEC2BCD^0,w,c
  2917   001428  0012               	return		;funcret
  2918   00142A                     __end_of_DEC2BCD:
  2919                           	callstack 0
  2920                           
  2921 ;; *************** function ___awmod *****************
  2922 ;; Defined at:
  2923 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\awmod.c"
  2924 ;; Parameters:    Size  Location     Type
  2925 ;;  dividend        2    0[COMRAM] int 
  2926 ;;  divisor         2    2[COMRAM] int 
  2927 ;; Auto vars:     Size  Location     Type
  2928 ;;  sign            1    5[COMRAM] unsigned char 
  2929 ;;  counter         1    4[COMRAM] unsigned char 
  2930 ;; Return value:  Size  Location     Type
  2931 ;;                  2    0[COMRAM] int 
  2932 ;; Registers used:
  2933 ;;		wreg, status,2, status,0
  2934 ;; Tracked objects:
  2935 ;;		On entry : 0/0
  2936 ;;		On exit  : 0/0
  2937 ;;		Unchanged: 0/0
  2938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2939 ;;      Params:         4       0       0       0       0       0       0       0       0
  2940 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2941 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2942 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2943 ;;Total ram usage:        6 bytes
  2944 ;; Hardware stack levels used: 1
  2945 ;; This function calls:
  2946 ;;		Nothing
  2947 ;; This function is called by:
  2948 ;;		_DEC2BCD
  2949 ;;		_dtoa
  2950 ;; This function uses a non-reentrant model
  2951 ;;
  2952                           
  2953                           	psect	text13
  2954   000D92                     __ptext13:
  2955                           	callstack 0
  2956   000D92                     ___awmod:
  2957                           	callstack 26
  2958   000D92  6A06               	clrf	___awmod@sign^0,c
  2959   000D94  BE02               	btfsc	(___awmod@dividend+1)^0,7,c
  2960   000D96  EFD1  F006         	goto	u650
  2961   000D9A  EFCF  F006         	goto	u651
  2962   000D9E                     u651:
  2963   000D9E  EFD7  F006         	goto	l1490
  2964   000DA2                     u650:
  2965   000DA2  6C01               	negf	___awmod@dividend^0,c
  2966   000DA4  1E02               	comf	(___awmod@dividend+1)^0,f,c
  2967   000DA6  B0D8               	btfsc	status,0,c
  2968   000DA8  2A02               	incf	(___awmod@dividend+1)^0,f,c
  2969   000DAA  0E01               	movlw	1
  2970   000DAC  6E06               	movwf	___awmod@sign^0,c
  2971   000DAE                     l1490:
  2972   000DAE  BE04               	btfsc	(___awmod@divisor+1)^0,7,c
  2973   000DB0  EFDE  F006         	goto	u660
  2974   000DB4  EFDC  F006         	goto	u661
  2975   000DB8                     u661:
  2976   000DB8  EFE2  F006         	goto	l1494
  2977   000DBC                     u660:
  2978   000DBC  6C03               	negf	___awmod@divisor^0,c
  2979   000DBE  1E04               	comf	(___awmod@divisor+1)^0,f,c
  2980   000DC0  B0D8               	btfsc	status,0,c
  2981   000DC2  2A04               	incf	(___awmod@divisor+1)^0,f,c
  2982   000DC4                     l1494:
  2983   000DC4  5003               	movf	___awmod@divisor^0,w,c
  2984   000DC6  1004               	iorwf	(___awmod@divisor+1)^0,w,c
  2985   000DC8  B4D8               	btfsc	status,2,c
  2986   000DCA  EFE9  F006         	goto	u671
  2987   000DCE  EFEB  F006         	goto	u670
  2988   000DD2                     u671:
  2989   000DD2  EF0F  F007         	goto	l1510
  2990   000DD6                     u670:
  2991   000DD6  0E01               	movlw	1
  2992   000DD8  6E05               	movwf	___awmod@counter^0,c
  2993   000DDA  EFF3  F006         	goto	l1500
  2994   000DDE                     l1498:
  2995   000DDE  90D8               	bcf	status,0,c
  2996   000DE0  3603               	rlcf	___awmod@divisor^0,f,c
  2997   000DE2  3604               	rlcf	(___awmod@divisor+1)^0,f,c
  2998   000DE4  2A05               	incf	___awmod@counter^0,f,c
  2999   000DE6                     l1500:
  3000   000DE6  AE04               	btfss	(___awmod@divisor+1)^0,7,c
  3001   000DE8  EFF8  F006         	goto	u681
  3002   000DEC  EFFA  F006         	goto	u680
  3003   000DF0                     u681:
  3004   000DF0  EFEF  F006         	goto	l1498
  3005   000DF4                     u680:
  3006   000DF4                     l1502:
  3007   000DF4  5003               	movf	___awmod@divisor^0,w,c
  3008   000DF6  5C01               	subwf	___awmod@dividend^0,w,c
  3009   000DF8  5004               	movf	(___awmod@divisor+1)^0,w,c
  3010   000DFA  5802               	subwfb	(___awmod@dividend+1)^0,w,c
  3011   000DFC  A0D8               	btfss	status,0,c
  3012   000DFE  EF03  F007         	goto	u691
  3013   000E02  EF05  F007         	goto	u690
  3014   000E06                     u691:
  3015   000E06  EF09  F007         	goto	l1506
  3016   000E0A                     u690:
  3017   000E0A  5003               	movf	___awmod@divisor^0,w,c
  3018   000E0C  5E01               	subwf	___awmod@dividend^0,f,c
  3019   000E0E  5004               	movf	(___awmod@divisor+1)^0,w,c
  3020   000E10  5A02               	subwfb	(___awmod@dividend+1)^0,f,c
  3021   000E12                     l1506:
  3022   000E12  90D8               	bcf	status,0,c
  3023   000E14  3204               	rrcf	(___awmod@divisor+1)^0,f,c
  3024   000E16  3203               	rrcf	___awmod@divisor^0,f,c
  3025   000E18  2E05               	decfsz	___awmod@counter^0,f,c
  3026   000E1A  EFFA  F006         	goto	l1502
  3027   000E1E                     l1510:
  3028   000E1E  5006               	movf	___awmod@sign^0,w,c
  3029   000E20  B4D8               	btfsc	status,2,c
  3030   000E22  EF15  F007         	goto	u701
  3031   000E26  EF17  F007         	goto	u700
  3032   000E2A                     u701:
  3033   000E2A  EF1B  F007         	goto	l1514
  3034   000E2E                     u700:
  3035   000E2E  6C01               	negf	___awmod@dividend^0,c
  3036   000E30  1E02               	comf	(___awmod@dividend+1)^0,f,c
  3037   000E32  B0D8               	btfsc	status,0,c
  3038   000E34  2A02               	incf	(___awmod@dividend+1)^0,f,c
  3039   000E36                     l1514:
  3040   000E36  C001  F001         	movff	___awmod@dividend,?___awmod
  3041   000E3A  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  3042   000E3E  0012               	return		;funcret
  3043   000E40                     __end_of___awmod:
  3044                           	callstack 0
  3045                           
  3046 ;; *************** function ___awdiv *****************
  3047 ;; Defined at:
  3048 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\awdiv.c"
  3049 ;; Parameters:    Size  Location     Type
  3050 ;;  dividend        2    0[COMRAM] int 
  3051 ;;  divisor         2    2[COMRAM] int 
  3052 ;; Auto vars:     Size  Location     Type
  3053 ;;  quotient        2    6[COMRAM] int 
  3054 ;;  sign            1    5[COMRAM] unsigned char 
  3055 ;;  counter         1    4[COMRAM] unsigned char 
  3056 ;; Return value:  Size  Location     Type
  3057 ;;                  2    0[COMRAM] int 
  3058 ;; Registers used:
  3059 ;;		wreg, status,2, status,0
  3060 ;; Tracked objects:
  3061 ;;		On entry : 0/0
  3062 ;;		On exit  : 0/0
  3063 ;;		Unchanged: 0/0
  3064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3065 ;;      Params:         4       0       0       0       0       0       0       0       0
  3066 ;;      Locals:         4       0       0       0       0       0       0       0       0
  3067 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3068 ;;      Totals:         8       0       0       0       0       0       0       0       0
  3069 ;;Total ram usage:        8 bytes
  3070 ;; Hardware stack levels used: 1
  3071 ;; This function calls:
  3072 ;;		Nothing
  3073 ;; This function is called by:
  3074 ;;		_DEC2BCD
  3075 ;;		_dtoa
  3076 ;; This function uses a non-reentrant model
  3077 ;;
  3078                           
  3079                           	psect	text14
  3080   000CD0                     __ptext14:
  3081                           	callstack 0
  3082   000CD0                     ___awdiv:
  3083                           	callstack 26
  3084   000CD0  6A06               	clrf	___awdiv@sign^0,c
  3085   000CD2  BE04               	btfsc	(___awdiv@divisor+1)^0,7,c
  3086   000CD4  EF70  F006         	goto	u590
  3087   000CD8  EF6E  F006         	goto	u591
  3088   000CDC                     u591:
  3089   000CDC  EF76  F006         	goto	l1446
  3090   000CE0                     u590:
  3091   000CE0  6C03               	negf	___awdiv@divisor^0,c
  3092   000CE2  1E04               	comf	(___awdiv@divisor+1)^0,f,c
  3093   000CE4  B0D8               	btfsc	status,0,c
  3094   000CE6  2A04               	incf	(___awdiv@divisor+1)^0,f,c
  3095   000CE8  0E01               	movlw	1
  3096   000CEA  6E06               	movwf	___awdiv@sign^0,c
  3097   000CEC                     l1446:
  3098   000CEC  BE02               	btfsc	(___awdiv@dividend+1)^0,7,c
  3099   000CEE  EF7D  F006         	goto	u600
  3100   000CF2  EF7B  F006         	goto	u601
  3101   000CF6                     u601:
  3102   000CF6  EF83  F006         	goto	l1452
  3103   000CFA                     u600:
  3104   000CFA  6C01               	negf	___awdiv@dividend^0,c
  3105   000CFC  1E02               	comf	(___awdiv@dividend+1)^0,f,c
  3106   000CFE  B0D8               	btfsc	status,0,c
  3107   000D00  2A02               	incf	(___awdiv@dividend+1)^0,f,c
  3108   000D02  0E01               	movlw	1
  3109   000D04  1A06               	xorwf	___awdiv@sign^0,f,c
  3110   000D06                     l1452:
  3111   000D06  0E00               	movlw	0
  3112   000D08  6E08               	movwf	(___awdiv@quotient+1)^0,c
  3113   000D0A  0E00               	movlw	0
  3114   000D0C  6E07               	movwf	___awdiv@quotient^0,c
  3115   000D0E  5003               	movf	___awdiv@divisor^0,w,c
  3116   000D10  1004               	iorwf	(___awdiv@divisor+1)^0,w,c
  3117   000D12  B4D8               	btfsc	status,2,c
  3118   000D14  EF8E  F006         	goto	u611
  3119   000D18  EF90  F006         	goto	u610
  3120   000D1C                     u611:
  3121   000D1C  EFB8  F006         	goto	l1474
  3122   000D20                     u610:
  3123   000D20  0E01               	movlw	1
  3124   000D22  6E05               	movwf	___awdiv@counter^0,c
  3125   000D24  EF98  F006         	goto	l1460
  3126   000D28                     l1458:
  3127   000D28  90D8               	bcf	status,0,c
  3128   000D2A  3603               	rlcf	___awdiv@divisor^0,f,c
  3129   000D2C  3604               	rlcf	(___awdiv@divisor+1)^0,f,c
  3130   000D2E  2A05               	incf	___awdiv@counter^0,f,c
  3131   000D30                     l1460:
  3132   000D30  AE04               	btfss	(___awdiv@divisor+1)^0,7,c
  3133   000D32  EF9D  F006         	goto	u621
  3134   000D36  EF9F  F006         	goto	u620
  3135   000D3A                     u621:
  3136   000D3A  EF94  F006         	goto	l1458
  3137   000D3E                     u620:
  3138   000D3E                     l1462:
  3139   000D3E  90D8               	bcf	status,0,c
  3140   000D40  3607               	rlcf	___awdiv@quotient^0,f,c
  3141   000D42  3608               	rlcf	(___awdiv@quotient+1)^0,f,c
  3142   000D44  5003               	movf	___awdiv@divisor^0,w,c
  3143   000D46  5C01               	subwf	___awdiv@dividend^0,w,c
  3144   000D48  5004               	movf	(___awdiv@divisor+1)^0,w,c
  3145   000D4A  5802               	subwfb	(___awdiv@dividend+1)^0,w,c
  3146   000D4C  A0D8               	btfss	status,0,c
  3147   000D4E  EFAB  F006         	goto	u631
  3148   000D52  EFAD  F006         	goto	u630
  3149   000D56                     u631:
  3150   000D56  EFB2  F006         	goto	l1470
  3151   000D5A                     u630:
  3152   000D5A  5003               	movf	___awdiv@divisor^0,w,c
  3153   000D5C  5E01               	subwf	___awdiv@dividend^0,f,c
  3154   000D5E  5004               	movf	(___awdiv@divisor+1)^0,w,c
  3155   000D60  5A02               	subwfb	(___awdiv@dividend+1)^0,f,c
  3156   000D62  8007               	bsf	___awdiv@quotient^0,0,c
  3157   000D64                     l1470:
  3158   000D64  90D8               	bcf	status,0,c
  3159   000D66  3204               	rrcf	(___awdiv@divisor+1)^0,f,c
  3160   000D68  3203               	rrcf	___awdiv@divisor^0,f,c
  3161   000D6A  2E05               	decfsz	___awdiv@counter^0,f,c
  3162   000D6C  EF9F  F006         	goto	l1462
  3163   000D70                     l1474:
  3164   000D70  5006               	movf	___awdiv@sign^0,w,c
  3165   000D72  B4D8               	btfsc	status,2,c
  3166   000D74  EFBE  F006         	goto	u641
  3167   000D78  EFC0  F006         	goto	u640
  3168   000D7C                     u641:
  3169   000D7C  EFC4  F006         	goto	l1478
  3170   000D80                     u640:
  3171   000D80  6C07               	negf	___awdiv@quotient^0,c
  3172   000D82  1E08               	comf	(___awdiv@quotient+1)^0,f,c
  3173   000D84  B0D8               	btfsc	status,0,c
  3174   000D86  2A08               	incf	(___awdiv@quotient+1)^0,f,c
  3175   000D88                     l1478:
  3176   000D88  C007  F001         	movff	___awdiv@quotient,?___awdiv
  3177   000D8C  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  3178   000D90  0012               	return		;funcret
  3179   000D92                     __end_of___awdiv:
  3180                           	callstack 0
  3181                           
  3182 ;; *************** function _RTC_Init *****************
  3183 ;; Defined at:
  3184 ;;		line 14 in file "ds1307.c"
  3185 ;; Parameters:    Size  Location     Type
  3186 ;;		None
  3187 ;; Auto vars:     Size  Location     Type
  3188 ;;  sec             1   14[COMRAM] unsigned char 
  3189 ;; Return value:  Size  Location     Type
  3190 ;;                  1    wreg      void 
  3191 ;; Registers used:
  3192 ;;		wreg, status,2, status,0, cstack
  3193 ;; Tracked objects:
  3194 ;;		On entry : 0/0
  3195 ;;		On exit  : 0/0
  3196 ;;		Unchanged: 0/0
  3197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3198 ;;      Params:         0       0       0       0       0       0       0       0       0
  3199 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3200 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3201 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3202 ;;Total ram usage:        2 bytes
  3203 ;; Hardware stack levels used: 1
  3204 ;; Hardware stack levels required when called: 2
  3205 ;; This function calls:
  3206 ;;		_I2C_Master_Read
  3207 ;;		_I2C_Master_RepeatedStart
  3208 ;;		_I2C_Master_Start
  3209 ;;		_I2C_Master_Stop
  3210 ;;		_I2C_Master_Write
  3211 ;; This function is called by:
  3212 ;;		_main
  3213 ;; This function uses a non-reentrant model
  3214 ;;
  3215                           
  3216                           	psect	text15
  3217   001160                     __ptext15:
  3218                           	callstack 0
  3219   001160                     _RTC_Init:
  3220                           	callstack 28
  3221   001160                     
  3222                           ;ds1307.c: 15:     unsigned char sec;;ds1307.c: 17:     I2C_Master_Start();
  3223   001160  ECC2  F00A         	call	_I2C_Master_Start	;wreg free
  3224                           
  3225                           ;ds1307.c: 18:     I2C_Master_Write(0b11010000);
  3226   001164  0E00               	movlw	0
  3227   001166  6E0D               	movwf	(I2C_Master_Write@d+1)^0,c
  3228   001168  0ED0               	movlw	208
  3229   00116A  6E0C               	movwf	I2C_Master_Write@d^0,c
  3230   00116C  ECB7  F00A         	call	_I2C_Master_Write	;wreg free
  3231                           
  3232                           ;ds1307.c: 19:     I2C_Master_Write(0x00);
  3233   001170  0E00               	movlw	0
  3234   001172  6E0D               	movwf	(I2C_Master_Write@d+1)^0,c
  3235   001174  0E00               	movlw	0
  3236   001176  6E0C               	movwf	I2C_Master_Write@d^0,c
  3237   001178  ECB7  F00A         	call	_I2C_Master_Write	;wreg free
  3238                           
  3239                           ;ds1307.c: 20:     I2C_Master_RepeatedStart();
  3240   00117C  ECC6  F00A         	call	_I2C_Master_RepeatedStart	;wreg free
  3241                           
  3242                           ;ds1307.c: 21:     I2C_Master_Write(0b11010000 | 1);
  3243   001180  0E00               	movlw	0
  3244   001182  6E0D               	movwf	(I2C_Master_Write@d+1)^0,c
  3245   001184  0ED1               	movlw	209
  3246   001186  6E0C               	movwf	I2C_Master_Write@d^0,c
  3247   001188  ECB7  F00A         	call	_I2C_Master_Write	;wreg free
  3248                           
  3249                           ;ds1307.c: 22:     sec = I2C_Master_Read(0);
  3250   00118C  0E00               	movlw	0
  3251   00118E  6E03               	movwf	(I2C_Master_Read@a+1)^0,c
  3252   001190  0E00               	movlw	0
  3253   001192  6E02               	movwf	I2C_Master_Read@a^0,c
  3254   001194  EC15  F00A         	call	_I2C_Master_Read	;wreg free
  3255   001198  5002               	movf	?_I2C_Master_Read^0,w,c
  3256   00119A  6E0F               	movwf	RTC_Init@sec^0,c
  3257                           
  3258                           ;ds1307.c: 23:     I2C_Master_Stop();
  3259   00119C  ECBE  F00A         	call	_I2C_Master_Stop	;wreg free
  3260   0011A0                     
  3261                           ;ds1307.c: 25:     if (sec & 0x80) {
  3262   0011A0  AE0F               	btfss	RTC_Init@sec^0,7,c
  3263   0011A2  EFD5  F008         	goto	u1021
  3264   0011A6  EFD7  F008         	goto	u1020
  3265   0011AA                     u1021:
  3266   0011AA  EFF0  F008         	goto	l20
  3267   0011AE                     u1020:
  3268   0011AE                     
  3269                           ;ds1307.c: 28:         I2C_Master_Start();
  3270   0011AE  ECC2  F00A         	call	_I2C_Master_Start	;wreg free
  3271                           
  3272                           ;ds1307.c: 29:         I2C_Master_Write(0b11010000);
  3273   0011B2  0E00               	movlw	0
  3274   0011B4  6E0D               	movwf	(I2C_Master_Write@d+1)^0,c
  3275   0011B6  0ED0               	movlw	208
  3276   0011B8  6E0C               	movwf	I2C_Master_Write@d^0,c
  3277   0011BA  ECB7  F00A         	call	_I2C_Master_Write	;wreg free
  3278                           
  3279                           ;ds1307.c: 30:         I2C_Master_Write(0x00);
  3280   0011BE  0E00               	movlw	0
  3281   0011C0  6E0D               	movwf	(I2C_Master_Write@d+1)^0,c
  3282   0011C2  0E00               	movlw	0
  3283   0011C4  6E0C               	movwf	I2C_Master_Write@d^0,c
  3284   0011C6  ECB7  F00A         	call	_I2C_Master_Write	;wreg free
  3285                           
  3286                           ;ds1307.c: 31:         I2C_Master_Write(sec & 0x7F);
  3287   0011CA  C00F  F00E         	movff	RTC_Init@sec,??_RTC_Init
  3288   0011CE  0E7F               	movlw	127
  3289   0011D0  160E               	andwf	??_RTC_Init^0,f,c
  3290   0011D2  500E               	movf	??_RTC_Init^0,w,c
  3291   0011D4  6E0C               	movwf	I2C_Master_Write@d^0,c
  3292   0011D6  6A0D               	clrf	(I2C_Master_Write@d+1)^0,c
  3293   0011D8  ECB7  F00A         	call	_I2C_Master_Write	;wreg free
  3294                           
  3295                           ;ds1307.c: 32:         I2C_Master_Stop();
  3296   0011DC  ECBE  F00A         	call	_I2C_Master_Stop	;wreg free
  3297   0011E0                     l20:
  3298   0011E0  0012               	return		;funcret
  3299   0011E2                     __end_of_RTC_Init:
  3300                           	callstack 0
  3301                           
  3302 ;; *************** function _RTC_GetDateTime *****************
  3303 ;; Defined at:
  3304 ;;		line 60 in file "ds1307.c"
  3305 ;; Parameters:    Size  Location     Type
  3306 ;;  hour            1   13[COMRAM] PTR unsigned char 
  3307 ;;		 -> main@h(1), 
  3308 ;;  min             1   14[COMRAM] PTR unsigned char 
  3309 ;;		 -> main@m(1), 
  3310 ;;  sec             1   15[COMRAM] PTR unsigned char 
  3311 ;;		 -> main@s(1), 
  3312 ;;  day             1   16[COMRAM] PTR unsigned char 
  3313 ;;		 -> main@d(1), 
  3314 ;;  month           1   17[COMRAM] PTR unsigned char 
  3315 ;;		 -> main@mo(1), 
  3316 ;;  year            1   18[COMRAM] PTR unsigned char 
  3317 ;;		 -> main@y(1), 
  3318 ;; Auto vars:     Size  Location     Type
  3319 ;;		None
  3320 ;; Return value:  Size  Location     Type
  3321 ;;                  1    wreg      void 
  3322 ;; Registers used:
  3323 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3324 ;; Tracked objects:
  3325 ;;		On entry : 0/0
  3326 ;;		On exit  : 0/0
  3327 ;;		Unchanged: 0/0
  3328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3329 ;;      Params:         6       0       0       0       0       0       0       0       0
  3330 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3331 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3332 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3333 ;;Total ram usage:        6 bytes
  3334 ;; Hardware stack levels used: 1
  3335 ;; Hardware stack levels required when called: 2
  3336 ;; This function calls:
  3337 ;;		_BCD2DEC
  3338 ;;		_I2C_Master_Read
  3339 ;;		_I2C_Master_RepeatedStart
  3340 ;;		_I2C_Master_Start
  3341 ;;		_I2C_Master_Stop
  3342 ;;		_I2C_Master_Write
  3343 ;; This function is called by:
  3344 ;;		_main
  3345 ;; This function uses a non-reentrant model
  3346 ;;
  3347                           
  3348                           	psect	text16
  3349   000BF6                     __ptext16:
  3350                           	callstack 0
  3351   000BF6                     _RTC_GetDateTime:
  3352                           	callstack 28
  3353   000BF6                     
  3354                           ;ds1307.c: 60: void RTC_GetDateTime(unsigned char *hour, unsigned char *min, unsigned ch
      +                          ar *sec,;ds1307.c: 61:                      unsigned char *day, unsigned char *month, un
      +                          signed char *year) {;ds1307.c: 62:     I2C_Master_Start();
  3355   000BF6  ECC2  F00A         	call	_I2C_Master_Start	;wreg free
  3356                           
  3357                           ;ds1307.c: 63:     I2C_Master_Write(0b11010000);
  3358   000BFA  0E00               	movlw	0
  3359   000BFC  6E0D               	movwf	(I2C_Master_Write@d+1)^0,c
  3360   000BFE  0ED0               	movlw	208
  3361   000C00  6E0C               	movwf	I2C_Master_Write@d^0,c
  3362   000C02  ECB7  F00A         	call	_I2C_Master_Write	;wreg free
  3363                           
  3364                           ;ds1307.c: 64:     I2C_Master_Write(0b00000000);
  3365   000C06  0E00               	movlw	0
  3366   000C08  6E0D               	movwf	(I2C_Master_Write@d+1)^0,c
  3367   000C0A  0E00               	movlw	0
  3368   000C0C  6E0C               	movwf	I2C_Master_Write@d^0,c
  3369   000C0E  ECB7  F00A         	call	_I2C_Master_Write	;wreg free
  3370                           
  3371                           ;ds1307.c: 65:     I2C_Master_RepeatedStart();
  3372   000C12  ECC6  F00A         	call	_I2C_Master_RepeatedStart	;wreg free
  3373                           
  3374                           ;ds1307.c: 66:     I2C_Master_Write(0b11010000 | 1);
  3375   000C16  0E00               	movlw	0
  3376   000C18  6E0D               	movwf	(I2C_Master_Write@d+1)^0,c
  3377   000C1A  0ED1               	movlw	209
  3378   000C1C  6E0C               	movwf	I2C_Master_Write@d^0,c
  3379   000C1E  ECB7  F00A         	call	_I2C_Master_Write	;wreg free
  3380   000C22                     
  3381                           ;ds1307.c: 68:     *sec = BCD2DEC(I2C_Master_Read(1));
  3382   000C22  5010               	movf	RTC_GetDateTime@sec^0,w,c
  3383   000C24  6ED9               	movwf	fsr2l,c
  3384   000C26  6ADA               	clrf	fsr2h,c
  3385   000C28  0E00               	movlw	0
  3386   000C2A  6E03               	movwf	(I2C_Master_Read@a+1)^0,c
  3387   000C2C  0E01               	movlw	1
  3388   000C2E  6E02               	movwf	I2C_Master_Read@a^0,c
  3389   000C30  EC15  F00A         	call	_I2C_Master_Read	;wreg free
  3390   000C34  5002               	movf	?_I2C_Master_Read^0,w,c
  3391   000C36  ECAC  F00A         	call	_BCD2DEC
  3392   000C3A  6EDF               	movwf	indf2,c
  3393   000C3C                     
  3394                           ;ds1307.c: 69:     *min = BCD2DEC(I2C_Master_Read(1));
  3395   000C3C  500F               	movf	RTC_GetDateTime@min^0,w,c
  3396   000C3E  6ED9               	movwf	fsr2l,c
  3397   000C40  6ADA               	clrf	fsr2h,c
  3398   000C42  0E00               	movlw	0
  3399   000C44  6E03               	movwf	(I2C_Master_Read@a+1)^0,c
  3400   000C46  0E01               	movlw	1
  3401   000C48  6E02               	movwf	I2C_Master_Read@a^0,c
  3402   000C4A  EC15  F00A         	call	_I2C_Master_Read	;wreg free
  3403   000C4E  5002               	movf	?_I2C_Master_Read^0,w,c
  3404   000C50  ECAC  F00A         	call	_BCD2DEC
  3405   000C54  6EDF               	movwf	indf2,c
  3406   000C56                     
  3407                           ;ds1307.c: 70:     *hour = BCD2DEC(I2C_Master_Read(1));
  3408   000C56  500E               	movf	RTC_GetDateTime@hour^0,w,c
  3409   000C58  6ED9               	movwf	fsr2l,c
  3410   000C5A  6ADA               	clrf	fsr2h,c
  3411   000C5C  0E00               	movlw	0
  3412   000C5E  6E03               	movwf	(I2C_Master_Read@a+1)^0,c
  3413   000C60  0E01               	movlw	1
  3414   000C62  6E02               	movwf	I2C_Master_Read@a^0,c
  3415   000C64  EC15  F00A         	call	_I2C_Master_Read	;wreg free
  3416   000C68  5002               	movf	?_I2C_Master_Read^0,w,c
  3417   000C6A  ECAC  F00A         	call	_BCD2DEC
  3418   000C6E  6EDF               	movwf	indf2,c
  3419   000C70                     
  3420                           ;ds1307.c: 71:     I2C_Master_Read(1);
  3421   000C70  0E00               	movlw	0
  3422   000C72  6E03               	movwf	(I2C_Master_Read@a+1)^0,c
  3423   000C74  0E01               	movlw	1
  3424   000C76  6E02               	movwf	I2C_Master_Read@a^0,c
  3425   000C78  EC15  F00A         	call	_I2C_Master_Read	;wreg free
  3426                           
  3427                           ;ds1307.c: 72:     *day = BCD2DEC(I2C_Master_Read(1));
  3428   000C7C  5011               	movf	RTC_GetDateTime@day^0,w,c
  3429   000C7E  6ED9               	movwf	fsr2l,c
  3430   000C80  6ADA               	clrf	fsr2h,c
  3431   000C82  0E00               	movlw	0
  3432   000C84  6E03               	movwf	(I2C_Master_Read@a+1)^0,c
  3433   000C86  0E01               	movlw	1
  3434   000C88  6E02               	movwf	I2C_Master_Read@a^0,c
  3435   000C8A  EC15  F00A         	call	_I2C_Master_Read	;wreg free
  3436   000C8E  5002               	movf	?_I2C_Master_Read^0,w,c
  3437   000C90  ECAC  F00A         	call	_BCD2DEC
  3438   000C94  6EDF               	movwf	indf2,c
  3439                           
  3440                           ;ds1307.c: 73:     *month = BCD2DEC(I2C_Master_Read(1));
  3441   000C96  5012               	movf	RTC_GetDateTime@month^0,w,c
  3442   000C98  6ED9               	movwf	fsr2l,c
  3443   000C9A  6ADA               	clrf	fsr2h,c
  3444   000C9C  0E00               	movlw	0
  3445   000C9E  6E03               	movwf	(I2C_Master_Read@a+1)^0,c
  3446   000CA0  0E01               	movlw	1
  3447   000CA2  6E02               	movwf	I2C_Master_Read@a^0,c
  3448   000CA4  EC15  F00A         	call	_I2C_Master_Read	;wreg free
  3449   000CA8  5002               	movf	?_I2C_Master_Read^0,w,c
  3450   000CAA  ECAC  F00A         	call	_BCD2DEC
  3451   000CAE  6EDF               	movwf	indf2,c
  3452                           
  3453                           ;ds1307.c: 74:     *year = BCD2DEC(I2C_Master_Read(0));
  3454   000CB0  5013               	movf	RTC_GetDateTime@year^0,w,c
  3455   000CB2  6ED9               	movwf	fsr2l,c
  3456   000CB4  6ADA               	clrf	fsr2h,c
  3457   000CB6  0E00               	movlw	0
  3458   000CB8  6E03               	movwf	(I2C_Master_Read@a+1)^0,c
  3459   000CBA  0E00               	movlw	0
  3460   000CBC  6E02               	movwf	I2C_Master_Read@a^0,c
  3461   000CBE  EC15  F00A         	call	_I2C_Master_Read	;wreg free
  3462   000CC2  5002               	movf	?_I2C_Master_Read^0,w,c
  3463   000CC4  ECAC  F00A         	call	_BCD2DEC
  3464   000CC8  6EDF               	movwf	indf2,c
  3465   000CCA                     
  3466                           ;ds1307.c: 75:     I2C_Master_Stop();
  3467   000CCA  ECBE  F00A         	call	_I2C_Master_Stop	;wreg free
  3468   000CCE  0012               	return		;funcret
  3469   000CD0                     __end_of_RTC_GetDateTime:
  3470                           	callstack 0
  3471                           
  3472 ;; *************** function _I2C_Master_Write *****************
  3473 ;; Defined at:
  3474 ;;		line 32 in file "i2c.c"
  3475 ;; Parameters:    Size  Location     Type
  3476 ;;  d               2   11[COMRAM] unsigned int 
  3477 ;; Auto vars:     Size  Location     Type
  3478 ;;		None
  3479 ;; Return value:  Size  Location     Type
  3480 ;;                  1    wreg      unsigned char 
  3481 ;; Registers used:
  3482 ;;		wreg, status,2, status,0, cstack
  3483 ;; Tracked objects:
  3484 ;;		On entry : 0/0
  3485 ;;		On exit  : 0/0
  3486 ;;		Unchanged: 0/0
  3487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3488 ;;      Params:         2       0       0       0       0       0       0       0       0
  3489 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3490 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3491 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3492 ;;Total ram usage:        2 bytes
  3493 ;; Hardware stack levels used: 1
  3494 ;; Hardware stack levels required when called: 1
  3495 ;; This function calls:
  3496 ;;		_I2C_Master_Wait
  3497 ;; This function is called by:
  3498 ;;		_RTC_Init
  3499 ;;		_RTC_SetDateTime
  3500 ;;		_RTC_GetDateTime
  3501 ;; This function uses a non-reentrant model
  3502 ;;
  3503                           
  3504                           	psect	text17
  3505   00156E                     __ptext17:
  3506                           	callstack 0
  3507   00156E                     _I2C_Master_Write:
  3508                           	callstack 28
  3509   00156E                     
  3510                           ;i2c.c: 33:     I2C_Master_Wait();
  3511   00156E  EC7D  F00A         	call	_I2C_Master_Wait	;wreg free
  3512   001572                     
  3513                           ;i2c.c: 34:     SSPBUF = d;
  3514   001572  C00C  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  3515                           
  3516                           ;i2c.c: 35:     I2C_Master_Wait();
  3517   001576  EC7D  F00A         	call	_I2C_Master_Wait	;wreg free
  3518   00157A  0012               	return		;funcret
  3519   00157C                     __end_of_I2C_Master_Write:
  3520                           	callstack 0
  3521                           
  3522 ;; *************** function _I2C_Master_Stop *****************
  3523 ;; Defined at:
  3524 ;;		line 27 in file "i2c.c"
  3525 ;; Parameters:    Size  Location     Type
  3526 ;;		None
  3527 ;; Auto vars:     Size  Location     Type
  3528 ;;		None
  3529 ;; Return value:  Size  Location     Type
  3530 ;;                  1    wreg      void 
  3531 ;; Registers used:
  3532 ;;		wreg, status,2, status,0, cstack
  3533 ;; Tracked objects:
  3534 ;;		On entry : 0/0
  3535 ;;		On exit  : 0/0
  3536 ;;		Unchanged: 0/0
  3537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3538 ;;      Params:         0       0       0       0       0       0       0       0       0
  3539 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3540 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3541 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3542 ;;Total ram usage:        0 bytes
  3543 ;; Hardware stack levels used: 1
  3544 ;; Hardware stack levels required when called: 1
  3545 ;; This function calls:
  3546 ;;		_I2C_Master_Wait
  3547 ;; This function is called by:
  3548 ;;		_RTC_Init
  3549 ;;		_RTC_SetDateTime
  3550 ;;		_RTC_GetDateTime
  3551 ;; This function uses a non-reentrant model
  3552 ;;
  3553                           
  3554                           	psect	text18
  3555   00157C                     __ptext18:
  3556                           	callstack 0
  3557   00157C                     _I2C_Master_Stop:
  3558                           	callstack 28
  3559   00157C                     
  3560                           ;i2c.c: 28:     I2C_Master_Wait();
  3561   00157C  EC7D  F00A         	call	_I2C_Master_Wait	;wreg free
  3562   001580                     
  3563                           ;i2c.c: 29:     PEN = 1;
  3564   001580  84C5               	bsf	4037,2,c	;volatile
  3565   001582  0012               	return		;funcret
  3566   001584                     __end_of_I2C_Master_Stop:
  3567                           	callstack 0
  3568                           
  3569 ;; *************** function _I2C_Master_Start *****************
  3570 ;; Defined at:
  3571 ;;		line 17 in file "i2c.c"
  3572 ;; Parameters:    Size  Location     Type
  3573 ;;		None
  3574 ;; Auto vars:     Size  Location     Type
  3575 ;;		None
  3576 ;; Return value:  Size  Location     Type
  3577 ;;                  1    wreg      void 
  3578 ;; Registers used:
  3579 ;;		wreg, status,2, status,0, cstack
  3580 ;; Tracked objects:
  3581 ;;		On entry : 0/0
  3582 ;;		On exit  : 0/0
  3583 ;;		Unchanged: 0/0
  3584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3585 ;;      Params:         0       0       0       0       0       0       0       0       0
  3586 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3587 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3588 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3589 ;;Total ram usage:        0 bytes
  3590 ;; Hardware stack levels used: 1
  3591 ;; Hardware stack levels required when called: 1
  3592 ;; This function calls:
  3593 ;;		_I2C_Master_Wait
  3594 ;; This function is called by:
  3595 ;;		_RTC_Init
  3596 ;;		_RTC_SetDateTime
  3597 ;;		_RTC_GetDateTime
  3598 ;; This function uses a non-reentrant model
  3599 ;;
  3600                           
  3601                           	psect	text19
  3602   001584                     __ptext19:
  3603                           	callstack 0
  3604   001584                     _I2C_Master_Start:
  3605                           	callstack 28
  3606   001584                     
  3607                           ;i2c.c: 18:     I2C_Master_Wait();
  3608   001584  EC7D  F00A         	call	_I2C_Master_Wait	;wreg free
  3609   001588                     
  3610                           ;i2c.c: 19:     SEN = 1;
  3611   001588  80C5               	bsf	4037,0,c	;volatile
  3612   00158A  0012               	return		;funcret
  3613   00158C                     __end_of_I2C_Master_Start:
  3614                           	callstack 0
  3615                           
  3616 ;; *************** function _I2C_Master_RepeatedStart *****************
  3617 ;; Defined at:
  3618 ;;		line 22 in file "i2c.c"
  3619 ;; Parameters:    Size  Location     Type
  3620 ;;		None
  3621 ;; Auto vars:     Size  Location     Type
  3622 ;;		None
  3623 ;; Return value:  Size  Location     Type
  3624 ;;                  1    wreg      void 
  3625 ;; Registers used:
  3626 ;;		wreg, status,2, status,0, cstack
  3627 ;; Tracked objects:
  3628 ;;		On entry : 0/0
  3629 ;;		On exit  : 0/0
  3630 ;;		Unchanged: 0/0
  3631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3632 ;;      Params:         0       0       0       0       0       0       0       0       0
  3633 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3634 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3635 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3636 ;;Total ram usage:        0 bytes
  3637 ;; Hardware stack levels used: 1
  3638 ;; Hardware stack levels required when called: 1
  3639 ;; This function calls:
  3640 ;;		_I2C_Master_Wait
  3641 ;; This function is called by:
  3642 ;;		_RTC_Init
  3643 ;;		_RTC_GetDateTime
  3644 ;; This function uses a non-reentrant model
  3645 ;;
  3646                           
  3647                           	psect	text20
  3648   00158C                     __ptext20:
  3649                           	callstack 0
  3650   00158C                     _I2C_Master_RepeatedStart:
  3651                           	callstack 28
  3652   00158C                     
  3653                           ;i2c.c: 23:     I2C_Master_Wait();
  3654   00158C  EC7D  F00A         	call	_I2C_Master_Wait	;wreg free
  3655   001590                     
  3656                           ;i2c.c: 24:     RSEN = 1;
  3657   001590  82C5               	bsf	4037,1,c	;volatile
  3658   001592  0012               	return		;funcret
  3659   001594                     __end_of_I2C_Master_RepeatedStart:
  3660                           	callstack 0
  3661                           
  3662 ;; *************** function _I2C_Master_Read *****************
  3663 ;; Defined at:
  3664 ;;		line 39 in file "i2c.c"
  3665 ;; Parameters:    Size  Location     Type
  3666 ;;  a               2    1[COMRAM] unsigned short 
  3667 ;; Auto vars:     Size  Location     Type
  3668 ;;  temp            2    3[COMRAM] unsigned short 
  3669 ;; Return value:  Size  Location     Type
  3670 ;;                  2    1[COMRAM] unsigned short 
  3671 ;; Registers used:
  3672 ;;		wreg, status,2, status,0, cstack
  3673 ;; Tracked objects:
  3674 ;;		On entry : 0/0
  3675 ;;		On exit  : 0/0
  3676 ;;		Unchanged: 0/0
  3677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3678 ;;      Params:         2       0       0       0       0       0       0       0       0
  3679 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3680 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3681 ;;      Totals:         4       0       0       0       0       0       0       0       0
  3682 ;;Total ram usage:        4 bytes
  3683 ;; Hardware stack levels used: 1
  3684 ;; Hardware stack levels required when called: 1
  3685 ;; This function calls:
  3686 ;;		_I2C_Master_Wait
  3687 ;; This function is called by:
  3688 ;;		_RTC_Init
  3689 ;;		_RTC_GetDateTime
  3690 ;; This function uses a non-reentrant model
  3691 ;;
  3692                           
  3693                           	psect	text21
  3694   00142A                     __ptext21:
  3695                           	callstack 0
  3696   00142A                     _I2C_Master_Read:
  3697                           	callstack 28
  3698   00142A                     
  3699                           ;i2c.c: 40:     unsigned short temp;;i2c.c: 41:     I2C_Master_Wait();
  3700   00142A  EC7D  F00A         	call	_I2C_Master_Wait	;wreg free
  3701   00142E                     
  3702                           ;i2c.c: 42:     RCEN = 1;
  3703   00142E  86C5               	bsf	4037,3,c	;volatile
  3704                           
  3705                           ;i2c.c: 43:     I2C_Master_Wait();
  3706   001430  EC7D  F00A         	call	_I2C_Master_Wait	;wreg free
  3707   001434                     
  3708                           ;i2c.c: 44:     temp = SSPBUF;
  3709   001434  CFC9 F004          	movff	4041,I2C_Master_Read@temp	;volatile
  3710   001438  6A05               	clrf	(I2C_Master_Read@temp+1)^0,c
  3711                           
  3712                           ;i2c.c: 45:     I2C_Master_Wait();
  3713   00143A  EC7D  F00A         	call	_I2C_Master_Wait	;wreg free
  3714   00143E                     
  3715                           ;i2c.c: 46:     ACKDT = (a)?0:1;
  3716   00143E  5002               	movf	I2C_Master_Read@a^0,w,c
  3717   001440  1003               	iorwf	(I2C_Master_Read@a+1)^0,w,c
  3718   001442  B4D8               	btfsc	status,2,c
  3719   001444  EF26  F00A         	goto	u931
  3720   001448  EF29  F00A         	goto	u930
  3721   00144C                     u931:
  3722   00144C  8AC5               	bsf	4037,5,c	;volatile
  3723   00144E  EF2A  F00A         	goto	u945
  3724   001452                     u930:
  3725   001452  9AC5               	bcf	4037,5,c	;volatile
  3726   001454                     u945:
  3727   001454                     
  3728                           ;i2c.c: 47:     ACKEN = 1;
  3729   001454  88C5               	bsf	4037,4,c	;volatile
  3730   001456                     
  3731                           ;i2c.c: 48:     return temp;
  3732   001456  C004  F002         	movff	I2C_Master_Read@temp,?_I2C_Master_Read
  3733   00145A  C005  F003         	movff	I2C_Master_Read@temp+1,?_I2C_Master_Read+1
  3734   00145E  0012               	return		;funcret
  3735   001460                     __end_of_I2C_Master_Read:
  3736                           	callstack 0
  3737                           
  3738 ;; *************** function _I2C_Master_Wait *****************
  3739 ;; Defined at:
  3740 ;;		line 13 in file "i2c.c"
  3741 ;; Parameters:    Size  Location     Type
  3742 ;;		None
  3743 ;; Auto vars:     Size  Location     Type
  3744 ;;		None
  3745 ;; Return value:  Size  Location     Type
  3746 ;;                  1    wreg      void 
  3747 ;; Registers used:
  3748 ;;		wreg, status,2, status,0
  3749 ;; Tracked objects:
  3750 ;;		On entry : 0/0
  3751 ;;		On exit  : 0/0
  3752 ;;		Unchanged: 0/0
  3753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3754 ;;      Params:         0       0       0       0       0       0       0       0       0
  3755 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3756 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3757 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3758 ;;Total ram usage:        1 bytes
  3759 ;; Hardware stack levels used: 1
  3760 ;; This function calls:
  3761 ;;		Nothing
  3762 ;; This function is called by:
  3763 ;;		_I2C_Master_Start
  3764 ;;		_I2C_Master_RepeatedStart
  3765 ;;		_I2C_Master_Stop
  3766 ;;		_I2C_Master_Write
  3767 ;;		_I2C_Master_Read
  3768 ;; This function uses a non-reentrant model
  3769 ;;
  3770                           
  3771                           	psect	text22
  3772   0014FA                     __ptext22:
  3773                           	callstack 0
  3774   0014FA                     _I2C_Master_Wait:
  3775                           	callstack 28
  3776   0014FA                     l1116:
  3777   0014FA  CFC5 F001          	movff	4037,??_I2C_Master_Wait	;volatile
  3778   0014FE  0E1F               	movlw	31
  3779   001500  1601               	andwf	??_I2C_Master_Wait^0,f,c
  3780   001502  A4D8               	btfss	status,2,c
  3781   001504  EF86  F00A         	goto	u351
  3782   001508  EF88  F00A         	goto	u350
  3783   00150C                     u351:
  3784   00150C  EF7D  F00A         	goto	l1116
  3785   001510                     u350:
  3786   001510  B4C7               	btfsc	199,2,c	;volatile
  3787   001512  EF8D  F00A         	goto	u361
  3788   001516  EF8F  F00A         	goto	u360
  3789   00151A                     u361:
  3790   00151A  EF7D  F00A         	goto	l1116
  3791   00151E                     u360:
  3792   00151E  0012               	return		;funcret
  3793   001520                     __end_of_I2C_Master_Wait:
  3794                           	callstack 0
  3795                           
  3796 ;; *************** function _BCD2DEC *****************
  3797 ;; Defined at:
  3798 ;;		line 6 in file "ds1307.c"
  3799 ;; Parameters:    Size  Location     Type
  3800 ;;  val             1    wreg     unsigned char 
  3801 ;; Auto vars:     Size  Location     Type
  3802 ;;  val             1    1[COMRAM] unsigned char 
  3803 ;; Return value:  Size  Location     Type
  3804 ;;                  1    wreg      unsigned char 
  3805 ;; Registers used:
  3806 ;;		wreg, status,2, status,0, prodl, prodh
  3807 ;; Tracked objects:
  3808 ;;		On entry : 0/0
  3809 ;;		On exit  : 0/0
  3810 ;;		Unchanged: 0/0
  3811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3812 ;;      Params:         0       0       0       0       0       0       0       0       0
  3813 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3814 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3815 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3816 ;;Total ram usage:        2 bytes
  3817 ;; Hardware stack levels used: 1
  3818 ;; This function calls:
  3819 ;;		Nothing
  3820 ;; This function is called by:
  3821 ;;		_RTC_GetDateTime
  3822 ;; This function uses a non-reentrant model
  3823 ;;
  3824                           
  3825                           	psect	text23
  3826   001558                     __ptext23:
  3827                           	callstack 0
  3828   001558                     _BCD2DEC:
  3829                           	callstack 29
  3830                           
  3831                           ;incstack = 0
  3832                           ;BCD2DEC@val stored from wreg
  3833   001558  6E02               	movwf	BCD2DEC@val^0,c
  3834   00155A                     
  3835                           ;ds1307.c: 7:     return ((val >> 4) * 10) + (val & 0x0F);
  3836   00155A  C002  F001         	movff	BCD2DEC@val,??_BCD2DEC
  3837   00155E  0E0F               	movlw	15
  3838   001560  1601               	andwf	??_BCD2DEC^0,f,c
  3839   001562  3802               	swapf	BCD2DEC@val^0,w,c
  3840   001564  0B0F               	andlw	15
  3841   001566  0D0A               	mullw	10
  3842   001568  50F3               	movf	243,w,c
  3843   00156A  2401               	addwf	??_BCD2DEC^0,w,c
  3844   00156C  0012               	return		;funcret
  3845   00156E                     __end_of_BCD2DEC:
  3846                           	callstack 0
  3847                           
  3848 ;; *************** function _LCD_String_xy *****************
  3849 ;; Defined at:
  3850 ;;		line 53 in file "LCD.c"
  3851 ;; Parameters:    Size  Location     Type
  3852 ;;  row             1    wreg     unsigned char 
  3853 ;;  pos             1    4[COMRAM] unsigned char 
  3854 ;;  msg             2    5[COMRAM] PTR const unsigned char 
  3855 ;;		 -> main@buffer(17), STR_1(17), 
  3856 ;; Auto vars:     Size  Location     Type
  3857 ;;  row             1    7[COMRAM] unsigned char 
  3858 ;;  location        1    8[COMRAM] unsigned char 
  3859 ;; Return value:  Size  Location     Type
  3860 ;;                  1    wreg      void 
  3861 ;; Registers used:
  3862 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3863 ;; Tracked objects:
  3864 ;;		On entry : 0/0
  3865 ;;		On exit  : 0/0
  3866 ;;		Unchanged: 0/0
  3867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3868 ;;      Params:         3       0       0       0       0       0       0       0       0
  3869 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3870 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3871 ;;      Totals:         5       0       0       0       0       0       0       0       0
  3872 ;;Total ram usage:        5 bytes
  3873 ;; Hardware stack levels used: 1
  3874 ;; Hardware stack levels required when called: 2
  3875 ;; This function calls:
  3876 ;;		_LCD_Command
  3877 ;;		_LCD_String
  3878 ;; This function is called by:
  3879 ;;		_main
  3880 ;; This function uses a non-reentrant model
  3881 ;;
  3882                           
  3883                           	psect	text24
  3884   0013BA                     __ptext24:
  3885                           	callstack 0
  3886   0013BA                     _LCD_String_xy:
  3887                           	callstack 28
  3888                           
  3889                           ;incstack = 0
  3890                           ;LCD_String_xy@row stored from wreg
  3891   0013BA  6E08               	movwf	LCD_String_xy@row^0,c
  3892   0013BC                     
  3893                           ;LCD.c: 55:     if (row == 0) {
  3894   0013BC  5008               	movf	LCD_String_xy@row^0,w,c
  3895   0013BE  A4D8               	btfss	status,2,c
  3896   0013C0  EFE4  F009         	goto	u1041
  3897   0013C4  EFE6  F009         	goto	u1040
  3898   0013C8                     u1041:
  3899   0013C8  EFEC  F009         	goto	l1778
  3900   0013CC                     u1040:
  3901   0013CC                     
  3902                           ;LCD.c: 56:         location = 0x80 | (pos & 0x0F);
  3903   0013CC  5005               	movf	LCD_String_xy@pos^0,w,c
  3904   0013CE  0B0F               	andlw	15
  3905   0013D0  0980               	iorlw	128
  3906   0013D2  6E09               	movwf	LCD_String_xy@location^0,c
  3907                           
  3908                           ;LCD.c: 57:     } else {
  3909   0013D4  EFF0  F009         	goto	l1780
  3910   0013D8                     l1778:
  3911                           
  3912                           ;LCD.c: 58:         location = 0xC0 | (pos & 0x0F);
  3913   0013D8  5005               	movf	LCD_String_xy@pos^0,w,c
  3914   0013DA  0B0F               	andlw	15
  3915   0013DC  09C0               	iorlw	192
  3916   0013DE  6E09               	movwf	LCD_String_xy@location^0,c
  3917   0013E0                     l1780:
  3918                           
  3919                           ;LCD.c: 60:     LCD_Command(location);
  3920   0013E0  5009               	movf	LCD_String_xy@location^0,w,c
  3921   0013E2  EC76  F009         	call	_LCD_Command
  3922   0013E6                     
  3923                           ;LCD.c: 61:     LCD_String(msg);
  3924   0013E6  C006  F003         	movff	LCD_String_xy@msg,LCD_String@msg
  3925   0013EA  C007  F004         	movff	LCD_String_xy@msg+1,LCD_String@msg+1
  3926   0013EE  ECF1  F008         	call	_LCD_String	;wreg free
  3927   0013F2  0012               	return		;funcret
  3928   0013F4                     __end_of_LCD_String_xy:
  3929                           	callstack 0
  3930                           
  3931 ;; *************** function _LCD_String *****************
  3932 ;; Defined at:
  3933 ;;		line 45 in file "LCD.c"
  3934 ;; Parameters:    Size  Location     Type
  3935 ;;  msg             2    2[COMRAM] PTR const unsigned char 
  3936 ;;		 -> main@buffer(17), STR_1(17), 
  3937 ;; Auto vars:     Size  Location     Type
  3938 ;;		None
  3939 ;; Return value:  Size  Location     Type
  3940 ;;                  1    wreg      void 
  3941 ;; Registers used:
  3942 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3943 ;; Tracked objects:
  3944 ;;		On entry : 0/0
  3945 ;;		On exit  : 0/0
  3946 ;;		Unchanged: 0/0
  3947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3948 ;;      Params:         2       0       0       0       0       0       0       0       0
  3949 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3950 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3951 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3952 ;;Total ram usage:        2 bytes
  3953 ;; Hardware stack levels used: 1
  3954 ;; Hardware stack levels required when called: 1
  3955 ;; This function calls:
  3956 ;;		_LCD_Char
  3957 ;; This function is called by:
  3958 ;;		_LCD_String_xy
  3959 ;; This function uses a non-reentrant model
  3960 ;;
  3961                           
  3962                           	psect	text25
  3963   0011E2                     __ptext25:
  3964                           	callstack 0
  3965   0011E2                     _LCD_String:
  3966                           	callstack 28
  3967   0011E2                     
  3968                           ;LCD.c: 45: void LCD_String(const char *msg);LCD.c: 46: {;LCD.c: 47:     while((*msg) !=
      +                           0) {
  3969   0011E2  EF07  F009         	goto	l1686
  3970   0011E6                     l1682:
  3971                           
  3972                           ;LCD.c: 48:         LCD_Char(*msg);
  3973   0011E6  C003  FFF6         	movff	LCD_String@msg,tblptrl
  3974   0011EA  C004  FFF7         	movff	LCD_String@msg+1,tblptrh
  3975   0011EE  6AF8               	clrf	tblptru,c
  3976   0011F0  0E07               	movlw	(high __ramtop+-1)
  3977   0011F2  64F7               	cpfsgt	tblptrh,c
  3978   0011F4  D003               	bra	u957
  3979   0011F6  0008               	tblrd		*
  3980   0011F8  50F5               	movf	tablat,w,c
  3981   0011FA  D005               	bra	u950
  3982   0011FC                     u957:
  3983   0011FC  CFF6 FFE1          	movff	tblptrl,fsr1l
  3984   001200  CFF7 FFE2          	movff	tblptrh,fsr1h
  3985   001204  50E7               	movf	indf1,w,c
  3986   001206                     u950:
  3987   001206  EC4C  F009         	call	_LCD_Char
  3988   00120A                     
  3989                           ;LCD.c: 49:         msg++;
  3990   00120A  4A03               	infsnz	LCD_String@msg^0,f,c
  3991   00120C  2A04               	incf	(LCD_String@msg+1)^0,f,c
  3992   00120E                     l1686:
  3993                           
  3994                           ;LCD.c: 47:     while((*msg) != 0) {
  3995   00120E  C003  FFF6         	movff	LCD_String@msg,tblptrl
  3996   001212  C004  FFF7         	movff	LCD_String@msg+1,tblptrh
  3997   001216  6AF8               	clrf	tblptru,c
  3998   001218  0E07               	movlw	(high __ramtop+-1)
  3999   00121A  64F7               	cpfsgt	tblptrh,c
  4000   00121C  D003               	bra	u967
  4001   00121E  0008               	tblrd		*
  4002   001220  50F5               	movf	tablat,w,c
  4003   001222  D005               	bra	u960
  4004   001224                     u967:
  4005   001224  CFF6 FFE1          	movff	tblptrl,fsr1l
  4006   001228  CFF7 FFE2          	movff	tblptrh,fsr1h
  4007   00122C  50E7               	movf	indf1,w,c
  4008   00122E                     u960:
  4009   00122E  0900               	iorlw	0
  4010   001230  A4D8               	btfss	status,2,c
  4011   001232  EF1D  F009         	goto	u971
  4012   001236  EF1F  F009         	goto	u970
  4013   00123A                     u971:
  4014   00123A  EFF3  F008         	goto	l1682
  4015   00123E                     u970:
  4016   00123E  0012               	return		;funcret
  4017   001240                     __end_of_LCD_String:
  4018                           	callstack 0
  4019                           
  4020 ;; *************** function _LCD_Char *****************
  4021 ;; Defined at:
  4022 ;;		line 30 in file "LCD.c"
  4023 ;; Parameters:    Size  Location     Type
  4024 ;;  dat             1    wreg     unsigned char 
  4025 ;; Auto vars:     Size  Location     Type
  4026 ;;  dat             1    1[COMRAM] unsigned char 
  4027 ;; Return value:  Size  Location     Type
  4028 ;;                  1    wreg      void 
  4029 ;; Registers used:
  4030 ;;		wreg, status,2, status,0
  4031 ;; Tracked objects:
  4032 ;;		On entry : 0/0
  4033 ;;		On exit  : 0/0
  4034 ;;		Unchanged: 0/0
  4035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4036 ;;      Params:         0       0       0       0       0       0       0       0       0
  4037 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4038 ;;      Temps:          1       0       0       0       0       0       0       0       0
  4039 ;;      Totals:         2       0       0       0       0       0       0       0       0
  4040 ;;Total ram usage:        2 bytes
  4041 ;; Hardware stack levels used: 1
  4042 ;; This function calls:
  4043 ;;		Nothing
  4044 ;; This function is called by:
  4045 ;;		_LCD_String
  4046 ;; This function uses a non-reentrant model
  4047 ;;
  4048                           
  4049                           	psect	text26
  4050   001298                     __ptext26:
  4051                           	callstack 0
  4052   001298                     _LCD_Char:
  4053                           	callstack 28
  4054                           
  4055                           ;incstack = 0
  4056                           ;LCD_Char@dat stored from wreg
  4057   001298  6E02               	movwf	LCD_Char@dat^0,c
  4058   00129A                     
  4059                           ;LCD.c: 30: void LCD_Char(unsigned char dat);LCD.c: 31: {;LCD.c: 32:     LATD = (LATD & 
      +                          0x0f) | (0xF0 & dat);
  4060   00129A  C002  F001         	movff	LCD_Char@dat,??_LCD_Char
  4061   00129E  0EF0               	movlw	240
  4062   0012A0  1601               	andwf	??_LCD_Char^0,f,c
  4063   0012A2  508C               	movf	140,w,c	;volatile
  4064   0012A4  0B0F               	andlw	15
  4065   0012A6  1001               	iorwf	??_LCD_Char^0,w,c
  4066   0012A8  6E8C               	movwf	140,c	;volatile
  4067   0012AA                     
  4068                           ;LCD.c: 33:     LATD0 = 1;
  4069   0012AA  808C               	bsf	3980,0,c	;volatile
  4070   0012AC                     
  4071                           ;LCD.c: 34:     LATD2 = 1;
  4072   0012AC  848C               	bsf	3980,2,c	;volatile
  4073   0012AE                     
  4074                           ;LCD.c: 35:     __nop();
  4075   0012AE  0000               	nop	
  4076   0012B0                     
  4077                           ;LCD.c: 36:     LATD2 = 0;
  4078   0012B0  948C               	bcf	3980,2,c	;volatile
  4079   0012B2                     
  4080                           ;LCD.c: 37:     _delay((unsigned long)((1)*(8000000/4000.0)));
  4081   0012B2  0E03               	movlw	3
  4082   0012B4  6E01               	movwf	??_LCD_Char^0,c
  4083   0012B6  0E98               	movlw	152
  4084   0012B8                     u1067:
  4085   0012B8  2EE8               	decfsz	wreg,f,c
  4086   0012BA  D7FE               	bra	u1067
  4087   0012BC  2E01               	decfsz	??_LCD_Char^0,f,c
  4088   0012BE  D7FC               	bra	u1067
  4089   0012C0                     
  4090                           ;LCD.c: 38:     LATD = (LATD & 0x0f) | ((dat << 4) & 0xF0);
  4091   0012C0  C002  F001         	movff	LCD_Char@dat,??_LCD_Char
  4092   0012C4  3A01               	swapf	??_LCD_Char^0,f,c
  4093   0012C6  0EF0               	movlw	240
  4094   0012C8  1601               	andwf	??_LCD_Char^0,f,c
  4095   0012CA  0EF0               	movlw	240
  4096   0012CC  1601               	andwf	??_LCD_Char^0,f,c
  4097   0012CE  508C               	movf	140,w,c	;volatile
  4098   0012D0  0B0F               	andlw	15
  4099   0012D2  1001               	iorwf	??_LCD_Char^0,w,c
  4100   0012D4  6E8C               	movwf	140,c	;volatile
  4101   0012D6                     
  4102                           ;LCD.c: 39:     LATD2 = 1;
  4103   0012D6  848C               	bsf	3980,2,c	;volatile
  4104   0012D8                     
  4105                           ;LCD.c: 40:     __nop();
  4106   0012D8  0000               	nop	
  4107   0012DA                     
  4108                           ;LCD.c: 41:     LATD2 = 0;
  4109   0012DA  948C               	bcf	3980,2,c	;volatile
  4110                           
  4111                           ;LCD.c: 42:     _delay((unsigned long)((3)*(8000000/4000.0)));
  4112   0012DC  0E08               	movlw	8
  4113   0012DE  6E01               	movwf	??_LCD_Char^0,c
  4114   0012E0  0ECA               	movlw	202
  4115   0012E2                     u1077:
  4116   0012E2  2EE8               	decfsz	wreg,f,c
  4117   0012E4  D7FE               	bra	u1077
  4118   0012E6  2E01               	decfsz	??_LCD_Char^0,f,c
  4119   0012E8  D7FC               	bra	u1077
  4120   0012EA  0012               	return		;funcret
  4121   0012EC                     __end_of_LCD_Char:
  4122                           	callstack 0
  4123                           
  4124 ;; *************** function _LCD_Init *****************
  4125 ;; Defined at:
  4126 ;;		line 4 in file "LCD.c"
  4127 ;; Parameters:    Size  Location     Type
  4128 ;;		None
  4129 ;; Auto vars:     Size  Location     Type
  4130 ;;		None
  4131 ;; Return value:  Size  Location     Type
  4132 ;;                  1    wreg      void 
  4133 ;; Registers used:
  4134 ;;		wreg, status,2, status,0, cstack
  4135 ;; Tracked objects:
  4136 ;;		On entry : 0/0
  4137 ;;		On exit  : 0/0
  4138 ;;		Unchanged: 0/0
  4139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4140 ;;      Params:         0       0       0       0       0       0       0       0       0
  4141 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4142 ;;      Temps:          1       0       0       0       0       0       0       0       0
  4143 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4144 ;;Total ram usage:        1 bytes
  4145 ;; Hardware stack levels used: 1
  4146 ;; Hardware stack levels required when called: 1
  4147 ;; This function calls:
  4148 ;;		_LCD_Command
  4149 ;; This function is called by:
  4150 ;;		_main
  4151 ;; This function uses a non-reentrant model
  4152 ;;
  4153                           
  4154                           	psect	text27
  4155   0014C8                     __ptext27:
  4156                           	callstack 0
  4157   0014C8                     _LCD_Init:
  4158                           	callstack 29
  4159   0014C8                     
  4160                           ;LCD.c: 6:     TRISD = 0;
  4161   0014C8  6A95               	clrf	149,c	;volatile
  4162   0014CA                     
  4163                           ;LCD.c: 7:     _delay((unsigned long)((15)*(8000000/4000.0)));
  4164   0014CA  0E27               	movlw	39
  4165   0014CC  6E03               	movwf	??_LCD_Init^0,c
  4166   0014CE  0EF5               	movlw	245
  4167   0014D0                     u1087:
  4168   0014D0  2EE8               	decfsz	wreg,f,c
  4169   0014D2  D7FE               	bra	u1087
  4170   0014D4  2E03               	decfsz	??_LCD_Init^0,f,c
  4171   0014D6  D7FC               	bra	u1087
  4172   0014D8  0000               	nop	
  4173   0014DA                     
  4174                           ;LCD.c: 8:     LCD_Command(0x02);
  4175   0014DA  0E02               	movlw	2
  4176   0014DC  EC76  F009         	call	_LCD_Command
  4177   0014E0                     
  4178                           ;LCD.c: 9:     LCD_Command(0x28);
  4179   0014E0  0E28               	movlw	40
  4180   0014E2  EC76  F009         	call	_LCD_Command
  4181   0014E6                     
  4182                           ;LCD.c: 10:     LCD_Command(0x01);
  4183   0014E6  0E01               	movlw	1
  4184   0014E8  EC76  F009         	call	_LCD_Command
  4185   0014EC                     
  4186                           ;LCD.c: 11:     LCD_Command(0x0c);
  4187   0014EC  0E0C               	movlw	12
  4188   0014EE  EC76  F009         	call	_LCD_Command
  4189   0014F2                     
  4190                           ;LCD.c: 12:     LCD_Command(0x06);
  4191   0014F2  0E06               	movlw	6
  4192   0014F4  EC76  F009         	call	_LCD_Command
  4193   0014F8  0012               	return		;funcret
  4194   0014FA                     __end_of_LCD_Init:
  4195                           	callstack 0
  4196                           
  4197 ;; *************** function _LCD_Clear *****************
  4198 ;; Defined at:
  4199 ;;		line 64 in file "LCD.c"
  4200 ;; Parameters:    Size  Location     Type
  4201 ;;		None
  4202 ;; Auto vars:     Size  Location     Type
  4203 ;;		None
  4204 ;; Return value:  Size  Location     Type
  4205 ;;                  1    wreg      void 
  4206 ;; Registers used:
  4207 ;;		wreg, status,2, status,0, cstack
  4208 ;; Tracked objects:
  4209 ;;		On entry : 0/0
  4210 ;;		On exit  : 0/0
  4211 ;;		Unchanged: 0/0
  4212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4213 ;;      Params:         0       0       0       0       0       0       0       0       0
  4214 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4215 ;;      Temps:          1       0       0       0       0       0       0       0       0
  4216 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4217 ;;Total ram usage:        1 bytes
  4218 ;; Hardware stack levels used: 1
  4219 ;; Hardware stack levels required when called: 1
  4220 ;; This function calls:
  4221 ;;		_LCD_Command
  4222 ;; This function is called by:
  4223 ;;		_main
  4224 ;; This function uses a non-reentrant model
  4225 ;;
  4226                           
  4227                           	psect	text28
  4228   001540                     __ptext28:
  4229                           	callstack 0
  4230   001540                     _LCD_Clear:
  4231                           	callstack 29
  4232   001540                     
  4233                           ;LCD.c: 66:     LCD_Command(0x01);
  4234   001540  0E01               	movlw	1
  4235   001542  EC76  F009         	call	_LCD_Command
  4236   001546                     
  4237                           ;LCD.c: 67:     _delay((unsigned long)((2)*(8000000/4000.0)));
  4238   001546  0E06               	movlw	6
  4239   001548  6E03               	movwf	??_LCD_Clear^0,c
  4240   00154A  0E30               	movlw	48
  4241   00154C                     u1097:
  4242   00154C  2EE8               	decfsz	wreg,f,c
  4243   00154E  D7FE               	bra	u1097
  4244   001550  2E03               	decfsz	??_LCD_Clear^0,f,c
  4245   001552  D7FC               	bra	u1097
  4246   001554  D000               	nop2	
  4247   001556  0012               	return		;funcret
  4248   001558                     __end_of_LCD_Clear:
  4249                           	callstack 0
  4250                           
  4251 ;; *************** function _LCD_Command *****************
  4252 ;; Defined at:
  4253 ;;		line 15 in file "LCD.c"
  4254 ;; Parameters:    Size  Location     Type
  4255 ;;  cmd             1    wreg     unsigned char 
  4256 ;; Auto vars:     Size  Location     Type
  4257 ;;  cmd             1    1[COMRAM] unsigned char 
  4258 ;; Return value:  Size  Location     Type
  4259 ;;                  1    wreg      void 
  4260 ;; Registers used:
  4261 ;;		wreg, status,2, status,0
  4262 ;; Tracked objects:
  4263 ;;		On entry : 0/0
  4264 ;;		On exit  : 0/0
  4265 ;;		Unchanged: 0/0
  4266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4267 ;;      Params:         0       0       0       0       0       0       0       0       0
  4268 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4269 ;;      Temps:          1       0       0       0       0       0       0       0       0
  4270 ;;      Totals:         2       0       0       0       0       0       0       0       0
  4271 ;;Total ram usage:        2 bytes
  4272 ;; Hardware stack levels used: 1
  4273 ;; This function calls:
  4274 ;;		Nothing
  4275 ;; This function is called by:
  4276 ;;		_LCD_Init
  4277 ;;		_LCD_String_xy
  4278 ;;		_LCD_Clear
  4279 ;; This function uses a non-reentrant model
  4280 ;;
  4281                           
  4282                           	psect	text29
  4283   0012EC                     __ptext29:
  4284                           	callstack 0
  4285   0012EC                     _LCD_Command:
  4286                           	callstack 29
  4287                           
  4288                           ;incstack = 0
  4289                           ;LCD_Command@cmd stored from wreg
  4290   0012EC  6E02               	movwf	LCD_Command@cmd^0,c
  4291   0012EE                     
  4292                           ;LCD.c: 15: void LCD_Command(unsigned char cmd);LCD.c: 16: {;LCD.c: 17:     LATD = (LATD
      +                           & 0x0f) | (0xF0 & cmd);
  4293   0012EE  C002  F001         	movff	LCD_Command@cmd,??_LCD_Command
  4294   0012F2  0EF0               	movlw	240
  4295   0012F4  1601               	andwf	??_LCD_Command^0,f,c
  4296   0012F6  508C               	movf	140,w,c	;volatile
  4297   0012F8  0B0F               	andlw	15
  4298   0012FA  1001               	iorwf	??_LCD_Command^0,w,c
  4299   0012FC  6E8C               	movwf	140,c	;volatile
  4300   0012FE                     
  4301                           ;LCD.c: 18:     LATD0 = 0;
  4302   0012FE  908C               	bcf	3980,0,c	;volatile
  4303   001300                     
  4304                           ;LCD.c: 19:     LATD2 = 1;
  4305   001300  848C               	bsf	3980,2,c	;volatile
  4306   001302                     
  4307                           ;LCD.c: 20:     __nop();
  4308   001302  0000               	nop	
  4309   001304                     
  4310                           ;LCD.c: 21:     LATD2 = 0;
  4311   001304  948C               	bcf	3980,2,c	;volatile
  4312   001306                     
  4313                           ;LCD.c: 22:     _delay((unsigned long)((1)*(8000000/4000.0)));
  4314   001306  0E03               	movlw	3
  4315   001308  6E01               	movwf	??_LCD_Command^0,c
  4316   00130A  0E98               	movlw	152
  4317   00130C                     u1107:
  4318   00130C  2EE8               	decfsz	wreg,f,c
  4319   00130E  D7FE               	bra	u1107
  4320   001310  2E01               	decfsz	??_LCD_Command^0,f,c
  4321   001312  D7FC               	bra	u1107
  4322   001314                     
  4323                           ;LCD.c: 23:     LATD = (LATD & 0x0f) | ((cmd << 4) & 0xF0);
  4324   001314  C002  F001         	movff	LCD_Command@cmd,??_LCD_Command
  4325   001318  3A01               	swapf	??_LCD_Command^0,f,c
  4326   00131A  0EF0               	movlw	240
  4327   00131C  1601               	andwf	??_LCD_Command^0,f,c
  4328   00131E  0EF0               	movlw	240
  4329   001320  1601               	andwf	??_LCD_Command^0,f,c
  4330   001322  508C               	movf	140,w,c	;volatile
  4331   001324  0B0F               	andlw	15
  4332   001326  1001               	iorwf	??_LCD_Command^0,w,c
  4333   001328  6E8C               	movwf	140,c	;volatile
  4334   00132A                     
  4335                           ;LCD.c: 24:     LATD2 = 1;
  4336   00132A  848C               	bsf	3980,2,c	;volatile
  4337   00132C                     
  4338                           ;LCD.c: 25:     __nop();
  4339   00132C  0000               	nop	
  4340   00132E                     
  4341                           ;LCD.c: 26:     LATD2 = 0;
  4342   00132E  948C               	bcf	3980,2,c	;volatile
  4343                           
  4344                           ;LCD.c: 27:     _delay((unsigned long)((3)*(8000000/4000.0)));
  4345   001330  0E08               	movlw	8
  4346   001332  6E01               	movwf	??_LCD_Command^0,c
  4347   001334  0ECA               	movlw	202
  4348   001336                     u1117:
  4349   001336  2EE8               	decfsz	wreg,f,c
  4350   001338  D7FE               	bra	u1117
  4351   00133A  2E01               	decfsz	??_LCD_Command^0,f,c
  4352   00133C  D7FC               	bra	u1117
  4353   00133E  0012               	return		;funcret
  4354   001340                     __end_of_LCD_Command:
  4355                           	callstack 0
  4356                           
  4357 ;; *************** function _I2C_Master_Init *****************
  4358 ;; Defined at:
  4359 ;;		line 4 in file "i2c.c"
  4360 ;; Parameters:    Size  Location     Type
  4361 ;;  c               4   13[COMRAM] const unsigned long 
  4362 ;; Auto vars:     Size  Location     Type
  4363 ;;		None
  4364 ;; Return value:  Size  Location     Type
  4365 ;;                  1    wreg      void 
  4366 ;; Registers used:
  4367 ;;		wreg, status,2, status,0, cstack
  4368 ;; Tracked objects:
  4369 ;;		On entry : 0/0
  4370 ;;		On exit  : 0/0
  4371 ;;		Unchanged: 0/0
  4372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4373 ;;      Params:         4       0       0       0       0       0       0       0       0
  4374 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4375 ;;      Temps:          4       0       0       0       0       0       0       0       0
  4376 ;;      Totals:         8       0       0       0       0       0       0       0       0
  4377 ;;Total ram usage:        8 bytes
  4378 ;; Hardware stack levels used: 1
  4379 ;; Hardware stack levels required when called: 1
  4380 ;; This function calls:
  4381 ;;		___lldiv
  4382 ;; This function is called by:
  4383 ;;		_main
  4384 ;; This function uses a non-reentrant model
  4385 ;;
  4386                           
  4387                           	psect	text30
  4388   001240                     __ptext30:
  4389                           	callstack 0
  4390   001240                     _I2C_Master_Init:
  4391                           	callstack 29
  4392   001240                     
  4393                           ;i2c.c: 5:     TRISB0 = 1;
  4394   001240  8093               	bsf	3987,0,c	;volatile
  4395                           
  4396                           ;i2c.c: 6:     TRISB1 = 1;
  4397   001242  8293               	bsf	3987,1,c	;volatile
  4398   001244                     
  4399                           ;i2c.c: 7:     SSPCON1 = 0b00101000;
  4400   001244  0E28               	movlw	40
  4401   001246  6EC6               	movwf	198,c	;volatile
  4402   001248                     
  4403                           ;i2c.c: 8:     SSPCON2 = 0;
  4404   001248  6AC5               	clrf	197,c	;volatile
  4405   00124A                     
  4406                           ;i2c.c: 9:     SSPADD = (8000000 / (4 * c)) - 1;
  4407   00124A  0E00               	movlw	0
  4408   00124C  6E01               	movwf	___lldiv@dividend^0,c
  4409   00124E  0E12               	movlw	18
  4410   001250  6E02               	movwf	(___lldiv@dividend+1)^0,c
  4411   001252  0E7A               	movlw	122
  4412   001254  6E03               	movwf	(___lldiv@dividend+2)^0,c
  4413   001256  0E00               	movlw	0
  4414   001258  6E04               	movwf	(___lldiv@dividend+3)^0,c
  4415   00125A  C00E  F012         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  4416   00125E  C00F  F013         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  4417   001262  C010  F014         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  4418   001266  C011  F015         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  4419   00126A  0E02               	movlw	2
  4420   00126C                     u1035:
  4421   00126C  90D8               	bcf	status,0,c
  4422   00126E  3612               	rlcf	??_I2C_Master_Init^0,f,c
  4423   001270  3613               	rlcf	(??_I2C_Master_Init+1)^0,f,c
  4424   001272  3614               	rlcf	(??_I2C_Master_Init+2)^0,f,c
  4425   001274  3615               	rlcf	(??_I2C_Master_Init+3)^0,f,c
  4426   001276  2EE8               	decfsz	wreg,f,c
  4427   001278  EF36  F009         	goto	u1035
  4428   00127C  C012  F005         	movff	??_I2C_Master_Init,___lldiv@divisor
  4429   001280  C013  F006         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  4430   001284  C014  F007         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  4431   001288  C015  F008         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  4432   00128C  EC19  F008         	call	___lldiv	;wreg free
  4433   001290  0401               	decf	?___lldiv^0,w,c
  4434   001292  6EC8               	movwf	200,c	;volatile
  4435   001294                     
  4436                           ;i2c.c: 10:     SSPSTAT = 0;
  4437   001294  6AC7               	clrf	199,c	;volatile
  4438   001296  0012               	return		;funcret
  4439   001298                     __end_of_I2C_Master_Init:
  4440                           	callstack 0
  4441                           
  4442 ;; *************** function ___lldiv *****************
  4443 ;; Defined at:
  4444 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\__lldiv.c"
  4445 ;; Parameters:    Size  Location     Type
  4446 ;;  dividend        4    0[COMRAM] unsigned long 
  4447 ;;  divisor         4    4[COMRAM] unsigned long 
  4448 ;; Auto vars:     Size  Location     Type
  4449 ;;  quotient        4    8[COMRAM] unsigned long 
  4450 ;;  counter         1   12[COMRAM] unsigned char 
  4451 ;; Return value:  Size  Location     Type
  4452 ;;                  4    0[COMRAM] unsigned long 
  4453 ;; Registers used:
  4454 ;;		wreg, status,2, status,0
  4455 ;; Tracked objects:
  4456 ;;		On entry : 0/0
  4457 ;;		On exit  : 0/0
  4458 ;;		Unchanged: 0/0
  4459 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4460 ;;      Params:         8       0       0       0       0       0       0       0       0
  4461 ;;      Locals:         5       0       0       0       0       0       0       0       0
  4462 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4463 ;;      Totals:        13       0       0       0       0       0       0       0       0
  4464 ;;Total ram usage:       13 bytes
  4465 ;; Hardware stack levels used: 1
  4466 ;; This function calls:
  4467 ;;		Nothing
  4468 ;; This function is called by:
  4469 ;;		_I2C_Master_Init
  4470 ;; This function uses a non-reentrant model
  4471 ;;
  4472                           
  4473                           	psect	text31
  4474   001032                     __ptext31:
  4475                           	callstack 0
  4476   001032                     ___lldiv:
  4477                           	callstack 29
  4478   001032  0E00               	movlw	0
  4479   001034  6E09               	movwf	___lldiv@quotient^0,c
  4480   001036  0E00               	movlw	0
  4481   001038  6E0A               	movwf	(___lldiv@quotient+1)^0,c
  4482   00103A  0E00               	movlw	0
  4483   00103C  6E0B               	movwf	(___lldiv@quotient+2)^0,c
  4484   00103E  0E00               	movlw	0
  4485   001040  6E0C               	movwf	(___lldiv@quotient+3)^0,c
  4486   001042  5005               	movf	___lldiv@divisor^0,w,c
  4487   001044  1006               	iorwf	(___lldiv@divisor+1)^0,w,c
  4488   001046  1007               	iorwf	(___lldiv@divisor+2)^0,w,c
  4489   001048  1008               	iorwf	(___lldiv@divisor+3)^0,w,c
  4490   00104A  B4D8               	btfsc	status,2,c
  4491   00104C  EF2A  F008         	goto	u981
  4492   001050  EF2C  F008         	goto	u980
  4493   001054                     u981:
  4494   001054  EF62  F008         	goto	l175
  4495   001058                     u980:
  4496   001058  0E01               	movlw	1
  4497   00105A  6E0D               	movwf	___lldiv@counter^0,c
  4498   00105C  EF36  F008         	goto	l1696
  4499   001060                     l1694:
  4500   001060  90D8               	bcf	status,0,c
  4501   001062  3605               	rlcf	___lldiv@divisor^0,f,c
  4502   001064  3606               	rlcf	(___lldiv@divisor+1)^0,f,c
  4503   001066  3607               	rlcf	(___lldiv@divisor+2)^0,f,c
  4504   001068  3608               	rlcf	(___lldiv@divisor+3)^0,f,c
  4505   00106A  2A0D               	incf	___lldiv@counter^0,f,c
  4506   00106C                     l1696:
  4507   00106C  AE08               	btfss	(___lldiv@divisor+3)^0,7,c
  4508   00106E  EF3B  F008         	goto	u991
  4509   001072  EF3D  F008         	goto	u990
  4510   001076                     u991:
  4511   001076  EF30  F008         	goto	l1694
  4512   00107A                     u990:
  4513   00107A                     l1698:
  4514   00107A  90D8               	bcf	status,0,c
  4515   00107C  3609               	rlcf	___lldiv@quotient^0,f,c
  4516   00107E  360A               	rlcf	(___lldiv@quotient+1)^0,f,c
  4517   001080  360B               	rlcf	(___lldiv@quotient+2)^0,f,c
  4518   001082  360C               	rlcf	(___lldiv@quotient+3)^0,f,c
  4519   001084  5005               	movf	___lldiv@divisor^0,w,c
  4520   001086  5C01               	subwf	___lldiv@dividend^0,w,c
  4521   001088  5006               	movf	(___lldiv@divisor+1)^0,w,c
  4522   00108A  5802               	subwfb	(___lldiv@dividend+1)^0,w,c
  4523   00108C  5007               	movf	(___lldiv@divisor+2)^0,w,c
  4524   00108E  5803               	subwfb	(___lldiv@dividend+2)^0,w,c
  4525   001090  5008               	movf	(___lldiv@divisor+3)^0,w,c
  4526   001092  5804               	subwfb	(___lldiv@dividend+3)^0,w,c
  4527   001094  A0D8               	btfss	status,0,c
  4528   001096  EF4F  F008         	goto	u1001
  4529   00109A  EF51  F008         	goto	u1000
  4530   00109E                     u1001:
  4531   00109E  EF5A  F008         	goto	l1706
  4532   0010A2                     u1000:
  4533   0010A2  5005               	movf	___lldiv@divisor^0,w,c
  4534   0010A4  5E01               	subwf	___lldiv@dividend^0,f,c
  4535   0010A6  5006               	movf	(___lldiv@divisor+1)^0,w,c
  4536   0010A8  5A02               	subwfb	(___lldiv@dividend+1)^0,f,c
  4537   0010AA  5007               	movf	(___lldiv@divisor+2)^0,w,c
  4538   0010AC  5A03               	subwfb	(___lldiv@dividend+2)^0,f,c
  4539   0010AE  5008               	movf	(___lldiv@divisor+3)^0,w,c
  4540   0010B0  5A04               	subwfb	(___lldiv@dividend+3)^0,f,c
  4541   0010B2  8009               	bsf	___lldiv@quotient^0,0,c
  4542   0010B4                     l1706:
  4543   0010B4  90D8               	bcf	status,0,c
  4544   0010B6  3208               	rrcf	(___lldiv@divisor+3)^0,f,c
  4545   0010B8  3207               	rrcf	(___lldiv@divisor+2)^0,f,c
  4546   0010BA  3206               	rrcf	(___lldiv@divisor+1)^0,f,c
  4547   0010BC  3205               	rrcf	___lldiv@divisor^0,f,c
  4548   0010BE  2E0D               	decfsz	___lldiv@counter^0,f,c
  4549   0010C0  EF3D  F008         	goto	l1698
  4550   0010C4                     l175:
  4551   0010C4  C009  F001         	movff	___lldiv@quotient,?___lldiv
  4552   0010C8  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  4553   0010CC  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  4554   0010D0  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  4555   0010D4  0012               	return		;funcret
  4556   0010D6                     __end_of___lldiv:
  4557                           	callstack 0
  4558                           
  4559                           	psect	rparam
  4560   000001                     ___rparam_used  equ	1
  4561   000000                     ___param_bank   equ	0
  4562   000000                     __Lparam        equ	__Lrparam
  4563   000000                     __Hparam        equ	__Hrparam
  4564                           
  4565                           	psect	idloc
  4566                           
  4567                           ;Config register IDLOC0 @ 0x200000
  4568                           ;	unspecified, using default values
  4569   200000                     	org	2097152
  4570   200000  FF                 	db	255
  4571                           
  4572                           ;Config register IDLOC1 @ 0x200001
  4573                           ;	unspecified, using default values
  4574   200001                     	org	2097153
  4575   200001  FF                 	db	255
  4576                           
  4577                           ;Config register IDLOC2 @ 0x200002
  4578                           ;	unspecified, using default values
  4579   200002                     	org	2097154
  4580   200002  FF                 	db	255
  4581                           
  4582                           ;Config register IDLOC3 @ 0x200003
  4583                           ;	unspecified, using default values
  4584   200003                     	org	2097155
  4585   200003  FF                 	db	255
  4586                           
  4587                           ;Config register IDLOC4 @ 0x200004
  4588                           ;	unspecified, using default values
  4589   200004                     	org	2097156
  4590   200004  FF                 	db	255
  4591                           
  4592                           ;Config register IDLOC5 @ 0x200005
  4593                           ;	unspecified, using default values
  4594   200005                     	org	2097157
  4595   200005  FF                 	db	255
  4596                           
  4597                           ;Config register IDLOC6 @ 0x200006
  4598                           ;	unspecified, using default values
  4599   200006                     	org	2097158
  4600   200006  FF                 	db	255
  4601                           
  4602                           ;Config register IDLOC7 @ 0x200007
  4603                           ;	unspecified, using default values
  4604   200007                     	org	2097159
  4605   200007  FF                 	db	255
  4606                           
  4607                           	psect	config
  4608                           
  4609                           ;Config register CONFIG1L @ 0x300000
  4610                           ;	PLL Prescaler Selection bits
  4611                           ;	PLLDIV = 1, No prescale (4 MHz oscillator input drives PLL directly)
  4612                           ;	System Clock Postscaler Selection bits
  4613                           ;	CPUDIV = OSC1_PLL2, [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
  4614                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
  4615                           ;	USBDIV = 1, USB clock source comes directly from the primary oscillator block with no 
      +                          postscale
  4616   300000                     	org	3145728
  4617   300000  00                 	db	0
  4618                           
  4619                           ;Config register CONFIG1H @ 0x300001
  4620                           ;	Oscillator Selection bits
  4621                           ;	FOSC = INTOSC_EC, Internal oscillator, CLKO function on RA6, EC used by USB (INTCKO)
  4622                           ;	Fail-Safe Clock Monitor Enable bit
  4623                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  4624                           ;	Internal/External Oscillator Switchover bit
  4625                           ;	IESO = OFF, Oscillator Switchover mode disabled
  4626   300001                     	org	3145729
  4627   300001  09                 	db	9
  4628                           
  4629                           ;Config register CONFIG2L @ 0x300002
  4630                           ;	Power-up Timer Enable bit
  4631                           ;	PWRT = OFF, PWRT disabled
  4632                           ;	Brown-out Reset Enable bits
  4633                           ;	BOR = ON, Brown-out Reset enabled in hardware only (SBOREN is disabled)
  4634                           ;	Brown-out Reset Voltage bits
  4635                           ;	BORV = 3, Minimum setting 2.05V
  4636                           ;	USB Voltage Regulator Enable bit
  4637                           ;	VREGEN = OFF, USB voltage regulator disabled
  4638   300002                     	org	3145730
  4639   300002  1F                 	db	31
  4640                           
  4641                           ;Config register CONFIG2H @ 0x300003
  4642                           ;	Watchdog Timer Enable bit
  4643                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  4644                           ;	Watchdog Timer Postscale Select bits
  4645                           ;	WDTPS = 32768, 1:32768
  4646   300003                     	org	3145731
  4647   300003  1E                 	db	30
  4648                           
  4649                           ; Padding undefined space
  4650   300004                     	org	3145732
  4651   300004  FF                 	db	255
  4652                           
  4653                           ;Config register CONFIG3H @ 0x300005
  4654                           ;	CCP2 MUX bit
  4655                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
  4656                           ;	PORTB A/D Enable bit
  4657                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  4658                           ;	Low-Power Timer 1 Oscillator Enable bit
  4659                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  4660                           ;	MCLR Pin Enable bit
  4661                           ;	MCLRE = OFF, RE3 input pin enabled; MCLR pin disabled
  4662   300005                     	org	3145733
  4663   300005  01                 	db	1
  4664                           
  4665                           ;Config register CONFIG4L @ 0x300006
  4666                           ;	Stack Full/Underflow Reset Enable bit
  4667                           ;	STVREN = ON, Stack full/underflow will cause Reset
  4668                           ;	Single-Supply ICSP Enable bit
  4669                           ;	LVP = OFF, Single-Supply ICSP disabled
  4670                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
  4671                           ;	ICPRT = OFF, ICPORT disabled
  4672                           ;	Extended Instruction Set Enable bit
  4673                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  4674                           ;	Background Debugger Enable bit
  4675                           ;	DEBUG = 0x1, unprogrammed default
  4676   300006                     	org	3145734
  4677   300006  81                 	db	129
  4678                           
  4679                           ; Padding undefined space
  4680   300007                     	org	3145735
  4681   300007  FF                 	db	255
  4682                           
  4683                           ;Config register CONFIG5L @ 0x300008
  4684                           ;	Code Protection bit
  4685                           ;	CP0 = OFF, Block 0 (000800-001FFFh) is not code-protected
  4686                           ;	Code Protection bit
  4687                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
  4688                           ;	Code Protection bit
  4689                           ;	CP2 = OFF, Block 2 (004000-005FFFh) is not code-protected
  4690                           ;	Code Protection bit
  4691                           ;	CP3 = OFF, Block 3 (006000-007FFFh) is not code-protected
  4692   300008                     	org	3145736
  4693   300008  0F                 	db	15
  4694                           
  4695                           ;Config register CONFIG5H @ 0x300009
  4696                           ;	Boot Block Code Protection bit
  4697                           ;	CPB = OFF, Boot block (000000-0007FFh) is not code-protected
  4698                           ;	Data EEPROM Code Protection bit
  4699                           ;	CPD = OFF, Data EEPROM is not code-protected
  4700   300009                     	org	3145737
  4701   300009  C0                 	db	192
  4702                           
  4703                           ;Config register CONFIG6L @ 0x30000A
  4704                           ;	Write Protection bit
  4705                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) is not write-protected
  4706                           ;	Write Protection bit
  4707                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
  4708                           ;	Write Protection bit
  4709                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) is not write-protected
  4710                           ;	Write Protection bit
  4711                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) is not write-protected
  4712   30000A                     	org	3145738
  4713   30000A  0F                 	db	15
  4714                           
  4715                           ;Config register CONFIG6H @ 0x30000B
  4716                           ;	Configuration Register Write Protection bit
  4717                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
  4718                           ;	Boot Block Write Protection bit
  4719                           ;	WRTB = OFF, Boot block (000000-0007FFh) is not write-protected
  4720                           ;	Data EEPROM Write Protection bit
  4721                           ;	WRTD = OFF, Data EEPROM is not write-protected
  4722   30000B                     	org	3145739
  4723   30000B  E0                 	db	224
  4724                           
  4725                           ;Config register CONFIG7L @ 0x30000C
  4726                           ;	Table Read Protection bit
  4727                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) is not protected from table reads executed in ot
      +                          her blocks
  4728                           ;	Table Read Protection bit
  4729                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
  4730                           ;	Table Read Protection bit
  4731                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) is not protected from table reads executed in ot
      +                          her blocks
  4732                           ;	Table Read Protection bit
  4733                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) is not protected from table reads executed in ot
      +                          her blocks
  4734   30000C                     	org	3145740
  4735   30000C  0F                 	db	15
  4736                           
  4737                           ;Config register CONFIG7H @ 0x30000D
  4738                           ;	Boot Block Table Read Protection bit
  4739                           ;	EBTRB = OFF, Boot block (000000-0007FFh) is not protected from table reads executed in
      +                           other blocks
  4740   30000D                     	org	3145741
  4741   30000D  40                 	db	64
  4742                           tosu	equ	0xFFF
  4743                           tosh	equ	0xFFE
  4744                           tosl	equ	0xFFD
  4745                           stkptr	equ	0xFFC
  4746                           pclatu	equ	0xFFB
  4747                           pclath	equ	0xFFA
  4748                           pcl	equ	0xFF9
  4749                           tblptru	equ	0xFF8
  4750                           tblptrh	equ	0xFF7
  4751                           tblptrl	equ	0xFF6
  4752                           tablat	equ	0xFF5
  4753                           prodh	equ	0xFF4
  4754                           prodl	equ	0xFF3
  4755                           indf0	equ	0xFEF
  4756                           postinc0	equ	0xFEE
  4757                           postdec0	equ	0xFED
  4758                           preinc0	equ	0xFEC
  4759                           plusw0	equ	0xFEB
  4760                           fsr0h	equ	0xFEA
  4761                           fsr0l	equ	0xFE9
  4762                           wreg	equ	0xFE8
  4763                           indf1	equ	0xFE7
  4764                           postinc1	equ	0xFE6
  4765                           postdec1	equ	0xFE5
  4766                           preinc1	equ	0xFE4
  4767                           plusw1	equ	0xFE3
  4768                           fsr1h	equ	0xFE2
  4769                           fsr1l	equ	0xFE1
  4770                           bsr	equ	0xFE0
  4771                           indf2	equ	0xFDF
  4772                           postinc2	equ	0xFDE
  4773                           postdec2	equ	0xFDD
  4774                           preinc2	equ	0xFDC
  4775                           plusw2	equ	0xFDB
  4776                           fsr2h	equ	0xFDA
  4777                           fsr2l	equ	0xFD9
  4778                           status	equ	0xFD8

Data Sizes:
    Strings     61
    Constant    0
    Data        0
    BSS         37
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     89      94
    BANK0           160      0      32
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    dtoa@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    f$.$buffer	PTR unsigned char  size(1) Largest target is 17
		 -> main@buffer(COMRAM[17]), 

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    fputc@fp$.$buffer	PTR unsigned char  size(1) Largest target is 17
		 -> main@buffer(COMRAM[17]), 

    fputc@fp$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputs@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    fputs@s	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK0[32]), 

    LCD_String@msg	PTR const unsigned char  size(2) Largest target is 17
		 -> main@buffer(COMRAM[17]), STR_1(CODE[17]), 

    LCD_String_xy@msg	PTR const unsigned char  size(2) Largest target is 17
		 -> main@buffer(COMRAM[17]), STR_1(CODE[17]), 

    pad@buf	PTR unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK0[32]), 

    pad@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    read_prec_or_width@ap	PTR PTR void [1] size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    read_prec_or_width@fmt	PTR PTR const unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    RTC_GetDateTime@day	PTR unsigned char  size(1) Largest target is 1
		 -> main@d(COMRAM[1]), 

    RTC_GetDateTime@hour	PTR unsigned char  size(1) Largest target is 1
		 -> main@h(COMRAM[1]), 

    RTC_GetDateTime@min	PTR unsigned char  size(1) Largest target is 1
		 -> main@m(COMRAM[1]), 

    RTC_GetDateTime@month	PTR unsigned char  size(1) Largest target is 1
		 -> main@mo(COMRAM[1]), 

    RTC_GetDateTime@sec	PTR unsigned char  size(1) Largest target is 1
		 -> main@s(COMRAM[1]), 

    RTC_GetDateTime@year	PTR unsigned char  size(1) Largest target is 1
		 -> main@y(COMRAM[1]), 

    S650$buffer	PTR unsigned char  size(1) Largest target is 17
		 -> main@buffer(COMRAM[17]), 

    S650$source	PTR const unsigned char  size(2) Largest target is 0

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    sprintf@fmt	PTR const unsigned char  size(1) Largest target is 23
		 -> STR_2(CODE[23]), STR_3(CODE[21]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 17
		 -> main@buffer(COMRAM[17]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(1) Largest target is 23
		 -> STR_2(CODE[23]), STR_3(CODE[21]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfprintf@cfmt	PTR unsigned char  size(1) Largest target is 23
		 -> STR_2(CODE[23]), STR_3(CODE[21]), 

    vfprintf@fmt	PTR const unsigned char  size(1) Largest target is 23
		 -> STR_2(CODE[23]), STR_3(CODE[21]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___awmod
    _RTC_SetDateTime->_I2C_Master_Write
    _DEC2BCD->___awdiv
    _RTC_Init->_I2C_Master_Write
    _RTC_GetDateTime->_I2C_Master_Write
    _I2C_Master_Write->_DEC2BCD
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_RepeatedStart->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _LCD_String_xy->_LCD_String
    _LCD_String->_LCD_Char
    _LCD_Init->_LCD_Command
    _LCD_Clear->_LCD_Command
    _I2C_Master_Init->___lldiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                25    25      0    5102
                                             64 COMRAM    25    25      0
                    _I2C_Master_Init
                          _LCD_Clear
                           _LCD_Init
                      _LCD_String_xy
                    _RTC_GetDateTime
                           _RTC_Init
                    _RTC_SetDateTime
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             22    14      8    3007
                                             44 COMRAM    20    12      8
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             4     1      3    2802
                                             40 COMRAM     4     1      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           10     7      3    2668
                                             31 COMRAM     9     6      3
                               _dtoa
                              _fputc
                 _read_prec_or_width
 ---------------------------------------------------------------------------------
 (4) _read_prec_or_width                                   7     5      2     182
                                              0 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                11     8      3    1829
                                             20 COMRAM    11     8      3
                            ___awdiv
                            ___awmod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                  7     3      4     747
                                             13 COMRAM     7     3      4
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (6) _fputs                                                5     3      2     333
                                              8 COMRAM     5     3      2
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                8     5      3     232
                                              0 COMRAM     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2      67
                                              6 COMRAM     4     2      2
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _RTC_SetDateTime                                      8     3      5     847
                                             13 COMRAM     7     2      5
                            _DEC2BCD
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _DEC2BCD                                              3     3      0     662
                                              8 COMRAM     3     3      0
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4     300
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4     304
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _RTC_Init                                             2     2      0     138
                                             13 COMRAM     2     2      0
                    _I2C_Master_Read
           _I2C_Master_RepeatedStart
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _RTC_GetDateTime                                      6     0      6     261
                                             13 COMRAM     6     0      6
                            _BCD2DEC
                    _I2C_Master_Read
           _I2C_Master_RepeatedStart
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2      40
                                             11 COMRAM     2     0      2
                            _DEC2BCD (ARG)
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_RepeatedStart                             0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      4     2      2      53
                                              1 COMRAM     4     2      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _BCD2DEC                                              2     2      0      30
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _LCD_String_xy                                        5     2      3     232
                                              4 COMRAM     5     2      3
                        _LCD_Command
                         _LCD_String
 ---------------------------------------------------------------------------------
 (2) _LCD_String                                           2     0      2      76
                                              2 COMRAM     2     0      2
                           _LCD_Char
 ---------------------------------------------------------------------------------
 (3) _LCD_Char                                             2     2      0      30
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             1     1      0      30
                                              2 COMRAM     1     1      0
                        _LCD_Command
 ---------------------------------------------------------------------------------
 (1) _LCD_Clear                                            1     1      0      30
                                              2 COMRAM     1     1      0
                        _LCD_Command
 ---------------------------------------------------------------------------------
 (2) _LCD_Command                                          2     2      0      30
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     187
                                             13 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     164
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _LCD_Clear
     _LCD_Command
   _LCD_Init
     _LCD_Command
   _LCD_String_xy
     _LCD_Command
     _LCD_String
       _LCD_Char
   _RTC_GetDateTime
     _BCD2DEC
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_RepeatedStart
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _DEC2BCD (ARG)
         ___awdiv
         ___awmod
       _I2C_Master_Wait (ARG)
   _RTC_Init
     _I2C_Master_Read
     _I2C_Master_RepeatedStart
     _I2C_Master_Start
     _I2C_Master_Stop
     _I2C_Master_Write
   _RTC_SetDateTime
     _DEC2BCD
     _I2C_Master_Start
     _I2C_Master_Stop
     _I2C_Master_Write
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _dtoa
           ___awdiv
           ___awmod
           _abs
             ___awmod (ARG)
           _pad
             _fputc
               _putch
             _fputs
               _fputc
         _fputc
         _read_prec_or_width

Address spaces:
Name               Size   Autos  Total    Usage
BIGRAM            2047      0       0      0.0%
BITBANK7           256      0       0      0.0%
BANK7              256      0       0      0.0%
BITBANK6           256      0       0      0.0%
BANK6              256      0       0      0.0%
BITBANK5           256      0       0      0.0%
BANK5              256      0       0      0.0%
BITBANK4           256      0       0      0.0%
BANK4              256      0       0      0.0%
BITBANK3           256      0       0      0.0%
BANK3              256      0       0      0.0%
BITBANK2           256      0       0      0.0%
BANK2              256      0       0      0.0%
BITBANK1           256      0       0      0.0%
BANK1              256      0       0      0.0%
BITBANK0           160      0       0      0.0%
BANK0              160      0      32     20.0%
BITCOMRAM           95      0       0      0.0%
COMRAM              95     89      94     98.9%
BITBIGSFRh          58      0       0      0.0%
BITBIGSFRlh         49      0       0      0.0%
BITBIGSFRlll        44      0       0      0.0%
BITBIGSFRllh         6      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0     126      0.0%


Microchip Technology PIC18 Macro Assembler V3.00 build 20241204225717 
Symbol Table                                                                                   Thu Apr 24 08:05:43 2025

                    ?_LCD_Command 0001                                l20 11E0                                l13 156C  
                              l23 1030                                l16 1428                                l26 0CCE  
                              l63 151E                                l72 1582                                l57 1296  
                              l66 158A                                l75 157A                                l69 1592  
                              l78 145E                      ___awdiv@sign 0006                       ?_LCD_String 0003  
                 __end_of_BCD2DEC 156E                               l131 12EA                               l125 14F8  
                             l142 13F2                               l128 133E                               l145 1556  
                             l137 123E                               l182 10D4                               l175 10C4  
                             l392 0E3E                               l379 0D90                               l900 14AE  
                             l903 14C6                               l826 1492                               l915 0EE8  
                             l923 13B8                               l851 115E                               l926 1594  
                             l846 1106                               l854 089E                               l871 0F84  
                             l849 1144                               l890 0AFA                               l867 09A2  
                             l875 0F8C                               l896 137C                               u350 1510  
                             u351 150C                               u360 151E                               u600 0CFA  
                             _PEN 7E2A                               u361 151A                               u601 0CF6  
                             u610 0D20                               u611 0D1C                               u620 0D3E  
                             u700 0E2E                               u540 0E50                               u621 0D3A  
                             u701 0E2A                               u541 0E4C                               u630 0D5A  
                             u550 0E60                               u710 10E4                               u631 0D56  
                             u551 0E5C                               u711 10E0                               u640 0D80  
                             u560 0E86                               u720 10FE                               u800 0920  
                             u641 0D7C                               u561 0E82                               u721 10FA  
                             u801 091C                               u650 0DA2                               u570 0EB8  
                             u730 1144                               u810 0932                               u651 0D9E  
                             u571 0EB4                               u731 1140                               u811 092E  
                             u660 0DBC                               u580 13B8                               u740 1152  
                             u820 0942                               u900 0A4A                               _SEN 7E28  
                             u661 0DB8                   __end_of_DEC2BCD 142A                               u581 13B4  
                             u741 114E                               u821 093E                               u901 0A46  
                             u590 0CE0                               u670 0DD6                               u750 14A2  
                             u830 095C                               u910 0A7A                               u591 0CDC  
                             u671 0DD2                               u751 149E                               u831 0958  
                             u911 0A76                               u680 0DF4                               u840 096A  
                             u760 0854                               u920 0A96                               u681 0DF0  
                             u841 0966                               u761 084E                               u921 0A92  
                             u930 1452                               u690 0E0A                               u850 097A  
                             u770 0856                               u931 144C                               u691 0E06  
                             u851 0976                               u780 0870                               u860 0F14  
                             u781 086C                               u861 0F10                               u950 1206  
                             u790 0886                               u870 0F84                               u791 0882  
                             u871 0F80                               u960 122E                               u880 09C6  
                             u945 1454                               u881 09C2                               u970 123E  
                             u890 0A28                               u971 123A                               u891 0A24  
                             u980 1058                               u981 1054                               u957 11FC  
                             u990 107A                               u991 1076                               u967 1224  
         __end_of_RTC_SetDateTime 1032                               _abs 1494                               _pad 10D6  
                    ___awmod@sign 0006                               wreg 0FE8                       LCD_Char@dat 0002  
                            l1120 129A                              l1200 1584                              l1130 12B2  
                            l1122 12AA                              l1114 14FA                              l1202 1588  
                            ?_abs 0007                              l1132 12C0                              l1124 12AC  
                            l1116 14FA                              l1212 158C                              l1134 12D6  
                            l1126 12AE                              l1118 1510                              l1214 1590  
                            l1230 157C                              l1240 1302                              l1136 12D8  
                            l1128 12B0                              l1232 1580                              l1250 132C  
                            l1242 1304                              l1234 12EE                              l1138 12DA  
                            l1252 132E                              l1244 1306                              l1236 12FE  
                            l1500 0DE6                              l1420 0E60                              l1246 1314  
                            l1238 1300                              l1350 14DA                              l1502 0DF4  
                            l1510 0E1E                              l1422 0E6A                              l1430 137E  
                            l1248 132A                              l1360 1540                              l1352 14E0  
                            l1192 155A                              l1440 0CD2                              l1512 0E2E  
                            l1504 0E0A                              l1424 0E86                              l1416 0E40  
                            l1432 138A                              l1520 10E4                              l1600 0F5E  
                            l1362 1546                              l1354 14E6                              l1346 14C8  
                            l1450 0D02                              l1442 0CE0                              l1514 0E36  
                            l1506 0E12                              l1426 0EB8                              l1418 0E50  
                            l1434 1398                              l1530 1126                              l1522 10F0  
                            l1610 09DE                              l1602 09A4                              l1700 1084  
                            l1356 14EC                              l1348 14CA                              l1460 0D30  
                            l1452 0D06                              l1444 0CE8                              l1508 0E18  
                            l1436 139C                              l1532 1152                              l1524 10FE  
                            l1540 0844                              l1620 09FA                              l1612 09E4  
                            l1604 09C6                              l1702 10A2                              l1358 14F2  
                            l1470 0D64                              l1462 0D3E                              l1454 0D0E  
                            l1446 0CEC                              l1438 0CD0                              l1534 1494  
                            l1526 1112                              l1518 10D6                              l1550 0886  
                            l1542 0858                              l1630 0A54                              l1614 09E6  
                            l1622 0A18                              l1606 09CE                              l1710 1340  
                            l1704 10B2                              l1720 1160                              l1472 0D6A  
                            l1464 0D44                              l1456 0D20                              l1448 0CFA  
                            l1536 14A2                              l1528 1122                              l1560 08B4  
                            l1552 0892                              l1544 0860                              l1640 0AB8  
                            l1632 0A5E                              l1624 0A28                              l1616 09F2  
                            l1608 09DA                              l1712 1348                              l1800 0B10  
                            l1706 10B4                              l1722 11A0                              l1466 0D5A  
                            l1458 0D28                              l1474 0D70                              l1490 0DAE  
                            l1482 0D92                              l1730 0F96                              l1570 0920  
                            l1562 08E2                              l1554 089A                              l1546 0870  
                            l1538 0840                              l1634 0A7A                              l1626 0A3C  
                            l1714 1358                              l1810 0B5C                              l1802 0B14  
                            l1708 10BE                              l1660 1572                              l1724 11AE  
                            l1476 0D80                              l1468 0D62                              l1492 0DBC  
                            l1484 0D94                              l1740 0FE4                              l1732 0FA2  
                            l1580 097A                              l1572 0932                              l1564 08E4  
                            l1556 08A6                              l1548 0876                              l1644 0ACC  
                            l1636 0A96                              l1628 0A4A                              l1716 1374  
                            l1820 0BC8                              l1812 0B60                              l1804 0B28  
                            l1670 1434                              l1662 157A                              l1750 0BF6  
                            l1478 0D88                              l1494 0DC4                              l1486 0DA2  
                            l1654 13F6                              l1742 0FF6                              l1734 0FAE  
                            l1726 0F90                              l1582 0980                              l1574 0942  
                            l1566 08EA                              l1558 08AE                              l1590 0EF2  
                            l1638 0AAE                              l1822 0BD8                              l1814 0B7C  
                            l1806 0B3E                              l1680 11E2                              l1672 143E  
                            l1760 0CCA                              l1752 0C22                              l1496 0DD6  
                            l1488 0DAA                              l1744 1008                              l1736 0FC0  
                            l1728 0F92                              l1584 098C                              l1576 095C  
                            l1568 0906                              l1592 0F14                              l1648 0AD8  
                            l1816 0B9A                              l1808 0B42                              l1690 1042  
                            l1770 1294                              l1762 1240                              l1682 11E6  
                            l1674 1454                              l1666 142A                              l1658 156E  
                            l1754 0C3C                              l1498 0DDE                              l1746 101A  
                            l1738 0FD2                              l1578 096A                              l1594 0F1C  
                            l1818 0BAA                              l1692 1058                              l1764 1244  
                            l1684 120A                              l1780 13E0                              l1772 13BC  
                            l1676 1456                              l1668 142E                              l1756 0C56  
                            l1748 102C                              l1596 0F38                              l1588 0EEA  
                            l1694 1060                              l1766 1248                              l1686 120E  
                            l1782 13E6                              l1774 13BC                              l1758 0C70  
                            l1598 0F56                              l1790 1478                              l1696 106C  
                            l1688 1032                              l1768 124A                              l1776 13CC  
                            l1792 1488                              l1784 1460                              l1698 107A  
                            l1778 13D8                              l1786 1468                              l1788 1470  
                            l1796 0AFC                              l1798 0B0C                              ?_pad 000E  
                            STR_1 082D                              STR_2 0801                              STR_3 0818  
                            u1000 10A2                              u1001 109E                              u1010 1374  
                            u1011 1370                              u1020 11AE                              u1021 11AA  
                            u1040 13CC                              u1041 13C8                              u1035 126C  
                            u1107 130C                              u1117 1336                              u1057 0BE2  
                            u1067 12B8                              u1077 12E2                              u1087 14D0  
                            _LATD 0F8C                              u1097 154C                              _RCEN 7E2B  
                            _RSEN 7E29                              abs@a 0007                              _dbuf 0060  
__end_of_I2C_Master_RepeatedStart 1594                              _main 0AFC                              _dtoa 0840  
                            _prec 005C                              pad@i 0013                              pad@p 0010  
                            fsr1h 0FE2                              fsr2h 0FDA                              indf1 0FE7  
                            indf2 0FDF                              fsr1l 0FE1                              fsr2l 0FD9  
                            prodh 0FF4                              prodl 0FF3                              start 7FFC  
                   _LCD_String_xy 13BA                      ___param_bank 0000                             ??_abs 0009  
                           ??_pad 0012                  __end_of_LCD_Char 12EC                  __end_of_LCD_Init 14FA  
                ?_I2C_Master_Init 000E                  ?_I2C_Master_Read 0002                  ?_I2C_Master_Wait 0001  
                ?_I2C_Master_Stop 0001                             ?_main 0001                             ?_dtoa 0015  
                           _ACKEN 7E2C                             _ACKDT 7E2D                   __end_of___awdiv 0D92  
                 __end_of___awmod 0E40                   __end_of___lldiv 10D6                   ___awdiv@divisor 0003  
                           _LATD0 7C60                             _LATD2 7C62                   ___awdiv@counter 0005  
                    vfpfcnvrt@fmt 0021                             _TRISD 0F95                             _flags 005E  
             read_prec_or_width@c 0005               read_prec_or_width@n 0006                             _fputc 0E40  
                           _fputs 137E                  __end_of_RTC_Init 11E2                             pad@fp 000E  
                           _width 005A                             _putch 1594                             main@d 0057  
                           main@h 0054                             main@m 0055                             dtoa@d 0016  
                           main@s 0056                             dtoa@i 001E                             main@y 0059  
                           dtoa@p 001A                             dtoa@s 001D                             dtoa@w 001B  
                           tablat 0FF5                             status 0FD8                   __end_of_sprintf 1494  
                  ?_LCD_String_xy 0005                   __initialization 1520                      __end_of_main 0BF6  
                    __end_of_dtoa 09A4                         ??_BCD2DEC 0001                         ??_DEC2BCD 0009  
                          ??_main 0041                            ??_dtoa 0018                 __end_of_LCD_Clear 1558  
                   __activetblptr 0002                  ?_RTC_SetDateTime 000E        __end_of_read_prec_or_width 0F8E  
               ?_I2C_Master_Start 0001                 ?_I2C_Master_Write 000C                ??_I2C_Master_Start 0002  
                          _ADCON1 0FC1                ??_I2C_Master_Write 000E                            ?_fputc 0001  
                          ?_fputs 0009                  ___awdiv@dividend 0001                            ?_putch 0001  
                LCD_String_xy@msg 0006                  LCD_String_xy@pos 0005                  LCD_String_xy@row 0008  
                   vfpfcnvrt@done 0027                            _SSPADD 0FC8                            _TRISB0 7C98  
                          _TRISB1 7C99                            _SSPBUF 0FC9          _I2C_Master_RepeatedStart 158C  
                    vfprintf@cfmt 002C                         ??___awdiv 0005                         ??___awmod 0005  
                       ??___lldiv 0009              read_prec_or_width@ap 0002                            clear_0 1526  
                ___awdiv@quotient 0007                   ___awmod@divisor 0003                            isa$std 0001  
                 ___awmod@counter 0005                            pad@buf 000F                            main@mo 0058  
                          dtoa@fp 0015                            fputc@c 0001                            fputs@c 000B  
                          fputs@i 000C                            fputs@s 0009                        BCD2DEC@val 0002  
                    __mediumconst 0800                            tblptrh 0FF7                            tblptrl 0FF6  
                          tblptru 0FF8                            putch@c 0001                  __end_of_vfprintf 137E  
                       ??_sprintf 0035                         ?_LCD_Char 0001                        __accesstop 0060  
         __end_of__initialization 1536                         ?_LCD_Init 0001                   ??_LCD_String_xy 0008  
                   ___rparam_used 0001                    __pcstackCOMRAM 0001                        DEC2BCD@val 000B  
                   __end_of_fputc 0EEA                     __end_of_fputs 13BA                     __end_of_putch 1596  
                    ??_LCD_String 0005                         ?_RTC_Init 0001                           ??_fputc 0004  
                         ??_fputs 000B                           ??_putch 0001                        __pbssBANK0 0060  
                      ??_LCD_Char 0001                        ??_LCD_Init 0003                __end_of_LCD_String 1240  
                         _BCD2DEC 1558                           _DEC2BCD 13F4                           _ACKSTAT 7E2E  
                      ??_RTC_Init 000E                           _SSPCON1 0FC6                           _SSPCON2 0FC5  
                         _SSPSTAT 0FC7                     LCD_String@msg 0003                           __Hparam 0000  
                         __Lparam 0000                           ___awdiv 0CD0                           ___awmod 0D92  
                         ___lldiv 1032                         ?_vfprintf 0029                      __psmallconst 0800  
                         __pcinit 1520                           __ramtop 0800                           __ptext0 0AFC  
                         __ptext1 1460                           __ptext2 1340                           __ptext3 09A4  
                         __ptext4 0EEA                           __ptext5 0840                           __ptext6 10D6  
                         __ptext7 137E                           __ptext8 0E40                           __ptext9 1594  
           read_prec_or_width@fmt 0001                  ___awmod@dividend 0001                         _LCD_Clear 1540  
                         _sprintf 1460              end_of_initialization 1536        ??_I2C_Master_RepeatedStart 0002  
                         fputc@fp 0003                    LCD_Command@cmd 0002                     __Lmediumconst 0000  
                         fputs@fp 000A                _read_prec_or_width 0EEA                 ??_RTC_GetDateTime 0014  
                 ___lldiv@divisor 0005                   ___lldiv@counter 000D                 __end_of_vfpfcnvrt 0AFC  
                I2C_Master_Init@c 000E                  I2C_Master_Read@a 0002                           postdec2 0FDD  
             ?_read_prec_or_width 0001                           postinc0 0FEE                           postinc1 0FE6  
                         postinc2 0FDE                  vfpfcnvrt@convarg 0023                        ??_vfprintf 002C  
                      ?_LCD_Clear 0001              ??_read_prec_or_width 0003                        main@buffer 0043  
                   ??_LCD_Command 0001                       vfpfcnvrt@ap 0022                       vfpfcnvrt@cp 0028  
                     vfpfcnvrt@fp 0020                       RTC_Init@sec 000F               start_initialization 1520  
                     __end_of_abs 14C8                       __end_of_pad 1160                 RTC_SetDateTime@mo 0011  
               ??_I2C_Master_Init 0012                 ??_I2C_Master_Read 0004                 ??_I2C_Master_Wait 0001  
               ??_I2C_Master_Stop 0002             __end_of_LCD_String_xy 13F4                       vfprintf@fmt 002A  
                        ?_BCD2DEC 0001                          ?_DEC2BCD 0001              RTC_GetDateTime@month 0012  
             __end_of_LCD_Command 1340                       __pbssCOMRAM 005A                       ??_LCD_Clear 0003  
                _I2C_Master_Start 1584                  _I2C_Master_Write 156E                 ??_RTC_SetDateTime 0013  
                        ?___awdiv 0001                          ?___awmod 0001                          ?___lldiv 0001  
                     __smallconst 0800                   _RTC_GetDateTime 0BF6             LCD_String_xy@location 0009  
                        ?_sprintf 002D                          _LCD_Char 1298                          _LCD_Init 14C8  
                     _LCD_Command 12EC                         _vfpfcnvrt 09A4                          _RTC_Init 1160  
             I2C_Master_Read@temp 0004                  RTC_SetDateTime@d 0010                  RTC_SetDateTime@h 0014  
                RTC_SetDateTime@m 000E                  RTC_SetDateTime@s 000F                  RTC_SetDateTime@y 0012  
                        __Hrparam 0000                        vfprintf@ap 002B                          __Lrparam 0000  
                      vfprintf@fp 0029               RTC_GetDateTime@hour 000E               RTC_GetDateTime@year 0013  
       ?_I2C_Master_RepeatedStart 0001                        ?_vfpfcnvrt 0020           __end_of_RTC_GetDateTime 0CD0  
                      sprintf@fmt 002E                   _I2C_Master_Init 1240                   _I2C_Master_Read 142A  
                 _I2C_Master_Wait 14FA                   _I2C_Master_Stop 157C                          _dtoa$729 0018  
                        __ptext10 1494                          __ptext11 0F8E                          __ptext20 158C  
                        __ptext12 13F4                          __ptext21 142A                          __ptext13 0D92  
                        __ptext30 1240                          __ptext22 14FA                          __ptext14 0CD0  
                        __ptext31 1032                          __ptext23 1558                          __ptext15 1160  
                        __ptext24 13BA                          __ptext16 0BF6                          __ptext25 11E2  
                        __ptext17 156E                          __ptext26 1298                          __ptext18 157C  
                        __ptext27 14C8                          __ptext19 1584                          __ptext28 1540  
                        __ptext29 12EC                          isa$xinst 0000                          _vfprintf 1340  
                      _LCD_String 11E2          __end_of_I2C_Master_Start 158C          __end_of_I2C_Master_Write 157C  
              RTC_GetDateTime@day 0011                RTC_GetDateTime@min 000F                RTC_GetDateTime@sec 0010  
                 _RTC_SetDateTime 0F8E                         sprintf@ap 0035                  ___lldiv@dividend 0001  
                      _OSCCONbits 0FD3           __end_of_I2C_Master_Init 1298           __end_of_I2C_Master_Read 1460  
         __end_of_I2C_Master_Wait 1520           __end_of_I2C_Master_Stop 1584                       ??_vfpfcnvrt 0023  
                ?_RTC_GetDateTime 000E                          sprintf@f 0036                          sprintf@s 002D  
                ___lldiv@quotient 0009                 I2C_Master_Write@d 000C  
